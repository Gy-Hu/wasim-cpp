GET INVAR: ILA_r3_randinit
GET INVAR: ILA_r2_randinit
GET INVAR: ILA_r1_randinit
GET INVAR: ILA_r0_randinit
GET INVAR: __ILA_I_inst
GET INVAR: __VLG_I_dummy_read_rf
GET INVAR: __VLG_I_inst
GET INVAR: __VLG_I_inst_valid
GET INVAR: __VLG_I_stallex
GET INVAR: __VLG_I_stallwb
GET INVAR: ____auxvar0__recorder_init__
GET INVAR: ____auxvar1__recorder_init__
GET INVAR: ____auxvar2__recorder_init__
GET INVAR: ____auxvar3__recorder_init__
GET INVAR: clk
GET INVAR: dummy_reset
GET INVAR: rst
GET SV: RTL_id_ex_valid
GET SV: RTL_ex_wb_valid
GET SV: RTL_ex_wb_rd
GET SV: RTL_ex_wb_reg_wen
GET SV: RTL_id_ex_rd
GET SV: RTL_id_ex_reg_wen
GET SV: RTL_if_id_valid
GET SV: RTL_registers[0]
GET SV: RTL_registers[1]
GET SV: RTL_registers[2]
GET SV: RTL_registers[3]
GET SV: RTL_scoreboard[0]
GET SV: RTL_scoreboard[1]
GET SV: RTL_scoreboard[2]
GET SV: RTL_scoreboard[3]
GET SV: ILA_r0
GET SV: ILA_r1
GET SV: ILA_r2
GET SV: ILA_r3
GET SV: ILA___COUNTER_start__n3
GET SV: RTL_ex_wb_val
GET SV: RTL_if_id_inst
GET SV: RTL_id_ex_operand1
GET SV: RTL_id_ex_operand2
GET SV: RTL_id_ex_op
clk
____auxvar3__recorder_init__
__VLG_I_inst_valid
rst
ILA_r1_randinit
input105
dummy_reset
ILA_r0_randinit
__VLG_I_inst
__VLG_I_stallex
__ILA_I_inst
ILA_r3_randinit
__VLG_I_stallwb
ILA_r2_randinit
__VLG_I_dummy_read_rf
____auxvar0__recorder_init__
____auxvar1__recorder_init__
____auxvar2__recorder_init__


 state var: 

RTL_id_ex_op
ILA___COUNTER_start__n3
__auxvar2__recorder_sn_vhold
RTL_id_ex_operand1
__auxvar1__recorder_sn_vhold
stage_tracker_id_ex_iuv
__auxvar2__recorder_sn_condmet
RTL_if_id_inst
__auxvar1__recorder_sn_condmet
stage_tracker_ex_wb_iuv
RTL_registers[3]
__auxvar0__recorder
RTL_ex_wb_val
RTL_scoreboard[0]
__auxvar3__recorder_sn_condmet
__START__
RTL_registers[0]
RTL_if_id_valid
__auxvar3__recorder_sn_vhold
RTL_scoreboard[1]
RTL_scoreboard[2]
RTL_id_ex_reg_wen
__auxvar0__recorder_sn_vhold
RTL_id_ex_rd
RTL_ex_wb_rd
RTL_id_ex_operand2
RTL_registers[2]
stage_tracker_if_id_iuv
RTL_ex_wb_valid
__auxvar2__recorder
__2ndENDED__
RTL_id_ex_valid
__CYCLE_CNT__
stage_tracker_wb_iuv
RTL_scoreboard[3]
__STARTED__
__ENDED__
__RESETED__
__auxvar0__recorder_sn_condmet
__auxvar3__recorder
ILA_r0
RTL_registers[1]
ILA_r1
ILA_r2
ILA_r3
RTL_ex_wb_reg_wen
__auxvar1__recorder
#b1
#b1
step: start
WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst_valid
WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst
WARNING: shadowing input assignment as assigned by prev-state __ILA_I_inst
--------------------------------
| sv                  | value               
--------------------------------
| RTL_registers[0]    | reg0                
| RTL_if_id_valid     | v0                  
| RTL_scoreboard[1]   | s1                  
| RTL_scoreboard[2]   | s2                  
| RTL_id_ex_reg_wen   | w1                  
| RTL_ex_wb_valid     | v2                  
| RTL_ex_wb_reg_wen   | w2                  
| RTL_id_ex_rd        | rd1                 
| RTL_id_ex_op        | op                  
| RTL_id_ex_valid     | v1                  
| RTL_id_ex_operand1  | oper1               
| __VLG_I_inst_valid  | inst_v              
| RTL_ex_wb_rd        | rd2                 
| RTL_registers[1]    | reg1                
| RTL_id_ex_operand2  | oper2               
| RTL_registers[2]    | reg2                
| RTL_registers[3]    | reg3                
| RTL_ex_wb_val       | ex_val              
| RTL_scoreboard[0]   | s0                  
| RTL_scoreboard[3]   | s3                  
| __VLG_I_inst        | inst                
| RTL_if_id_inst      | inst_id             
A0: init
A0: (bvand (bvand (bvnot stage_tracker_if_id_iuv1) (bvand (bvnot stage_tracker_id_ex_iuv1) (bvand (bvnot __auxvar3__recorder_sn_condmet1) (bvand (bvnot __auxvar2__recorder_sn_condmet1) (bvand (bvnot __auxvar1__recorder_sn_condmet1) (bvand (bvnot stage_tracker_ex_wb_iuv1) (bvand (bvnot __auxvar0__recorder_sn_condmet1) (bvand __START__1 (bvand __RESETED__1 (bvand (bvnot __ENDED__1) (bvand (bvnot __STARTED__1) (bvand (bvnot stage_tracker_wb_iuv1) (bvand (bvnot __2ndENDED__1) (ite (= #b00000000 __CYCLE_CNT__1) #b1 #b0)))))))))))))) (ite (= #b00000000 ILA___COUNTER_start__n31) #b1 #b0))
A1: ts.asmpt @0
A1: (let (($e1 (bvand w1 v1))) (let (($e2 (bvand w2 v2))) (let (($e3 (bvand (bvnot __START__1) (bvnot __STARTED__1)))) (let (($e4 (bvand stage_tracker_ex_wb_iuv1 (bvand v2 (bvnot __VLG_I_stallwbX1))))) (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvnot (bvand __START__1 (bvnot (bvand inst_v (bvnot (bvand v0 (bvand v1 (bvnot (bvand (bvnot __VLG_I_stallexX1) (bvnot (bvand v2 __VLG_I_stallwbX1))))))))))) (bvnot (bvand __START__1 (bvnot (ite (= ila_inst inst) #b1 #b0))))) (ite (= ((_ extract 1 1) s0) (bvand $e1 (ite (= #b00 rd1) #b1 #b0))) #b1 #b0)) (ite (= ((_ extract 0 0) s0) (bvand $e2 (ite (= #b00 rd2) #b1 #b0))) #b1 #b0)) (ite (= ((_ extract 1 1) s1) (bvand $e1 (ite (= #b01 rd1) #b1 #b0))) #b1 #b0)) (ite (= ((_ extract 0 0) s1) (bvand $e2 (ite (= #b01 rd2) #b1 #b0))) #b1 #b0)) (ite (= ((_ extract 1 1) s2) (bvand $e1 (ite (= #b10 rd1) #b1 #b0))) #b1 #b0)) (ite (= ((_ extract 0 0) s2) (bvand $e2 (ite (= #b10 rd2) #b1 #b0))) #b1 #b0)) (ite (= ((_ extract 1 1) s3) (bvand $e1 (ite (= #b11 rd1) #b1 #b0))) #b1 #b0)) (ite (= ((_ extract 0 0) s3) (bvand $e2 (ite (= #b11 rd2) #b1 #b0))) #b1 #b0)) (bvnot (bvand __START__1 (bvnot (ite (= #b01 ((_ extract 7 6) ila_inst)) #b1 #b0))))) (bvnot (bvand __RESETED__1 dummy_resetX1))) (bvnot (bvand (bvand (bvand (bvnot __auxvar0__recorder_sn_condmet1) (bvnot $e3)) $e4) (bvnot (ite (= reg0 __auxvar0__recorder1) #b1 #b0))))) (bvnot (bvand (bvand $e4 (bvand (bvnot __auxvar1__recorder_sn_condmet1) (bvnot $e3))) (bvnot (ite (= reg1 __auxvar1__recorder1) #b1 #b0))))) (bvnot (bvand (bvand $e4 (bvand (bvnot __auxvar2__recorder_sn_condmet1) (bvnot $e3))) (bvnot (ite (= reg2 __auxvar2__recorder1) #b1 #b0))))) (bvnot (bvand (bvand $e4 (bvand (bvnot __auxvar3__recorder_sn_condmet1) (bvnot $e3))) (bvnot (ite (= reg3 __auxvar3__recorder1) #b1 #b0))))) (bvnot (bvand __START__1 (bvnot (bvand (bvnot (bvand __START__1 (bvnot (ite (= __auxvar0__recorder1 ILA_r01) #b1 #b0)))) (bvnot (bvand (bvnot __START__1) (bvnot (ite (= reg0 ILA_r01) #b1 #b0))))))))) (bvnot (bvand __START__1 (bvnot (bvand (bvnot (bvand __START__1 (bvnot (ite (= ILA_r11 __auxvar1__recorder1) #b1 #b0)))) (bvnot (bvand (bvnot __START__1) (bvnot (ite (= reg1 ILA_r11) #b1 #b0))))))))) (bvnot (bvand __START__1 (bvnot (bvand (bvnot (bvand __START__1 (bvnot (ite (= __auxvar2__recorder1 ILA_r21) #b1 #b0)))) (bvnot (bvand (bvnot __START__1) (bvnot (ite (= reg2 ILA_r21) #b1 #b0))))))))) (bvnot (bvand __START__1 (bvnot (bvand (bvnot (bvand __START__1 (bvnot (ite (= __auxvar3__recorder1 ILA_r31) #b1 #b0)))) (bvnot (bvand (bvnot __START__1) (bvnot (ite (= reg3 ILA_r31) #b1 #b0)))))))))))))
step: start --> id
WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst_valid
WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst
>> [[] ptr: 0]  WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst_valid
WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst
not concrete. Retry with deeper choice.
>> [[rst == 0 ] ptr: 1]  WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst_valid
WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst
not concrete. Retry with deeper choice.
>> [[rst == 0 RTL_id_go == 0 ] ptr: 2]  WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst_valid
WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst
not concrete. Retry with deeper choice.
>> [[rst == 0 RTL_id_go == 0 RTL_ex_go == 0 ] ptr: 3]  WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst_valid
WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst
not concrete. Retry with deeper choice.
>> [[rst == 0 RTL_id_go == 0 RTL_ex_go == 0 RTL_wb_go == 0 ] ptr: 4]  WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst_valid
WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst
new state!
>> [[rst == 0 RTL_id_go == 0 RTL_ex_go == 0 RTL_wb_go == 1 ] ptr: 4]  WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst_valid
WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst
new state!
>> [[rst == 0 RTL_id_go == 0 RTL_ex_go == 1 ] ptr: 3]  WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst_valid
WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst
new state!
>> [[rst == 0 RTL_id_go == 1 ] ptr: 2]  WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst_valid
WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst
not concrete. Retry with deeper choice.
>> [[rst == 0 RTL_id_go == 1 RTL_ex_go == 0 ] ptr: 3]  WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst_valid
WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst
not concrete. Retry with deeper choice.
>> [[rst == 0 RTL_id_go == 1 RTL_ex_go == 0 RTL_wb_go == 0 ] ptr: 4]  WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst_valid
WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst
new state!
>> [[rst == 0 RTL_id_go == 1 RTL_ex_go == 0 RTL_wb_go == 1 ] ptr: 4]  WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst_valid
WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst
new state!
>> [[rst == 0 RTL_id_go == 1 RTL_ex_go == 1 ] ptr: 3]  WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst_valid
WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst
new state!
>> [[rst == 1 ] ptr: 1]  WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst_valid
WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst
not reachable.
=============================
Finish!
Get #state: 6
number of state start-id: 1-> 6
--------------------------------
| sv                  | value               
--------------------------------
| RTL_registers[2]    | reg2                
| RTL_ex_wb_rd        | rd2                 
| RTL_id_ex_rd        | rd1                 
| RTL_id_ex_reg_wen   | (bvand w1 (bvnot v0))
| RTL_id_ex_valid     | v1                  
| RTL_registers[1]    | reg1                
| RTL_if_id_inst      | inst                
| RTL_scoreboard[1]   | s1                  
| RTL_scoreboard[2]   | s2                  
| RTL_if_id_valid     | inst_v              
| RTL_scoreboard[3]   | s3                  
| RTL_id_ex_op        | op                  
| RTL_registers[3]    | reg3                
| RTL_id_ex_operand2  | oper2               
| RTL_ex_wb_val       | ex_val              
| RTL_registers[0]    | reg0                
| RTL_scoreboard[0]   | s0                  
| RTL_ex_wb_reg_wen   | w2                  
| RTL_ex_wb_valid     | v2                  
| RTL_id_ex_operand1  | oper1               
--------------------------------
| sv                  | value               
--------------------------------
| RTL_registers[2]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2)
| RTL_ex_wb_rd        | rd2                 
| RTL_id_ex_rd        | rd1                 
| RTL_id_ex_reg_wen   | w1                  
| RTL_id_ex_valid     | v1                  
| RTL_registers[1]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1)
| RTL_if_id_inst      | inst                
| RTL_scoreboard[1]   | (bvand #b10 s1)     
| RTL_scoreboard[2]   | (bvand #b10 s2)     
| RTL_if_id_valid     | inst_v              
| RTL_scoreboard[3]   | (bvand #b10 s3)     
| RTL_id_ex_op        | op                  
| RTL_registers[3]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3)
| RTL_id_ex_operand2  | oper2               
| RTL_ex_wb_val       | ex_val              
| RTL_registers[0]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0)
| RTL_scoreboard[0]   | (bvand #b10 s0)     
| RTL_ex_wb_reg_wen   | w2                  
| RTL_ex_wb_valid     | #b0                 
| RTL_id_ex_operand1  | oper1               
--------------------------------
| sv                  | value               
--------------------------------
| RTL_registers[2]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2)
| RTL_ex_wb_rd        | rd1                 
| RTL_id_ex_rd        | rd1                 
| RTL_id_ex_reg_wen   | (bvand w1 (bvnot v0))
| RTL_id_ex_valid     | v0                  
| RTL_registers[1]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1)
| RTL_if_id_inst      | inst                
| RTL_scoreboard[1]   | (concat #b0 ((_ extract 1 1) s1))
| RTL_scoreboard[2]   | (concat #b0 ((_ extract 1 1) s2))
| RTL_if_id_valid     | v1                  
| RTL_scoreboard[3]   | (concat #b0 ((_ extract 1 1) s3))
| RTL_id_ex_op        | op                  
| RTL_registers[3]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3)
| RTL_id_ex_operand2  | oper2               
| RTL_ex_wb_val       | (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000)))
| RTL_registers[0]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0)
| RTL_scoreboard[0]   | (concat #b0 ((_ extract 1 1) s0))
| RTL_ex_wb_reg_wen   | w1                  
| RTL_ex_wb_valid     | v1                  
| RTL_id_ex_operand1  | oper1               
--------------------------------
| sv                  | value               
--------------------------------
| RTL_registers[2]    | reg2                
| RTL_ex_wb_rd        | rd2                 
| RTL_id_ex_rd        | ((_ extract 1 0) inst_id)
| RTL_id_ex_reg_wen   | (let (($e1 ((_ extract 7 6) inst_id))) (not (and (not (= #b01 $e1)) (not (= #b10 $e1)) (not (= #b11 $e1)))))
| RTL_id_ex_valid     | v0                  
| RTL_registers[1]    | reg1                
| RTL_if_id_inst      | inst                
| RTL_scoreboard[1]   | (let (($e1 ((_ extract 7 6) inst_id))) (concat (bvand (bvand v0 (bvnot (ite (and (not (= #b01 $e1)) (not (= #b10 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b01 ((_ extract 1 0) inst_id)) #b1 #b0)) (ite (= #b01 s1) #b1 #b0)))
| RTL_scoreboard[2]   | (let (($e1 ((_ extract 7 6) inst_id))) (concat (bvand (bvand v0 (bvnot (ite (and (not (= #b01 $e1)) (not (= #b10 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b10 ((_ extract 1 0) inst_id)) #b1 #b0)) (ite (= #b01 s2) #b1 #b0)))
| RTL_if_id_valid     | v0                  
| RTL_scoreboard[3]   | (let (($e1 ((_ extract 7 6) inst_id))) (concat (bvand (bvand v0 (bvnot (ite (and (not (= #b01 $e1)) (not (= #b10 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b11 ((_ extract 1 0) inst_id)) #b1 #b0)) (ite (= #b01 s3) #b1 #b0)))
| RTL_id_ex_op        | ((_ extract 7 6) inst_id)
| RTL_registers[3]    | reg3                
| RTL_id_ex_operand2  | (let (($e1 ((_ extract 3 2) inst_id))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000)))))))))))
| RTL_ex_wb_val       | ex_val              
| RTL_registers[0]    | reg0                
| RTL_scoreboard[0]   | (let (($e1 ((_ extract 7 6) inst_id))) (concat (bvand (bvand v0 (bvnot (ite (and (not (= #b01 $e1)) (not (= #b10 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b00 ((_ extract 1 0) inst_id)) #b1 #b0)) (ite (= #b01 s0) #b1 #b0)))
| RTL_ex_wb_reg_wen   | w2                  
| RTL_ex_wb_valid     | v2                  
| RTL_id_ex_operand1  | (let (($e1 ((_ extract 5 4) inst_id))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (ite (= #b10 ((_ extract 7 6) inst_id)) (concat #b0000 ((_ extract 5 2) inst_id)) (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))))))))))
--------------------------------
| sv                  | value               
--------------------------------
| RTL_registers[2]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2)
| RTL_ex_wb_rd        | rd2                 
| RTL_id_ex_rd        | ((_ extract 1 0) inst_id)
| RTL_id_ex_reg_wen   | (let (($e1 ((_ extract 7 6) inst_id))) (not (and (not (= #b01 $e1)) (not (= #b10 $e1)) (not (= #b11 $e1)))))
| RTL_id_ex_valid     | v0                  
| RTL_registers[1]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1)
| RTL_if_id_inst      | inst                
| RTL_scoreboard[1]   | (let (($e1 ((_ extract 7 6) inst_id))) (concat (bvand (bvand v0 (bvnot (ite (and (not (= #b01 $e1)) (not (= #b10 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b01 ((_ extract 1 0) inst_id)) #b1 #b0)) v1))
| RTL_scoreboard[2]   | (let (($e1 ((_ extract 7 6) inst_id))) (concat (bvand (bvand v0 (bvnot (ite (and (not (= #b01 $e1)) (not (= #b10 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b10 ((_ extract 1 0) inst_id)) #b1 #b0)) v1))
| RTL_if_id_valid     | v0                  
| RTL_scoreboard[3]   | (let (($e1 ((_ extract 7 6) inst_id))) (concat (bvand (bvand v0 (bvnot (ite (and (not (= #b01 $e1)) (not (= #b10 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b11 ((_ extract 1 0) inst_id)) #b1 #b0)) v1))
| RTL_id_ex_op        | ((_ extract 7 6) inst_id)
| RTL_registers[3]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3)
| RTL_id_ex_operand2  | (let (($e1 ((_ extract 3 2) inst_id))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000)))))))))))
| RTL_ex_wb_val       | ex_val              
| RTL_registers[0]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0)
| RTL_scoreboard[0]   | (let (($e1 ((_ extract 7 6) inst_id))) (concat (bvand (bvand v0 (bvnot (ite (and (not (= #b01 $e1)) (not (= #b10 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b00 ((_ extract 1 0) inst_id)) #b1 #b0)) v1))
| RTL_ex_wb_reg_wen   | w2                  
| RTL_ex_wb_valid     | v1                  
| RTL_id_ex_operand1  | (let (($e1 ((_ extract 5 4) inst_id))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (ite (= #b10 ((_ extract 7 6) inst_id)) (concat #b0000 ((_ extract 5 2) inst_id)) (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))))))))))
--------------------------------
| sv                  | value               
--------------------------------
| RTL_registers[2]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2)
| RTL_ex_wb_rd        | rd1                 
| RTL_id_ex_rd        | ((_ extract 1 0) inst_id)
| RTL_id_ex_reg_wen   | (let (($e1 ((_ extract 7 6) inst_id))) (not (and (not (= #b01 $e1)) (not (= #b10 $e1)) (not (= #b11 $e1)))))
| RTL_id_ex_valid     | v1                  
| RTL_registers[1]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1)
| RTL_if_id_inst      | inst                
| RTL_scoreboard[1]   | (let (($e1 ((_ extract 7 6) inst_id))) (concat (bvand (bvand v0 (bvnot (ite (and (not (= #b01 $e1)) (not (= #b10 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b01 ((_ extract 1 0) inst_id)) #b1 #b0)) (ite (bvult #b01 s1) #b1 #b0)))
| RTL_scoreboard[2]   | (let (($e1 ((_ extract 7 6) inst_id))) (concat (bvand (bvand v0 (bvnot (ite (and (not (= #b01 $e1)) (not (= #b10 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b10 ((_ extract 1 0) inst_id)) #b1 #b0)) (ite (bvult #b01 s2) #b1 #b0)))
| RTL_if_id_valid     | v1                  
| RTL_scoreboard[3]   | (let (($e1 ((_ extract 7 6) inst_id))) (concat (bvand (bvand v0 (bvnot (ite (and (not (= #b01 $e1)) (not (= #b10 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b11 ((_ extract 1 0) inst_id)) #b1 #b0)) (ite (bvult #b01 s3) #b1 #b0)))
| RTL_id_ex_op        | ((_ extract 7 6) inst_id)
| RTL_registers[3]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3)
| RTL_id_ex_operand2  | (let (($e1 ((_ extract 3 2) inst_id))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000)))))))))))
| RTL_ex_wb_val       | (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000)))
| RTL_registers[0]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0)
| RTL_scoreboard[0]   | (let (($e1 ((_ extract 7 6) inst_id))) (concat (bvand (bvand v0 (bvnot (ite (and (not (= #b01 $e1)) (not (= #b10 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b00 ((_ extract 1 0) inst_id)) #b1 #b0)) (ite (bvult #b01 s0) #b1 #b0)))
| RTL_ex_wb_reg_wen   | w1                  
| RTL_ex_wb_valid     | v1                  
| RTL_id_ex_operand1  | (let (($e1 ((_ extract 5 4) inst_id))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (ite (= #b10 ((_ extract 7 6) inst_id)) (concat #b0000 ((_ extract 5 2) inst_id)) (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))))))))))
number of state start-id in total: 1 --> 6
step: id --> id
ret_term2:(bvnot (bvand RTL_if_id_valid (bvnot (bvand RTL_id_ex_valid (bvnot (bvand (bvnot __VLG_I_stallex) (bvnot (bvand __VLG_I_stallwb RTL_ex_wb_valid))))))))
init stack per state: [] ptr: 0
init tracelen: 1
Trace: 1 Stack: 1
>> [[] ptr: 0  ] : not concrete. Retry with deeper choice.
Trace: 1 Stack: 1
>> [[rst == 0 ] ptr: 1  ] : not concrete. Retry with deeper choice.
Trace: 1 Stack: 1
>> [[rst == 0 RTL_id_go == 0 ] ptr: 2  ] : not concrete. Retry with deeper choice.
Trace: 1 Stack: 1
>> [[rst == 0 RTL_id_go == 0 RTL_ex_go == 0 ] ptr: 3  ] : not concrete. Retry with deeper choice.
Trace: 1 Stack: 1
>> [[rst == 0 RTL_id_go == 0 RTL_ex_go == 0 RTL_wb_go == 0 ] ptr: 4  ] :  not new state. Go back. Try next.
Trace: 1 Stack: 1
>> [[rst == 0 RTL_id_go == 0 RTL_ex_go == 0 RTL_wb_go == 1 ] ptr: 4  ] : A new state!
Trace: 2 Stack: 2
>> [[rst == 0 RTL_id_go == 0 RTL_ex_go == 0 RTL_wb_go == 1 ] ptr: 4 [] ptr: 0  ] :  not new state. Go back. Try next.
Trace: 2 Stack: 2
>> [[rst == 0 RTL_id_go == 0 RTL_ex_go == 0 RTL_wb_go == 1 ] ptr: 4 [] ptr: 0 (END)  ] :  no new choices, back to prev state
Trace: 1 Stack: 1
>> [[rst == 0 RTL_id_go == 0 RTL_ex_go == 0 RTL_wb_go == 1 ] ptr: 4  ] :  not new state. Go back. Try next.
Trace: 1 Stack: 1
>> [[rst == 0 RTL_id_go == 0 RTL_ex_go == 1 ] ptr: 3  ] :  not reachable.
Trace: 1 Stack: 1
>> [[rst == 0 RTL_id_go == 1 ] ptr: 2  ] :  not reachable.
Trace: 1 Stack: 1
>> [[rst == 1 ] ptr: 1  ] :  not reachable.
Trace: 1 Stack: 1
>> [[] ptr: 0 (END)  ] :  no new choices, back to prev state
=============================
Finish!
Get #state: 2
number of state id-id: 1-> 2
--------------------------------
| sv                  | value               
--------------------------------
| RTL_scoreboard[3]   | s3                  
| RTL_id_ex_operand2  | oper2               
| RTL_ex_wb_val       | ex_val              
| RTL_registers[0]    | reg0                
| RTL_ex_wb_reg_wen   | w2                  
| RTL_ex_wb_valid     | v2                  
| RTL_scoreboard[0]   | s0                  
| RTL_id_ex_operand1  | oper1               
| RTL_ex_wb_rd        | rd2                 
| RTL_registers[3]    | reg3                
| RTL_id_ex_op        | op                  
| RTL_id_ex_rd        | rd1                 
| RTL_if_id_inst      | inst                
| RTL_registers[1]    | reg1                
| RTL_scoreboard[2]   | s2                  
| RTL_if_id_valid     | inst_v              
| RTL_scoreboard[1]   | s1                  
| RTL_id_ex_reg_wen   | (bvand w1 (bvnot v0))
| RTL_id_ex_valid     | v1                  
| RTL_registers[2]    | reg2                
--------------------------------
| sv                  | value               
--------------------------------
| RTL_registers[2]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2)
| RTL_ex_wb_rd        | rd2                 
| RTL_id_ex_rd        | rd1                 
| RTL_id_ex_reg_wen   | (let (($e1 ((_ extract 7 6) inst))) (let (($e2 (bvand (bvnot v1) inst_v))) (bvand (bvnot (bvand (ite (and (not (= #b01 $e1)) (not (= #b10 $e1)) (not (= #b11 $e1))) #b1 #b0) $e2)) (bvnot (bvand (bvnot (bvand w1 (bvnot v0))) (bvnot $e2))))))
| RTL_id_ex_valid     | (bvnot (bvand (bvnot v1) (bvnot inst_v)))
| RTL_registers[1]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1)
| RTL_if_id_inst      | inst                
| RTL_scoreboard[1]   | (let (($e1 ((_ extract 7 6) inst))) (let (($e2 (bvand (bvnot v1) inst_v))) (let (($e3 (bvand (bvnot (bvand (bvnot (bvand (bvand inst_v (bvnot (ite (and (not (= #b01 $e1)) (not (= #b10 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b01 ((_ extract 1 0) inst)) #b1 #b0))) $e2)) (bvnot (bvand (bvnot ((_ extract 1 1) s1)) (bvnot $e2)))))) (bvand (concat $e3 (bvnot v2)) (concat $e3 ((_ extract 0 0) s1))))))
| RTL_scoreboard[2]   | (let (($e1 ((_ extract 7 6) inst))) (let (($e2 (bvand (bvnot v1) inst_v))) (let (($e3 (bvand (bvnot (bvand (bvnot (bvand (bvand inst_v (bvnot (ite (and (not (= #b01 $e1)) (not (= #b10 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b10 ((_ extract 1 0) inst)) #b1 #b0))) $e2)) (bvnot (bvand (bvnot ((_ extract 1 1) s2)) (bvnot $e2)))))) (bvand (concat $e3 (bvnot v2)) (concat $e3 ((_ extract 0 0) s2))))))
| RTL_if_id_valid     | inst_v              
| RTL_scoreboard[3]   | (let (($e1 ((_ extract 7 6) inst))) (let (($e2 (bvand (bvnot v1) inst_v))) (let (($e3 (bvand (bvnot (bvand (bvnot (bvand (bvand inst_v (bvnot (ite (and (not (= #b01 $e1)) (not (= #b10 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b11 ((_ extract 1 0) inst)) #b1 #b0))) $e2)) (bvnot (bvand (bvnot ((_ extract 1 1) s3)) (bvnot $e2)))))) (bvand (concat $e3 (bvnot v2)) (concat $e3 ((_ extract 0 0) s3))))))
| RTL_id_ex_op        | op                  
| RTL_registers[3]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3)
| RTL_id_ex_operand2  | oper2               
| RTL_ex_wb_val       | ex_val              
| RTL_registers[0]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0)
| RTL_scoreboard[0]   | (let (($e1 ((_ extract 7 6) inst))) (let (($e2 (bvand (bvnot v1) inst_v))) (let (($e3 (bvand (bvnot (bvand (bvnot (bvand (bvand inst_v (bvnot (ite (and (not (= #b01 $e1)) (not (= #b10 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b00 ((_ extract 1 0) inst)) #b1 #b0))) $e2)) (bvnot (bvand (bvnot ((_ extract 1 1) s0)) (bvnot $e2)))))) (bvand (concat $e3 (bvnot v2)) (concat $e3 ((_ extract 0 0) s0))))))
| RTL_ex_wb_reg_wen   | w2                  
| RTL_ex_wb_valid     | #b0                 
| RTL_id_ex_operand1  | oper1               
init stack per state: [] ptr: 0
init tracelen: 1
Trace: 1 Stack: 1
>> [[] ptr: 0  ] :  not new state. Go back. Try next.
Trace: 1 Stack: 1
>> [[] ptr: 0 (END)  ] :  no new choices, back to prev state
=============================
Finish!
Get #state: 1
number of state id-id: 1-> 1
--------------------------------
| sv                  | value               
--------------------------------
| RTL_scoreboard[3]   | (bvand #b10 s3)     
| RTL_id_ex_operand2  | oper2               
| RTL_ex_wb_val       | ex_val              
| RTL_registers[0]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0)
| RTL_ex_wb_reg_wen   | w2                  
| RTL_ex_wb_valid     | #b0                 
| RTL_scoreboard[0]   | (bvand #b10 s0)     
| RTL_id_ex_operand1  | oper1               
| RTL_ex_wb_rd        | rd2                 
| RTL_registers[3]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3)
| RTL_id_ex_op        | op                  
| RTL_id_ex_rd        | rd1                 
| RTL_if_id_inst      | inst                
| RTL_registers[1]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1)
| RTL_scoreboard[2]   | (bvand #b10 s2)     
| RTL_if_id_valid     | inst_v              
| RTL_scoreboard[1]   | (bvand #b10 s1)     
| RTL_id_ex_reg_wen   | w1                  
| RTL_id_ex_valid     | v1                  
| RTL_registers[2]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2)
not reachable! skip!
==============================
Finished!
Get #state: 1
--------------------------------
| sv                  | value               
--------------------------------
| RTL_registers[2]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2)
| RTL_ex_wb_rd        | rd1                 
| RTL_id_ex_rd        | rd1                 
| RTL_id_ex_reg_wen   | (bvand w1 (bvnot v0))
| RTL_id_ex_valid     | v0                  
| RTL_registers[1]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1)
| RTL_if_id_inst      | inst                
| RTL_scoreboard[1]   | (concat #b0 ((_ extract 1 1) s1))
| RTL_scoreboard[2]   | (concat #b0 ((_ extract 1 1) s2))
| RTL_if_id_valid     | v1                  
| RTL_scoreboard[3]   | (concat #b0 ((_ extract 1 1) s3))
| RTL_id_ex_op        | op                  
| RTL_registers[3]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3)
| RTL_id_ex_operand2  | oper2               
| RTL_ex_wb_val       | (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000)))
| RTL_registers[0]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0)
| RTL_scoreboard[0]   | (concat #b0 ((_ extract 1 1) s0))
| RTL_ex_wb_reg_wen   | w1                  
| RTL_ex_wb_valid     | v1                  
| RTL_id_ex_operand1  | oper1               
A0: init
A0: (bvand (bvand (bvnot stage_tracker_if_id_iuv1) (bvand (bvnot stage_tracker_id_ex_iuv1) (bvand (bvnot __auxvar3__recorder_sn_condmet1) (bvand (bvnot __auxvar2__recorder_sn_condmet1) (bvand (bvnot __auxvar1__recorder_sn_condmet1) (bvand (bvnot stage_tracker_ex_wb_iuv1) (bvand (bvnot __auxvar0__recorder_sn_condmet1) (bvand __START__1 (bvand __RESETED__1 (bvand (bvnot __ENDED__1) (bvand (bvnot __STARTED__1) (bvand (bvnot stage_tracker_wb_iuv1) (bvand (bvnot __2ndENDED__1) (ite (= #b00000000 __CYCLE_CNT__1) #b1 #b0)))))))))))))) (ite (= #b00000000 ILA___COUNTER_start__n31) #b1 #b0))
A1: ts.asmpt @0
A1: (let (($e1 (bvand w1 v1))) (let (($e2 (bvand w2 v2))) (let (($e3 (bvand (bvnot __START__1) (bvnot __STARTED__1)))) (let (($e4 (bvand stage_tracker_ex_wb_iuv1 (bvand v2 (bvnot __VLG_I_stallwbX1))))) (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvnot (bvand __START__1 (bvnot (bvand inst_v (bvnot (bvand v0 (bvand v1 (bvnot (bvand (bvnot __VLG_I_stallexX1) (bvnot (bvand v2 __VLG_I_stallwbX1))))))))))) (bvnot (bvand __START__1 (bvnot (ite (= ila_inst inst) #b1 #b0))))) (ite (= ((_ extract 1 1) s0) (bvand $e1 (ite (= #b00 rd1) #b1 #b0))) #b1 #b0)) (ite (= ((_ extract 0 0) s0) (bvand $e2 (ite (= #b00 rd2) #b1 #b0))) #b1 #b0)) (ite (= ((_ extract 1 1) s1) (bvand $e1 (ite (= #b01 rd1) #b1 #b0))) #b1 #b0)) (ite (= ((_ extract 0 0) s1) (bvand $e2 (ite (= #b01 rd2) #b1 #b0))) #b1 #b0)) (ite (= ((_ extract 1 1) s2) (bvand $e1 (ite (= #b10 rd1) #b1 #b0))) #b1 #b0)) (ite (= ((_ extract 0 0) s2) (bvand $e2 (ite (= #b10 rd2) #b1 #b0))) #b1 #b0)) (ite (= ((_ extract 1 1) s3) (bvand $e1 (ite (= #b11 rd1) #b1 #b0))) #b1 #b0)) (ite (= ((_ extract 0 0) s3) (bvand $e2 (ite (= #b11 rd2) #b1 #b0))) #b1 #b0)) (bvnot (bvand __START__1 (bvnot (ite (= #b01 ((_ extract 7 6) ila_inst)) #b1 #b0))))) (bvnot (bvand __RESETED__1 dummy_resetX1))) (bvnot (bvand (bvand (bvand (bvnot __auxvar0__recorder_sn_condmet1) (bvnot $e3)) $e4) (bvnot (ite (= reg0 __auxvar0__recorder1) #b1 #b0))))) (bvnot (bvand (bvand $e4 (bvand (bvnot __auxvar1__recorder_sn_condmet1) (bvnot $e3))) (bvnot (ite (= reg1 __auxvar1__recorder1) #b1 #b0))))) (bvnot (bvand (bvand $e4 (bvand (bvnot __auxvar2__recorder_sn_condmet1) (bvnot $e3))) (bvnot (ite (= reg2 __auxvar2__recorder1) #b1 #b0))))) (bvnot (bvand (bvand $e4 (bvand (bvnot __auxvar3__recorder_sn_condmet1) (bvnot $e3))) (bvnot (ite (= reg3 __auxvar3__recorder1) #b1 #b0))))) (bvnot (bvand __START__1 (bvnot (bvand (bvnot (bvand __START__1 (bvnot (ite (= __auxvar0__recorder1 ILA_r01) #b1 #b0)))) (bvnot (bvand (bvnot __START__1) (bvnot (ite (= reg0 ILA_r01) #b1 #b0))))))))) (bvnot (bvand __START__1 (bvnot (bvand (bvnot (bvand __START__1 (bvnot (ite (= ILA_r11 __auxvar1__recorder1) #b1 #b0)))) (bvnot (bvand (bvnot __START__1) (bvnot (ite (= reg1 ILA_r11) #b1 #b0))))))))) (bvnot (bvand __START__1 (bvnot (bvand (bvnot (bvand __START__1 (bvnot (ite (= __auxvar2__recorder1 ILA_r21) #b1 #b0)))) (bvnot (bvand (bvnot __START__1) (bvnot (ite (= reg2 ILA_r21) #b1 #b0))))))))) (bvnot (bvand __START__1 (bvnot (bvand (bvnot (bvand __START__1 (bvnot (ite (= __auxvar3__recorder1 ILA_r31) #b1 #b0)))) (bvnot (bvand (bvnot __START__1) (bvnot (ite (= reg3 ILA_r31) #b1 #b0)))))))))))))
A2: ts.asmpt @0
A2: (let (($e1 (bvand w1 v1))) (let (($e2 (bvand w2 v2))) (bvand (ite (= ILA_r3 __auxvar3__recorder) #b1 #b0) (bvand (ite (= ILA_r2 __auxvar2__recorder) #b1 #b0) (bvand (ite (= ILA_r1 __auxvar1__recorder) #b1 #b0) (bvand (ite (= ILA_r0 __auxvar0__recorder) #b1 #b0) (bvand (bvand (bvand (ite (= ((_ extract 0 0) s3) (bvand $e2 (ite (= #b11 rd2) #b1 #b0))) #b1 #b0) (bvand (ite (= ((_ extract 1 1) s3) (bvand $e1 (ite (= #b11 rd1) #b1 #b0))) #b1 #b0) (bvand (ite (= ((_ extract 0 0) s2) (bvand $e2 (ite (= #b10 rd2) #b1 #b0))) #b1 #b0) (bvand (ite (= ((_ extract 1 1) s2) (bvand $e1 (ite (= #b10 rd1) #b1 #b0))) #b1 #b0) (bvand (ite (= ((_ extract 0 0) s1) (bvand $e2 (ite (= #b01 rd2) #b1 #b0))) #b1 #b0) (bvand (ite (= ((_ extract 1 1) s1) (bvand $e1 (ite (= #b01 rd1) #b1 #b0))) #b1 #b0) (bvand (ite (= ((_ extract 0 0) s0) (bvand $e2 (ite (= #b00 rd2) #b1 #b0))) #b1 #b0) (bvand (ite (= ((_ extract 1 1) s0) (bvand $e1 (ite (= #b00 rd1) #b1 #b0))) #b1 #b0) (bvand (bvand inst_v (bvnot (bvand v0 (bvand v1 (bvnot (bvand (bvnot __VLG_I_stallexX15) (bvnot (bvand v2 __VLG_I_stallwbX15)))))))) (ite (= inst __ILA_I_instX15) #b1 #b0)))))))))) (ite (= #b01 ((_ extract 7 6) __ILA_I_instX15)) #b1 #b0)) (bvnot (bvand __RESETED__ dummy_resetX15)))))))))
A3: (bvnot (bvand v0 (bvnot (bvand v1 (bvnot (bvand (bvnot __VLG_I_stallexX15) (bvnot (bvand v2 __VLG_I_stallwbX15))))))))@0
A3: (bvnot (bvand v0 (bvnot (bvand v1 (bvnot (bvand (bvnot __VLG_I_stallexX15) (bvnot (bvand v2 __VLG_I_stallwbX15))))))))
A4: (bvand v1 (bvand (bvnot __VLG_I_stallexX15) (bvnot (bvand v2 __VLG_I_stallwbX15))))@0
A4: (bvand v1 (bvand (bvnot __VLG_I_stallexX15) (bvnot (bvand v2 __VLG_I_stallwbX15))))
A5: (bvnot dummy_resetX15)@0
A5: (bvnot dummy_resetX15)
A6: ts.asmpt @1
A6: (let (($e1 (bvand w1 v1))) (let (($e2 ((_ extract 7 6) inst_id))) (let (($e3 (and (not (= #b01 $e2)) (not (= #b10 $e2)) (not (= #b11 $e2))))) (let (($e4 (bvand v0 (bvnot (ite $e3 #b1 #b0))))) (let (($e5 ((_ extract 1 0) inst_id))) (let (($e6 (bvand v2 __VLG_I_stallwbX15))) (let (($e7 (bvand (bvnot __VLG_I_stallexX15) (bvnot $e6)))) (let (($e8 (bvand v1 (bvnot $e7)))) (let (($e9 (bvand v0 (bvnot $e8)))) (let (($e10 (bvand v1 $e7))) (let (($e11 (bvand v2 (bvnot __VLG_I_stallwbX15)))) (let (($e12 (ite (= #b1 (bvand (bvnot dummy_resetX15) $e9)) $e5 rd1))) (let (($e13 (ite (= #b1 (bvand (bvnot dummy_resetX15) $e10)) rd1 rd2))) (let (($e14 (bvand (bvand (bvnot (bvand (ite $e3 #b1 #b0) $e9)) (bvnot (bvand (bvnot w1) (bvnot $e9)))) (bvand (bvnot dummy_resetX15) (bvnot (bvand (bvnot v0) (bvnot $e8))))))) (let (($e15 (bvand (bvand (bvnot dummy_resetX15) (bvnot (bvand (bvnot $e6) (bvnot $e10)))) (bvand (bvnot (bvand (bvnot w1) $e10)) (bvnot (bvand (bvnot w2) (bvnot $e10))))))) (bvand (ite (and (= (bvand (bvnot dummy_resetX15) (bvand (bvnot (bvand (bvnot (bvand $e1 (ite (= #b00 rd1) #b1 #b0))) $e10)) (bvnot (bvand (bvnot $e10) (bvnot (bvand ((_ extract 0 0) s0) (bvnot $e11))))))) (bvand $e15 (ite (= #b00 $e13) #b1 #b0))) (= (bvand (bvnot dummy_resetX15) (bvand (bvnot (bvand (bvnot (bvand $e4 (ite (= #b00 $e5) #b1 #b0))) $e9)) (bvnot (bvand (bvnot $e9) (bvnot (bvand ((_ extract 1 1) s0) (bvnot $e10))))))) (bvand $e14 (ite (= #b00 $e12) #b1 #b0))) (= (bvand (bvnot dummy_resetX15) (bvand (bvnot (bvand (bvnot (bvand $e4 (ite (= #b01 $e5) #b1 #b0))) $e9)) (bvnot (bvand (bvnot $e9) (bvnot (bvand ((_ extract 1 1) s1) (bvnot $e10))))))) (bvand $e14 (ite (= #b01 $e12) #b1 #b0))) (= (bvand (bvnot dummy_resetX15) (bvand (bvnot (bvand (bvnot (bvand $e1 (ite (= #b01 rd1) #b1 #b0))) $e10)) (bvnot (bvand (bvnot $e10) (bvnot (bvand ((_ extract 0 0) s1) (bvnot $e11))))))) (bvand $e15 (ite (= #b01 $e13) #b1 #b0))) (= (bvand (bvnot dummy_resetX15) (bvand (bvnot (bvand (bvnot (bvand $e4 (ite (= #b10 $e5) #b1 #b0))) $e9)) (bvnot (bvand (bvnot $e9) (bvnot (bvand ((_ extract 1 1) s2) (bvnot $e10))))))) (bvand $e14 (ite (= #b10 $e12) #b1 #b0))) (= (bvand (bvnot dummy_resetX15) (bvand (bvnot (bvand (bvnot (bvand $e1 (ite (= #b10 rd1) #b1 #b0))) $e10)) (bvnot (bvand (bvnot $e10) (bvnot (bvand ((_ extract 0 0) s2) (bvnot $e11))))))) (bvand $e15 (ite (= #b10 $e13) #b1 #b0))) (= (bvand (bvnot dummy_resetX15) (bvand (bvnot (bvand (bvnot (bvand $e4 (ite (= #b11 $e5) #b1 #b0))) $e9)) (bvnot (bvand (bvnot $e9) (bvnot (bvand ((_ extract 1 1) s3) (bvnot $e10))))))) (bvand $e14 (ite (= #b11 $e12) #b1 #b0))) (= (bvand (bvnot dummy_resetX15) (bvand (bvnot (bvand (bvnot (bvand $e1 (ite (= #b11 rd1) #b1 #b0))) $e10)) (bvnot (bvand (bvnot $e10) (bvnot (bvand ((_ extract 0 0) s3) (bvnot $e11))))))) (bvand $e15 (ite (= #b11 $e13) #b1 #b0)))) #b1 #b0) (bvnot (bvand __RESETED__ dummy_resetX16))))))))))))))))))
