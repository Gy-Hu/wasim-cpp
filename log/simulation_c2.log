GET INVAR: ILA_r3_randinit
GET INVAR: ILA_r2_randinit
GET INVAR: ILA_r1_randinit
GET INVAR: ILA_r0_randinit
GET INVAR: __ILA_I_inst
GET INVAR: __VLG_I_dummy_read_rf
GET INVAR: __VLG_I_inst
GET INVAR: __VLG_I_inst_valid
GET INVAR: __VLG_I_stallex
GET INVAR: __VLG_I_stallwb
GET INVAR: ____auxvar0__recorder_init__
GET INVAR: ____auxvar1__recorder_init__
GET INVAR: ____auxvar2__recorder_init__
GET INVAR: ____auxvar3__recorder_init__
GET INVAR: clk
GET INVAR: dummy_reset
GET INVAR: rst
GET SV: RTL_id_ex_valid
GET SV: RTL_ex_wb_valid
GET SV: RTL_ex_wb_rd
GET SV: RTL_ex_wb_reg_wen
GET SV: RTL_id_ex_rd
GET SV: RTL_id_ex_reg_wen
GET SV: RTL_registers[0]
GET SV: RTL_registers[1]
GET SV: RTL_registers[2]
GET SV: RTL_registers[3]
GET SV: RTL_scoreboard[0]
GET SV: RTL_scoreboard[1]
GET SV: RTL_scoreboard[2]
GET SV: RTL_scoreboard[3]
GET SV: ILA_r0
GET SV: ILA_r1
GET SV: ILA_r2
GET SV: ILA_r3
GET SV: ILA___COUNTER_start__n3
GET SV: RTL_ex_wb_val
GET SV: RTL_id_ex_operand1
GET SV: RTL_id_ex_operand2
GET SV: RTL_id_ex_op
input100
clk
____auxvar3__recorder_init__
ILA_r3_randinit
rst
ILA_r1_randinit
dummy_reset
ILA_r0_randinit
__VLG_I_inst
__VLG_I_stallex
__ILA_I_inst
__VLG_I_stallwb
ILA_r2_randinit
__VLG_I_dummy_read_rf
__VLG_I_inst_valid
____auxvar0__recorder_init__
____auxvar1__recorder_init__
____auxvar2__recorder_init__


 state var: 

RTL_id_ex_operand2
ILA___COUNTER_start__n3
ppl_stage_ex
__auxvar3__recorder_sn_vhold
RTL_id_ex_op
__auxvar0__recorder_sn_vhold
__auxvar1__recorder_sn_vhold
__auxvar2__recorder_sn_condmet
__auxvar3__recorder_sn_condmet
__auxvar1__recorder_sn_condmet
ppl_stage_wb
RTL_scoreboard[3]
ILA_r0
RTL_ex_wb_val
RTL_scoreboard[0]
__START__
RTL_ex_wb_reg_wen
__STARTED__
RTL_scoreboard[1]
RTL_registers[0]
RTL_ex_wb_valid
__auxvar0__recorder
RTL_id_ex_rd
RTL_ex_wb_rd
RTL_registers[1]
__auxvar0__recorder_sn_condmet
__ENDED__
__auxvar2__recorder_sn_vhold
RTL_id_ex_reg_wen
RTL_registers[2]
__auxvar1__recorder
__auxvar2__recorder
RTL_scoreboard[2]
__2ndENDED__
__CYCLE_CNT__
ppl_stage_finish
RTL_registers[3]
ILA_r1
__RESETED__
RTL_id_ex_operand1
ILA_r2
RTL_id_ex_valid
ILA_r3
__auxvar3__recorder
#b1
#b1
step: start
WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst
WARNING: shadowing input assignment as assigned by prev-state __ILA_I_inst
WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst_valid
--------------------------------
| sv                  | value               
--------------------------------
| RTL_registers[0]    | reg0                
| RTL_registers[2]    | reg2                
| RTL_id_ex_reg_wen   | w1                  
| RTL_ex_wb_val       | ex_val              
| RTL_scoreboard[0]   | s0                  
| RTL_id_ex_rd        | rd1                 
| RTL_registers[1]    | reg1                
| __VLG_I_inst        | inst                
| RTL_ex_wb_valid     | v2                  
| RTL_ex_wb_reg_wen   | w2                  
| RTL_registers[3]    | reg3                
| RTL_id_ex_valid     | v1                  
| RTL_id_ex_operand2  | oper2               
| RTL_id_ex_operand1  | oper1               
| RTL_ex_wb_rd        | rd2                 
| __VLG_I_inst_valid  | inst_v              
| RTL_scoreboard[1]   | s1                  
| RTL_scoreboard[2]   | s2                  
| RTL_scoreboard[3]   | s3                  
| RTL_id_ex_op        | op                  
A0: init
A0: (bvand (bvand (bvnot ppl_stage_ex1) (bvand (bvnot __auxvar3__recorder_sn_condmet1) (bvand (bvnot __auxvar2__recorder_sn_condmet1) (bvand (bvnot __auxvar1__recorder_sn_condmet1) (bvand (bvnot ppl_stage_wb1) (bvand (bvnot __auxvar0__recorder_sn_condmet1) (bvand __START__1 (bvand __RESETED__1 (bvand (bvnot __ENDED__1) (bvand (bvnot __STARTED__1) (bvand (bvnot ppl_stage_finish1) (bvand (bvnot __2ndENDED__1) (ite (= #b00000000 __CYCLE_CNT__1) #b1 #b0))))))))))))) (ite (= #b00000000 ILA___COUNTER_start__n31) #b1 #b0))
A1: ts.asmpt @0
A1: (let (($e1 (bvand w1 v1))) (let (($e2 (bvand w2 v2))) (let (($e3 (bvand (bvnot __START__1) (bvnot __STARTED__1)))) (let (($e4 (bvand ppl_stage_wb1 (bvand v2 (bvnot __VLG_I_stallwbX1))))) (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvnot (bvand __START__1 (bvnot (bvand inst_v (bvnot (bvand v1 (bvnot (bvand (bvnot __VLG_I_stallexX1) (bvnot (bvand v2 __VLG_I_stallwbX1)))))))))) (bvnot (bvand __START__1 (bvnot (ite (= ila_inst inst) #b1 #b0))))) (ite (= ((_ extract 1 1) s0) (bvand $e1 (ite (= #b00 rd1) #b1 #b0))) #b1 #b0)) (ite (= ((_ extract 0 0) s0) (bvand $e2 (ite (= #b00 rd2) #b1 #b0))) #b1 #b0)) (ite (= ((_ extract 1 1) s1) (bvand $e1 (ite (= #b01 rd1) #b1 #b0))) #b1 #b0)) (ite (= ((_ extract 0 0) s1) (bvand $e2 (ite (= #b01 rd2) #b1 #b0))) #b1 #b0)) (ite (= ((_ extract 1 1) s2) (bvand $e1 (ite (= #b10 rd1) #b1 #b0))) #b1 #b0)) (ite (= ((_ extract 0 0) s2) (bvand $e2 (ite (= #b10 rd2) #b1 #b0))) #b1 #b0)) (ite (= ((_ extract 1 1) s3) (bvand $e1 (ite (= #b11 rd1) #b1 #b0))) #b1 #b0)) (ite (= ((_ extract 0 0) s3) (bvand $e2 (ite (= #b11 rd2) #b1 #b0))) #b1 #b0)) (bvnot (bvand __START__1 (bvnot (ite (= #b01 ((_ extract 7 6) ila_inst)) #b1 #b0))))) (bvnot (bvand __RESETED__1 dummy_resetX1))) (bvnot (bvand (bvand (bvand (bvnot __auxvar0__recorder_sn_condmet1) (bvnot $e3)) $e4) (bvnot (ite (= reg0 __auxvar0__recorder1) #b1 #b0))))) (bvnot (bvand (bvand $e4 (bvand (bvnot __auxvar1__recorder_sn_condmet1) (bvnot $e3))) (bvnot (ite (= reg1 __auxvar1__recorder1) #b1 #b0))))) (bvnot (bvand (bvand $e4 (bvand (bvnot __auxvar2__recorder_sn_condmet1) (bvnot $e3))) (bvnot (ite (= reg2 __auxvar2__recorder1) #b1 #b0))))) (bvnot (bvand (bvand $e4 (bvand (bvnot __auxvar3__recorder_sn_condmet1) (bvnot $e3))) (bvnot (ite (= reg3 __auxvar3__recorder1) #b1 #b0))))) (bvnot (bvand __START__1 (bvnot (bvand (bvnot (bvand __START__1 (bvnot (ite (= ILA_r01 __auxvar0__recorder1) #b1 #b0)))) (bvnot (bvand (bvnot __START__1) (bvnot (ite (= reg0 ILA_r01) #b1 #b0))))))))) (bvnot (bvand __START__1 (bvnot (bvand (bvnot (bvand __START__1 (bvnot (ite (= __auxvar1__recorder1 ILA_r11) #b1 #b0)))) (bvnot (bvand (bvnot __START__1) (bvnot (ite (= reg1 ILA_r11) #b1 #b0))))))))) (bvnot (bvand __START__1 (bvnot (bvand (bvnot (bvand __START__1 (bvnot (ite (= __auxvar2__recorder1 ILA_r21) #b1 #b0)))) (bvnot (bvand (bvnot __START__1) (bvnot (ite (= reg2 ILA_r21) #b1 #b0))))))))) (bvnot (bvand __START__1 (bvnot (bvand (bvnot (bvand __START__1 (bvnot (ite (= ILA_r31 __auxvar3__recorder1) #b1 #b0)))) (bvnot (bvand (bvnot __START__1) (bvnot (ite (= reg3 ILA_r31) #b1 #b0)))))))))))))
step: start --> ex
WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst
WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst_valid
>> [[] ptr: 0]  WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst
WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst_valid
not concrete. Retry with deeper choice.
>> [[rst == 0 ] ptr: 1]  WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst
WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst_valid
not concrete. Retry with deeper choice.
>> [[rst == 0 RTL_ex_go == 0 ] ptr: 2]  WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst
WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst_valid
not concrete. Retry with deeper choice.
>> [[rst == 0 RTL_ex_go == 0 RTL_wb_go == 0 ] ptr: 3]  WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst
WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst_valid
new state!
>> [[rst == 0 RTL_ex_go == 0 RTL_wb_go == 1 ] ptr: 3]  WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst
WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst_valid
new state!
>> [[rst == 0 RTL_ex_go == 1 ] ptr: 2]  WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst
WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst_valid
new state!
>> [[rst == 1 ] ptr: 1]  WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst
WARNING: shadowing input assignment as assigned by prev-state __VLG_I_inst_valid
not reachable.
=============================
Finish!
Get #state: 3
number of state start-ex: 1-> 3
--------------------------------
| sv                  | value               
--------------------------------
| RTL_registers[1]    | reg1                
| RTL_ex_wb_rd        | rd2                 
| RTL_id_ex_rd        | ((_ extract 1 0) inst)
| RTL_scoreboard[1]   | (let (($e1 ((_ extract 7 6) inst))) (concat (bvand (bvand inst_v (bvnot (ite (and (not (= #b10 $e1)) (not (= #b01 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b01 ((_ extract 1 0) inst)) #b1 #b0)) (ite (= #b01 s1) #b1 #b0)))
| RTL_id_ex_valid     | inst_v              
| RTL_id_ex_operand2  | (let (($e1 ((_ extract 3 2) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000)))))))))))
| RTL_id_ex_operand1  | (let (($e1 ((_ extract 5 4) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000)))))))))))
| RTL_id_ex_op        | ((_ extract 7 6) inst)
| RTL_ex_wb_reg_wen   | w2                  
| RTL_registers[3]    | reg3                
| RTL_ex_wb_valid     | v2                  
| RTL_scoreboard[2]   | (let (($e1 ((_ extract 7 6) inst))) (concat (bvand (bvand inst_v (bvnot (ite (and (not (= #b10 $e1)) (not (= #b01 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b10 ((_ extract 1 0) inst)) #b1 #b0)) ((_ extract 0 0) s2)))
| RTL_scoreboard[3]   | (let (($e1 ((_ extract 7 6) inst))) (concat (bvand (bvand inst_v (bvnot (ite (and (not (= #b10 $e1)) (not (= #b01 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b11 ((_ extract 1 0) inst)) #b1 #b0)) ((_ extract 0 0) s3)))
| RTL_id_ex_reg_wen   | #b1                 
| RTL_ex_wb_val       | ex_val              
| RTL_scoreboard[0]   | (let (($e1 ((_ extract 7 6) inst))) (concat (bvand (bvand inst_v (bvnot (ite (and (not (= #b10 $e1)) (not (= #b01 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b00 ((_ extract 1 0) inst)) #b1 #b0)) (ite (= #b01 s0) #b1 #b0)))
| RTL_registers[0]    | reg0                
| RTL_registers[2]    | reg2                
--------------------------------
| sv                  | value               
--------------------------------
| RTL_registers[1]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1)
| RTL_ex_wb_rd        | rd2                 
| RTL_id_ex_rd        | ((_ extract 1 0) inst)
| RTL_scoreboard[1]   | (let (($e1 ((_ extract 7 6) inst))) (concat (bvand (bvand inst_v (bvnot (ite (and (not (= #b10 $e1)) (not (= #b01 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b01 ((_ extract 1 0) inst)) #b1 #b0)) v1))
| RTL_id_ex_valid     | inst_v              
| RTL_id_ex_operand2  | (let (($e1 ((_ extract 3 2) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000)))))))))))
| RTL_id_ex_operand1  | (let (($e1 ((_ extract 5 4) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000)))))))))))
| RTL_id_ex_op        | ((_ extract 7 6) inst)
| RTL_ex_wb_reg_wen   | w2                  
| RTL_registers[3]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3)
| RTL_ex_wb_valid     | v1                  
| RTL_scoreboard[2]   | (let (($e1 ((_ extract 7 6) inst))) (concat (bvand (bvand inst_v (bvnot (ite (and (not (= #b10 $e1)) (not (= #b01 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b10 ((_ extract 1 0) inst)) #b1 #b0)) v1))
| RTL_scoreboard[3]   | (let (($e1 ((_ extract 7 6) inst))) (concat (bvand (bvand inst_v (bvnot (ite (and (not (= #b10 $e1)) (not (= #b01 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b11 ((_ extract 1 0) inst)) #b1 #b0)) v1))
| RTL_id_ex_reg_wen   | #b1                 
| RTL_ex_wb_val       | ex_val              
| RTL_scoreboard[0]   | (let (($e1 ((_ extract 7 6) inst))) (concat (bvand (bvand inst_v (bvnot (ite (and (not (= #b10 $e1)) (not (= #b01 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b00 ((_ extract 1 0) inst)) #b1 #b0)) v1))
| RTL_registers[0]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0)
| RTL_registers[2]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2)
--------------------------------
| sv                  | value               
--------------------------------
| RTL_registers[1]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1)
| RTL_ex_wb_rd        | rd1                 
| RTL_id_ex_rd        | ((_ extract 1 0) inst)
| RTL_scoreboard[1]   | (let (($e1 ((_ extract 7 6) inst))) (concat (bvand (bvand inst_v (bvnot (ite (and (not (= #b10 $e1)) (not (= #b01 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b01 ((_ extract 1 0) inst)) #b1 #b0)) (bvand (bvand w1 v1) (ite (= #b01 rd1) #b1 #b0))))
| RTL_id_ex_valid     | v1                  
| RTL_id_ex_operand2  | (let (($e1 ((_ extract 3 2) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000)))))))))))
| RTL_id_ex_operand1  | (let (($e1 ((_ extract 5 4) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000)))))))))))
| RTL_id_ex_op        | ((_ extract 7 6) inst)
| RTL_ex_wb_reg_wen   | w1                  
| RTL_registers[3]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3)
| RTL_ex_wb_valid     | v1                  
| RTL_scoreboard[2]   | (let (($e1 ((_ extract 7 6) inst))) (concat (bvand (bvand inst_v (bvnot (ite (and (not (= #b10 $e1)) (not (= #b01 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b10 ((_ extract 1 0) inst)) #b1 #b0)) (bvand (bvand w1 v1) (ite (= #b10 rd1) #b1 #b0))))
| RTL_scoreboard[3]   | (let (($e1 ((_ extract 7 6) inst))) (concat (bvand (bvand inst_v (bvnot (ite (and (not (= #b10 $e1)) (not (= #b01 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b11 ((_ extract 1 0) inst)) #b1 #b0)) (bvand (bvand w1 v1) (ite (= #b11 rd1) #b1 #b0))))
| RTL_id_ex_reg_wen   | #b1                 
| RTL_ex_wb_val       | (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000)))
| RTL_scoreboard[0]   | (let (($e1 ((_ extract 7 6) inst))) (concat (bvand (bvand inst_v (bvnot (ite (and (not (= #b10 $e1)) (not (= #b01 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b00 ((_ extract 1 0) inst)) #b1 #b0)) (ite (bvult #b01 s0) #b1 #b0)))
| RTL_registers[0]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0)
| RTL_registers[2]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2)
number of state start-ex in total: 1 --> 3
step: ex --> ex
ret_term2:(bvnot (bvand RTL_id_ex_valid (bvand (bvnot __VLG_I_stallex) (bvnot (bvand __VLG_I_stallwb RTL_ex_wb_valid)))))
init stack per state: [] ptr: 0
init tracelen: 1
Trace: 1 Stack: 1
>> [[] ptr: 0  ] : not concrete. Retry with deeper choice.
Trace: 1 Stack: 1
>> [[rst == 0 ] ptr: 1  ] : not concrete. Retry with deeper choice.
Trace: 1 Stack: 1
>> [[rst == 0 RTL_ex_go == 0 ] ptr: 2  ] : not concrete. Retry with deeper choice.
Trace: 1 Stack: 1
>> [[rst == 0 RTL_ex_go == 0 RTL_wb_go == 0 ] ptr: 3  ] :  not new state. Go back. Try next.
Trace: 1 Stack: 1
>> [[rst == 0 RTL_ex_go == 0 RTL_wb_go == 1 ] ptr: 3  ] : A new state!
Trace: 2 Stack: 2
>> [[rst == 0 RTL_ex_go == 0 RTL_wb_go == 1 ] ptr: 3 [] ptr: 0  ] :  not new state. Go back. Try next.
Trace: 2 Stack: 2
>> [[rst == 0 RTL_ex_go == 0 RTL_wb_go == 1 ] ptr: 3 [] ptr: 0 (END)  ] :  no new choices, back to prev state
Trace: 1 Stack: 1
>> [[rst == 0 RTL_ex_go == 0 RTL_wb_go == 1 ] ptr: 3  ] :  not new state. Go back. Try next.
Trace: 1 Stack: 1
>> [[rst == 0 RTL_ex_go == 1 ] ptr: 2  ] :  not reachable.
Trace: 1 Stack: 1
>> [[rst == 1 ] ptr: 1  ] :  not reachable.
Trace: 1 Stack: 1
>> [[] ptr: 0 (END)  ] :  no new choices, back to prev state
=============================
Finish!
Get #state: 2
number of state ex-ex: 1-> 2
--------------------------------
| sv                  | value               
--------------------------------
| RTL_id_ex_operand1  | (let (($e1 ((_ extract 5 4) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000)))))))))))
| RTL_scoreboard[2]   | (let (($e1 ((_ extract 7 6) inst))) (concat (bvand (bvand inst_v (bvnot (ite (and (not (= #b10 $e1)) (not (= #b01 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b10 ((_ extract 1 0) inst)) #b1 #b0)) ((_ extract 0 0) s2)))
| RTL_scoreboard[3]   | (let (($e1 ((_ extract 7 6) inst))) (concat (bvand (bvand inst_v (bvnot (ite (and (not (= #b10 $e1)) (not (= #b01 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b11 ((_ extract 1 0) inst)) #b1 #b0)) ((_ extract 0 0) s3)))
| RTL_registers[1]    | reg1                
| RTL_ex_wb_rd        | rd2                 
| RTL_registers[2]    | reg2                
| RTL_registers[0]    | reg0                
| RTL_scoreboard[1]   | (let (($e1 ((_ extract 7 6) inst))) (concat (bvand (bvand inst_v (bvnot (ite (and (not (= #b10 $e1)) (not (= #b01 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b01 ((_ extract 1 0) inst)) #b1 #b0)) (ite (= #b01 s1) #b1 #b0)))
| RTL_scoreboard[0]   | (let (($e1 ((_ extract 7 6) inst))) (concat (bvand (bvand inst_v (bvnot (ite (and (not (= #b10 $e1)) (not (= #b01 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b00 ((_ extract 1 0) inst)) #b1 #b0)) (ite (= #b01 s0) #b1 #b0)))
| RTL_ex_wb_val       | ex_val              
| RTL_id_ex_reg_wen   | #b1                 
| RTL_id_ex_op        | ((_ extract 7 6) inst)
| RTL_ex_wb_valid     | v2                  
| RTL_registers[3]    | reg3                
| RTL_ex_wb_reg_wen   | w2                  
| RTL_id_ex_operand2  | (let (($e1 ((_ extract 3 2) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000)))))))))))
| RTL_id_ex_valid     | inst_v              
| RTL_id_ex_rd        | ((_ extract 1 0) inst)
--------------------------------
| sv                  | value               
--------------------------------
| RTL_registers[1]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1)
| RTL_ex_wb_rd        | rd2                 
| RTL_id_ex_rd        | ((_ extract 1 0) inst)
| RTL_scoreboard[1]   | (let (($e1 ((_ extract 7 6) inst))) (let (($e2 (bvand (bvand inst_v (bvnot (ite (and (not (= #b10 $e1)) (not (= #b01 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b01 ((_ extract 1 0) inst)) #b1 #b0)))) (bvand (concat $e2 (ite (= #b01 s1) #b1 #b0)) (concat $e2 (bvnot v2)))))
| RTL_id_ex_valid     | inst_v              
| RTL_id_ex_operand2  | (let (($e1 ((_ extract 3 2) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000)))))))))))
| RTL_id_ex_operand1  | (let (($e1 ((_ extract 5 4) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000)))))))))))
| RTL_id_ex_op        | ((_ extract 7 6) inst)
| RTL_ex_wb_reg_wen   | w2                  
| RTL_registers[3]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3)
| RTL_ex_wb_valid     | #b0                 
| RTL_scoreboard[2]   | (let (($e1 ((_ extract 7 6) inst))) (let (($e2 (bvand (bvand inst_v (bvnot (ite (and (not (= #b10 $e1)) (not (= #b01 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b10 ((_ extract 1 0) inst)) #b1 #b0)))) (bvand (concat $e2 ((_ extract 0 0) s2)) (concat $e2 (bvnot v2)))))
| RTL_scoreboard[3]   | (let (($e1 ((_ extract 7 6) inst))) (let (($e2 (bvand (bvand inst_v (bvnot (ite (and (not (= #b10 $e1)) (not (= #b01 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b11 ((_ extract 1 0) inst)) #b1 #b0)))) (bvand (concat $e2 ((_ extract 0 0) s3)) (concat $e2 (bvnot v2)))))
| RTL_id_ex_reg_wen   | #b1                 
| RTL_ex_wb_val       | ex_val              
| RTL_scoreboard[0]   | (let (($e1 ((_ extract 7 6) inst))) (let (($e2 (bvand (bvand inst_v (bvnot (ite (and (not (= #b10 $e1)) (not (= #b01 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b00 ((_ extract 1 0) inst)) #b1 #b0)))) (bvand (concat $e2 (ite (= #b01 s0) #b1 #b0)) (concat $e2 (bvnot v2)))))
| RTL_registers[0]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0)
| RTL_registers[2]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2)
init stack per state: [] ptr: 0
init tracelen: 1
Trace: 1 Stack: 1
>> [[] ptr: 0  ] :  not new state. Go back. Try next.
Trace: 1 Stack: 1
>> [[] ptr: 0 (END)  ] :  no new choices, back to prev state
=============================
Finish!
Get #state: 1
number of state ex-ex: 1-> 1
--------------------------------
| sv                  | value               
--------------------------------
| RTL_id_ex_operand1  | (let (($e1 ((_ extract 5 4) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000)))))))))))
| RTL_scoreboard[2]   | (let (($e1 ((_ extract 7 6) inst))) (concat (bvand (bvand inst_v (bvnot (ite (and (not (= #b10 $e1)) (not (= #b01 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b10 ((_ extract 1 0) inst)) #b1 #b0)) v1))
| RTL_scoreboard[3]   | (let (($e1 ((_ extract 7 6) inst))) (concat (bvand (bvand inst_v (bvnot (ite (and (not (= #b10 $e1)) (not (= #b01 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b11 ((_ extract 1 0) inst)) #b1 #b0)) v1))
| RTL_registers[1]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1)
| RTL_ex_wb_rd        | rd2                 
| RTL_registers[2]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2)
| RTL_registers[0]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0)
| RTL_scoreboard[1]   | (let (($e1 ((_ extract 7 6) inst))) (concat (bvand (bvand inst_v (bvnot (ite (and (not (= #b10 $e1)) (not (= #b01 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b01 ((_ extract 1 0) inst)) #b1 #b0)) v1))
| RTL_scoreboard[0]   | (let (($e1 ((_ extract 7 6) inst))) (concat (bvand (bvand inst_v (bvnot (ite (and (not (= #b10 $e1)) (not (= #b01 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b00 ((_ extract 1 0) inst)) #b1 #b0)) v1))
| RTL_ex_wb_val       | ex_val              
| RTL_id_ex_reg_wen   | #b1                 
| RTL_id_ex_op        | ((_ extract 7 6) inst)
| RTL_ex_wb_valid     | v1                  
| RTL_registers[3]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3)
| RTL_ex_wb_reg_wen   | w2                  
| RTL_id_ex_operand2  | (let (($e1 ((_ extract 3 2) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000)))))))))))
| RTL_id_ex_valid     | inst_v              
| RTL_id_ex_rd        | ((_ extract 1 0) inst)
init stack per state: [] ptr: 0
init tracelen: 1
Trace: 1 Stack: 1
>> [[] ptr: 0  ] : not concrete. Retry with deeper choice.
Trace: 1 Stack: 1
>> [[rst == 0 ] ptr: 1  ] : not concrete. Retry with deeper choice.
Trace: 1 Stack: 1
>> [[rst == 0 RTL_ex_go == 0 ] ptr: 2  ] : not concrete. Retry with deeper choice.
Trace: 1 Stack: 1
>> [[rst == 0 RTL_ex_go == 0 RTL_wb_go == 0 ] ptr: 3  ] :  not new state. Go back. Try next.
Trace: 1 Stack: 1
>> [[rst == 0 RTL_ex_go == 0 RTL_wb_go == 1 ] ptr: 3  ] : A new state!
Trace: 2 Stack: 2
>> [[rst == 0 RTL_ex_go == 0 RTL_wb_go == 1 ] ptr: 3 [] ptr: 0  ] :  not new state. Go back. Try next.
Trace: 2 Stack: 2
>> [[rst == 0 RTL_ex_go == 0 RTL_wb_go == 1 ] ptr: 3 [] ptr: 0 (END)  ] :  no new choices, back to prev state
Trace: 1 Stack: 1
>> [[rst == 0 RTL_ex_go == 0 RTL_wb_go == 1 ] ptr: 3  ] :  not new state. Go back. Try next.
Trace: 1 Stack: 1
>> [[rst == 0 RTL_ex_go == 1 ] ptr: 2  ] :  not reachable.
Trace: 1 Stack: 1
>> [[rst == 1 ] ptr: 1  ] :  not reachable.
Trace: 1 Stack: 1
>> [[] ptr: 0 (END)  ] :  no new choices, back to prev state
=============================
Finish!
Get #state: 2
number of state ex-ex: 1-> 2
--------------------------------
| sv                  | value               
--------------------------------
| RTL_id_ex_operand1  | (let (($e1 ((_ extract 5 4) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000)))))))))))
| RTL_scoreboard[2]   | (let (($e1 ((_ extract 7 6) inst))) (concat (bvand (bvand inst_v (bvnot (ite (and (not (= #b10 $e1)) (not (= #b01 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b10 ((_ extract 1 0) inst)) #b1 #b0)) (bvand (bvand w1 v1) (ite (= #b10 rd1) #b1 #b0))))
| RTL_scoreboard[3]   | (let (($e1 ((_ extract 7 6) inst))) (concat (bvand (bvand inst_v (bvnot (ite (and (not (= #b10 $e1)) (not (= #b01 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b11 ((_ extract 1 0) inst)) #b1 #b0)) (bvand (bvand w1 v1) (ite (= #b11 rd1) #b1 #b0))))
| RTL_registers[1]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1)
| RTL_ex_wb_rd        | rd1                 
| RTL_registers[2]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2)
| RTL_registers[0]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0)
| RTL_scoreboard[1]   | (let (($e1 ((_ extract 7 6) inst))) (concat (bvand (bvand inst_v (bvnot (ite (and (not (= #b10 $e1)) (not (= #b01 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b01 ((_ extract 1 0) inst)) #b1 #b0)) (bvand (bvand w1 v1) (ite (= #b01 rd1) #b1 #b0))))
| RTL_scoreboard[0]   | (let (($e1 ((_ extract 7 6) inst))) (concat (bvand (bvand inst_v (bvnot (ite (and (not (= #b10 $e1)) (not (= #b01 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b00 ((_ extract 1 0) inst)) #b1 #b0)) (ite (bvult #b01 s0) #b1 #b0)))
| RTL_ex_wb_val       | (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000)))
| RTL_id_ex_reg_wen   | #b1                 
| RTL_id_ex_op        | ((_ extract 7 6) inst)
| RTL_ex_wb_valid     | v1                  
| RTL_registers[3]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3)
| RTL_ex_wb_reg_wen   | w1                  
| RTL_id_ex_operand2  | (let (($e1 ((_ extract 3 2) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000)))))))))))
| RTL_id_ex_valid     | v1                  
| RTL_id_ex_rd        | ((_ extract 1 0) inst)
--------------------------------
| sv                  | value               
--------------------------------
| RTL_registers[1]    | (ite (= #b1 (bvand (bvand w1 v1) (ite (and (= #b01 rd1) (not (= #b00 rd1))) #b1 #b0))) (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1))
| RTL_ex_wb_rd        | rd1                 
| RTL_id_ex_rd        | ((_ extract 1 0) inst)
| RTL_scoreboard[1]   | (let (($e1 ((_ extract 7 6) inst))) (concat (bvand (bvand inst_v (bvnot (ite (and (not (= #b10 $e1)) (not (= #b01 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b01 ((_ extract 1 0) inst)) #b1 #b0)) #b0))
| RTL_id_ex_valid     | v1                  
| RTL_id_ex_operand2  | (let (($e1 ((_ extract 3 2) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000)))))))))))
| RTL_id_ex_operand1  | (let (($e1 ((_ extract 5 4) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000)))))))))))
| RTL_id_ex_op        | ((_ extract 7 6) inst)
| RTL_ex_wb_reg_wen   | w1                  
| RTL_registers[3]    | (ite (= #b1 (bvand (bvand w1 v1) (ite (and (= #b11 rd1) (not (= #b10 rd1)) (not (= #b01 rd1)) (not (= #b00 rd1))) #b1 #b0))) (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3))
| RTL_ex_wb_valid     | #b0                 
| RTL_scoreboard[2]   | (let (($e1 ((_ extract 7 6) inst))) (concat (bvand (bvand inst_v (bvnot (ite (and (not (= #b10 $e1)) (not (= #b01 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b10 ((_ extract 1 0) inst)) #b1 #b0)) #b0))
| RTL_scoreboard[3]   | (let (($e1 ((_ extract 7 6) inst))) (concat (bvand (bvand inst_v (bvnot (ite (and (not (= #b10 $e1)) (not (= #b01 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b11 ((_ extract 1 0) inst)) #b1 #b0)) #b0))
| RTL_id_ex_reg_wen   | #b1                 
| RTL_ex_wb_val       | (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000)))
| RTL_scoreboard[0]   | (let (($e1 ((_ extract 7 6) inst))) (let (($e2 (bvand (bvand inst_v (bvnot (ite (and (not (= #b10 $e1)) (not (= #b01 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b00 ((_ extract 1 0) inst)) #b1 #b0)))) (bvand (concat $e2 (ite (bvult #b01 s0) #b1 #b0)) (concat $e2 (bvnot v1)))))
| RTL_registers[0]    | (ite (= #b1 (bvand (bvand w1 v1) (ite (= #b00 rd1) #b1 #b0))) (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))) (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0))
| RTL_registers[2]    | (ite (= #b1 (bvand (bvand w1 v1) (ite (and (= #b10 rd1) (not (= #b01 rd1)) (not (= #b00 rd1))) #b1 #b0))) (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2))
number of state ex-ex in total: 3 --> 5
step: ex --> wb
>> [[] ptr: 0]  new state!
=============================
Finish!
Get #state: 1
number of state ex-wb: 1-> 1
--------------------------------
| sv                  | value               
--------------------------------
| RTL_registers[2]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2)
| RTL_ex_wb_rd        | ((_ extract 1 0) inst)
| RTL_ex_wb_val       | (let (($e1 ((_ extract 3 2) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (let (($e7 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e8 ((_ extract 5 4) inst))) (let (($e9 (= #b11 $e8))) (let (($e10 (= #b10 $e8))) (let (($e11 (= #b01 $e8))) (let (($e12 (= #b00 $e8))) (let (($e13 (ite $e9 s3 (ite $e10 s2 (ite $e11 s1 (ite $e12 s0 #b00)))))) (bvadd (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val $e7)) (ite (= #b00 $e13) (ite $e9 reg3 (ite $e10 reg2 (ite $e11 reg1 (ite $e12 reg0 #b00000000)))) (ite (= #b01 $e13) ex_val $e7))))))))))))))))
| RTL_registers[1]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1)
| RTL_ex_wb_valid     | inst_v              
| RTL_registers[0]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0)
| RTL_ex_wb_reg_wen   | inst_v              
| RTL_registers[3]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3)
>> [[] ptr: 0]  new state!
=============================
Finish!
Get #state: 1
number of state ex-wb: 1-> 1
--------------------------------
| sv                  | value               
--------------------------------
| RTL_registers[2]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2)
| RTL_ex_wb_rd        | ((_ extract 1 0) inst)
| RTL_ex_wb_val       | (let (($e1 ((_ extract 3 2) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (let (($e7 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e8 ((_ extract 5 4) inst))) (let (($e9 (= #b11 $e8))) (let (($e10 (= #b10 $e8))) (let (($e11 (= #b01 $e8))) (let (($e12 (= #b00 $e8))) (let (($e13 (ite $e9 s3 (ite $e10 s2 (ite $e11 s1 (ite $e12 s0 #b00)))))) (bvadd (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val $e7)) (ite (= #b00 $e13) (ite $e9 reg3 (ite $e10 reg2 (ite $e11 reg1 (ite $e12 reg0 #b00000000)))) (ite (= #b01 $e13) ex_val $e7))))))))))))))))
| RTL_registers[1]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1)
| RTL_ex_wb_valid     | inst_v              
| RTL_registers[0]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0)
| RTL_ex_wb_reg_wen   | (bvnot (bvand (bvnot w2) (bvnot inst_v)))
| RTL_registers[3]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3)
>> [[] ptr: 0]  new state!
=============================
Finish!
Get #state: 1
number of state ex-wb: 1-> 1
--------------------------------
| sv                  | value               
--------------------------------
| RTL_registers[2]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2)
| RTL_ex_wb_rd        | ((_ extract 1 0) inst)
| RTL_ex_wb_val       | (let (($e1 ((_ extract 3 2) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (let (($e7 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e8 ((_ extract 5 4) inst))) (let (($e9 (= #b11 $e8))) (let (($e10 (= #b10 $e8))) (let (($e11 (= #b01 $e8))) (let (($e12 (= #b00 $e8))) (let (($e13 (ite $e9 s3 (ite $e10 s2 (ite $e11 s1 (ite $e12 s0 #b00)))))) (bvadd (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val $e7)) (ite (= #b00 $e13) (ite $e9 reg3 (ite $e10 reg2 (ite $e11 reg1 (ite $e12 reg0 #b00000000)))) (ite (= #b01 $e13) ex_val $e7))))))))))))))))
| RTL_registers[1]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1)
| RTL_ex_wb_valid     | inst_v              
| RTL_registers[0]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0)
| RTL_ex_wb_reg_wen   | inst_v              
| RTL_registers[3]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3)
>> [[] ptr: 0]  new state!
=============================
Finish!
Get #state: 1
number of state ex-wb: 1-> 1
--------------------------------
| sv                  | value               
--------------------------------
| RTL_registers[2]    | (ite (= #b1 (bvand (bvand w1 v1) (ite (and (= #b10 rd1) (not (= #b01 rd1)) (not (= #b00 rd1))) #b1 #b0))) (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2))
| RTL_ex_wb_rd        | ((_ extract 1 0) inst)
| RTL_ex_wb_val       | (let (($e1 ((_ extract 3 2) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (let (($e7 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e8 ((_ extract 5 4) inst))) (let (($e9 (= #b11 $e8))) (let (($e10 (= #b10 $e8))) (let (($e11 (= #b01 $e8))) (let (($e12 (= #b00 $e8))) (let (($e13 (ite $e9 s3 (ite $e10 s2 (ite $e11 s1 (ite $e12 s0 #b00)))))) (bvadd (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val $e7)) (ite (= #b00 $e13) (ite $e9 reg3 (ite $e10 reg2 (ite $e11 reg1 (ite $e12 reg0 #b00000000)))) (ite (= #b01 $e13) ex_val $e7))))))))))))))))
| RTL_registers[1]    | (ite (= #b1 (bvand (bvand w1 v1) (ite (and (= #b01 rd1) (not (= #b00 rd1))) #b1 #b0))) (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1))
| RTL_ex_wb_valid     | v1                  
| RTL_registers[0]    | (ite (= #b1 (bvand (bvand w1 v1) (ite (= #b00 rd1) #b1 #b0))) (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))) (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0))
| RTL_ex_wb_reg_wen   | (bvnot (bvand (bvnot w1) (bvnot v1)))
| RTL_registers[3]    | (ite (= #b1 (bvand (bvand w1 v1) (ite (and (= #b11 rd1) (not (= #b10 rd1)) (not (= #b01 rd1)) (not (= #b00 rd1))) #b1 #b0))) (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3))
>> [[] ptr: 0]  new state!
=============================
Finish!
Get #state: 1
number of state ex-wb: 1-> 1
--------------------------------
| sv                  | value               
--------------------------------
| RTL_registers[2]    | (ite (= #b1 (bvand (bvand w1 v1) (ite (and (= #b10 rd1) (not (= #b01 rd1)) (not (= #b00 rd1))) #b1 #b0))) (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2))
| RTL_ex_wb_rd        | ((_ extract 1 0) inst)
| RTL_ex_wb_val       | (let (($e1 ((_ extract 3 2) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (let (($e7 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e8 ((_ extract 5 4) inst))) (let (($e9 (= #b11 $e8))) (let (($e10 (= #b10 $e8))) (let (($e11 (= #b01 $e8))) (let (($e12 (= #b00 $e8))) (let (($e13 (ite $e9 s3 (ite $e10 s2 (ite $e11 s1 (ite $e12 s0 #b00)))))) (bvadd (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val $e7)) (ite (= #b00 $e13) (ite $e9 reg3 (ite $e10 reg2 (ite $e11 reg1 (ite $e12 reg0 #b00000000)))) (ite (= #b01 $e13) ex_val $e7))))))))))))))))
| RTL_registers[1]    | (ite (= #b1 (bvand (bvand w1 v1) (ite (and (= #b01 rd1) (not (= #b00 rd1))) #b1 #b0))) (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1))
| RTL_ex_wb_valid     | v1                  
| RTL_registers[0]    | (ite (= #b1 (bvand (bvand w1 v1) (ite (= #b00 rd1) #b1 #b0))) (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))) (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0))
| RTL_ex_wb_reg_wen   | (bvnot (bvand (bvnot w1) (bvnot v1)))
| RTL_registers[3]    | (ite (= #b1 (bvand (bvand w1 v1) (ite (and (= #b11 rd1) (not (= #b10 rd1)) (not (= #b01 rd1)) (not (= #b00 rd1))) #b1 #b0))) (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3))
number of state ex-wb in total: 5 --> 5
step: wb --> wb
init stack per state: [] ptr: 0
init tracelen: 1
Trace: 1 Stack: 1
>> [[] ptr: 0  ] :  not new state. Go back. Try next.
Trace: 1 Stack: 1
>> [[] ptr: 0 (END)  ] :  no new choices, back to prev state
=============================
Finish!
Get #state: 1
number of state wb-wb: 1-> 1
--------------------------------
| sv                  | value               
--------------------------------
| RTL_ex_wb_reg_wen   | inst_v              
| RTL_registers[2]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2)
| RTL_ex_wb_rd        | ((_ extract 1 0) inst)
| RTL_ex_wb_val       | (let (($e1 ((_ extract 3 2) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (let (($e7 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e8 ((_ extract 5 4) inst))) (let (($e9 (= #b11 $e8))) (let (($e10 (= #b10 $e8))) (let (($e11 (= #b01 $e8))) (let (($e12 (= #b00 $e8))) (let (($e13 (ite $e9 s3 (ite $e10 s2 (ite $e11 s1 (ite $e12 s0 #b00)))))) (bvadd (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val $e7)) (ite (= #b00 $e13) (ite $e9 reg3 (ite $e10 reg2 (ite $e11 reg1 (ite $e12 reg0 #b00000000)))) (ite (= #b01 $e13) ex_val $e7))))))))))))))))
| RTL_registers[1]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1)
| RTL_ex_wb_valid     | inst_v              
| RTL_registers[0]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0)
| RTL_registers[3]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3)
init stack per state: [] ptr: 0
init tracelen: 1
Trace: 1 Stack: 1
>> [[] ptr: 0  ] :  not new state. Go back. Try next.
Trace: 1 Stack: 1
>> [[] ptr: 0 (END)  ] :  no new choices, back to prev state
=============================
Finish!
Get #state: 1
number of state wb-wb: 1-> 1
--------------------------------
| sv                  | value               
--------------------------------
| RTL_ex_wb_reg_wen   | (bvnot (bvand (bvnot w2) (bvnot inst_v)))
| RTL_registers[2]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2)
| RTL_ex_wb_rd        | ((_ extract 1 0) inst)
| RTL_ex_wb_val       | (let (($e1 ((_ extract 3 2) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (let (($e7 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e8 ((_ extract 5 4) inst))) (let (($e9 (= #b11 $e8))) (let (($e10 (= #b10 $e8))) (let (($e11 (= #b01 $e8))) (let (($e12 (= #b00 $e8))) (let (($e13 (ite $e9 s3 (ite $e10 s2 (ite $e11 s1 (ite $e12 s0 #b00)))))) (bvadd (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val $e7)) (ite (= #b00 $e13) (ite $e9 reg3 (ite $e10 reg2 (ite $e11 reg1 (ite $e12 reg0 #b00000000)))) (ite (= #b01 $e13) ex_val $e7))))))))))))))))
| RTL_registers[1]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1)
| RTL_ex_wb_valid     | inst_v              
| RTL_registers[0]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0)
| RTL_registers[3]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3)
init stack per state: [] ptr: 0
init tracelen: 1
Trace: 1 Stack: 1
>> [[] ptr: 0  ] :  not new state. Go back. Try next.
Trace: 1 Stack: 1
>> [[] ptr: 0 (END)  ] :  no new choices, back to prev state
=============================
Finish!
Get #state: 1
number of state wb-wb: 1-> 1
--------------------------------
| sv                  | value               
--------------------------------
| RTL_ex_wb_reg_wen   | inst_v              
| RTL_registers[2]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2)
| RTL_ex_wb_rd        | ((_ extract 1 0) inst)
| RTL_ex_wb_val       | (let (($e1 ((_ extract 3 2) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (let (($e7 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e8 ((_ extract 5 4) inst))) (let (($e9 (= #b11 $e8))) (let (($e10 (= #b10 $e8))) (let (($e11 (= #b01 $e8))) (let (($e12 (= #b00 $e8))) (let (($e13 (ite $e9 s3 (ite $e10 s2 (ite $e11 s1 (ite $e12 s0 #b00)))))) (bvadd (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val $e7)) (ite (= #b00 $e13) (ite $e9 reg3 (ite $e10 reg2 (ite $e11 reg1 (ite $e12 reg0 #b00000000)))) (ite (= #b01 $e13) ex_val $e7))))))))))))))))
| RTL_registers[1]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1)
| RTL_ex_wb_valid     | inst_v              
| RTL_registers[0]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0)
| RTL_registers[3]    | (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3)
init stack per state: [] ptr: 0
init tracelen: 1
Trace: 1 Stack: 1
>> [[] ptr: 0  ] :  not new state. Go back. Try next.
Trace: 1 Stack: 1
>> [[] ptr: 0 (END)  ] :  no new choices, back to prev state
=============================
Finish!
Get #state: 1
number of state wb-wb: 1-> 1
--------------------------------
| sv                  | value               
--------------------------------
| RTL_ex_wb_reg_wen   | (bvnot (bvand (bvnot w1) (bvnot v1)))
| RTL_registers[2]    | (ite (= #b1 (bvand (bvand w1 v1) (ite (and (= #b10 rd1) (not (= #b01 rd1)) (not (= #b00 rd1))) #b1 #b0))) (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2))
| RTL_ex_wb_rd        | ((_ extract 1 0) inst)
| RTL_ex_wb_val       | (let (($e1 ((_ extract 3 2) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (let (($e7 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e8 ((_ extract 5 4) inst))) (let (($e9 (= #b11 $e8))) (let (($e10 (= #b10 $e8))) (let (($e11 (= #b01 $e8))) (let (($e12 (= #b00 $e8))) (let (($e13 (ite $e9 s3 (ite $e10 s2 (ite $e11 s1 (ite $e12 s0 #b00)))))) (bvadd (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val $e7)) (ite (= #b00 $e13) (ite $e9 reg3 (ite $e10 reg2 (ite $e11 reg1 (ite $e12 reg0 #b00000000)))) (ite (= #b01 $e13) ex_val $e7))))))))))))))))
| RTL_registers[1]    | (ite (= #b1 (bvand (bvand w1 v1) (ite (and (= #b01 rd1) (not (= #b00 rd1))) #b1 #b0))) (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1))
| RTL_ex_wb_valid     | v1                  
| RTL_registers[0]    | (ite (= #b1 (bvand (bvand w1 v1) (ite (= #b00 rd1) #b1 #b0))) (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))) (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0))
| RTL_registers[3]    | (ite (= #b1 (bvand (bvand w1 v1) (ite (and (= #b11 rd1) (not (= #b10 rd1)) (not (= #b01 rd1)) (not (= #b00 rd1))) #b1 #b0))) (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3))
init stack per state: [] ptr: 0
init tracelen: 1
Trace: 1 Stack: 1
>> [[] ptr: 0  ] :  not new state. Go back. Try next.
Trace: 1 Stack: 1
>> [[] ptr: 0 (END)  ] :  no new choices, back to prev state
=============================
Finish!
Get #state: 1
number of state wb-wb: 1-> 1
--------------------------------
| sv                  | value               
--------------------------------
| RTL_ex_wb_reg_wen   | (bvnot (bvand (bvnot w1) (bvnot v1)))
| RTL_registers[2]    | (ite (= #b1 (bvand (bvand w1 v1) (ite (and (= #b10 rd1) (not (= #b01 rd1)) (not (= #b00 rd1))) #b1 #b0))) (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2))
| RTL_ex_wb_rd        | ((_ extract 1 0) inst)
| RTL_ex_wb_val       | (let (($e1 ((_ extract 3 2) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (let (($e7 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e8 ((_ extract 5 4) inst))) (let (($e9 (= #b11 $e8))) (let (($e10 (= #b10 $e8))) (let (($e11 (= #b01 $e8))) (let (($e12 (= #b00 $e8))) (let (($e13 (ite $e9 s3 (ite $e10 s2 (ite $e11 s1 (ite $e12 s0 #b00)))))) (bvadd (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val $e7)) (ite (= #b00 $e13) (ite $e9 reg3 (ite $e10 reg2 (ite $e11 reg1 (ite $e12 reg0 #b00000000)))) (ite (= #b01 $e13) ex_val $e7))))))))))))))))
| RTL_registers[1]    | (ite (= #b1 (bvand (bvand w1 v1) (ite (and (= #b01 rd1) (not (= #b00 rd1))) #b1 #b0))) (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1))
| RTL_ex_wb_valid     | v1                  
| RTL_registers[0]    | (ite (= #b1 (bvand (bvand w1 v1) (ite (= #b00 rd1) #b1 #b0))) (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))) (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0))
| RTL_registers[3]    | (ite (= #b1 (bvand (bvand w1 v1) (ite (and (= #b11 rd1) (not (= #b10 rd1)) (not (= #b01 rd1)) (not (= #b00 rd1))) #b1 #b0))) (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3))
number of state wb-wb in total: 5 --> 5
step: ex --> finish
>> [[] ptr: 0]  new state!
=============================
Finish!
Get #state: 1
number of state wb-finish: 1-> 1
--------------------------------
| sv                  | value               
--------------------------------
| RTL_registers[1]    | (let (($e1 ((_ extract 1 0) inst))) (let (($e2 ((_ extract 3 2) inst))) (let (($e3 (= #b11 $e2))) (let (($e4 (= #b10 $e2))) (let (($e5 (= #b01 $e2))) (let (($e6 (= #b00 $e2))) (let (($e7 (ite $e3 s3 (ite $e4 s2 (ite $e5 s1 (ite $e6 s0 #b00)))))) (let (($e8 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e9 ((_ extract 5 4) inst))) (let (($e10 (= #b11 $e9))) (let (($e11 (= #b10 $e9))) (let (($e12 (= #b01 $e9))) (let (($e13 (= #b00 $e9))) (let (($e14 (ite $e10 s3 (ite $e11 s2 (ite $e12 s1 (ite $e13 s0 #b00)))))) (ite (= #b1 (bvand inst_v (ite (and (= #b01 $e1) (not (= #b00 $e1))) #b1 #b0))) (bvadd (ite (= #b00 $e7) (ite $e3 reg3 (ite $e4 reg2 (ite $e5 reg1 (ite $e6 reg0 #b00000000)))) (ite (= #b01 $e7) ex_val $e8)) (ite (= #b00 $e14) (ite $e10 reg3 (ite $e11 reg2 (ite $e12 reg1 (ite $e13 reg0 #b00000000)))) (ite (= #b01 $e14) ex_val $e8))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1))))))))))))))))
| RTL_registers[2]    | (let (($e1 ((_ extract 1 0) inst))) (let (($e2 ((_ extract 3 2) inst))) (let (($e3 (= #b11 $e2))) (let (($e4 (= #b10 $e2))) (let (($e5 (= #b01 $e2))) (let (($e6 (= #b00 $e2))) (let (($e7 (ite $e3 s3 (ite $e4 s2 (ite $e5 s1 (ite $e6 s0 #b00)))))) (let (($e8 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e9 ((_ extract 5 4) inst))) (let (($e10 (= #b11 $e9))) (let (($e11 (= #b10 $e9))) (let (($e12 (= #b01 $e9))) (let (($e13 (= #b00 $e9))) (let (($e14 (ite $e10 s3 (ite $e11 s2 (ite $e12 s1 (ite $e13 s0 #b00)))))) (ite (= #b1 (bvand inst_v (ite (and (= #b10 $e1) (not (= #b01 $e1)) (not (= #b00 $e1))) #b1 #b0))) (bvadd (ite (= #b00 $e7) (ite $e3 reg3 (ite $e4 reg2 (ite $e5 reg1 (ite $e6 reg0 #b00000000)))) (ite (= #b01 $e7) ex_val $e8)) (ite (= #b00 $e14) (ite $e10 reg3 (ite $e11 reg2 (ite $e12 reg1 (ite $e13 reg0 #b00000000)))) (ite (= #b01 $e14) ex_val $e8))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2))))))))))))))))
| RTL_registers[0]    | (let (($e1 ((_ extract 3 2) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (let (($e7 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e8 ((_ extract 5 4) inst))) (let (($e9 (= #b11 $e8))) (let (($e10 (= #b10 $e8))) (let (($e11 (= #b01 $e8))) (let (($e12 (= #b00 $e8))) (let (($e13 (ite $e9 s3 (ite $e10 s2 (ite $e11 s1 (ite $e12 s0 #b00)))))) (ite (= #b1 (bvand inst_v (ite (= #b00 ((_ extract 1 0) inst)) #b1 #b0))) (bvadd (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val $e7)) (ite (= #b00 $e13) (ite $e9 reg3 (ite $e10 reg2 (ite $e11 reg1 (ite $e12 reg0 #b00000000)))) (ite (= #b01 $e13) ex_val $e7))) (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0)))))))))))))))
| RTL_registers[3]    | (let (($e1 ((_ extract 1 0) inst))) (let (($e2 ((_ extract 3 2) inst))) (let (($e3 (= #b11 $e2))) (let (($e4 (= #b10 $e2))) (let (($e5 (= #b01 $e2))) (let (($e6 (= #b00 $e2))) (let (($e7 (ite $e3 s3 (ite $e4 s2 (ite $e5 s1 (ite $e6 s0 #b00)))))) (let (($e8 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e9 ((_ extract 5 4) inst))) (let (($e10 (= #b11 $e9))) (let (($e11 (= #b10 $e9))) (let (($e12 (= #b01 $e9))) (let (($e13 (= #b00 $e9))) (let (($e14 (ite $e10 s3 (ite $e11 s2 (ite $e12 s1 (ite $e13 s0 #b00)))))) (ite (= #b1 (bvand inst_v (ite (and (not (= #b10 $e1)) (= #b11 $e1) (not (= #b01 $e1)) (not (= #b00 $e1))) #b1 #b0))) (bvadd (ite (= #b00 $e7) (ite $e3 reg3 (ite $e4 reg2 (ite $e5 reg1 (ite $e6 reg0 #b00000000)))) (ite (= #b01 $e7) ex_val $e8)) (ite (= #b00 $e14) (ite $e10 reg3 (ite $e11 reg2 (ite $e12 reg1 (ite $e13 reg0 #b00000000)))) (ite (= #b01 $e14) ex_val $e8))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3))))))))))))))))
>> [[] ptr: 0]  new state!
=============================
Finish!
Get #state: 1
number of state wb-finish: 1-> 1
--------------------------------
| sv                  | value               
--------------------------------
| RTL_registers[1]    | (let (($e1 ((_ extract 1 0) inst))) (let (($e2 ((_ extract 3 2) inst))) (let (($e3 (= #b11 $e2))) (let (($e4 (= #b10 $e2))) (let (($e5 (= #b01 $e2))) (let (($e6 (= #b00 $e2))) (let (($e7 (ite $e3 s3 (ite $e4 s2 (ite $e5 s1 (ite $e6 s0 #b00)))))) (let (($e8 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e9 ((_ extract 5 4) inst))) (let (($e10 (= #b11 $e9))) (let (($e11 (= #b10 $e9))) (let (($e12 (= #b01 $e9))) (let (($e13 (= #b00 $e9))) (let (($e14 (ite $e10 s3 (ite $e11 s2 (ite $e12 s1 (ite $e13 s0 #b00)))))) (ite (= #b1 (bvand inst_v (ite (and (= #b01 $e1) (not (= #b00 $e1))) #b1 #b0))) (bvadd (ite (= #b00 $e7) (ite $e3 reg3 (ite $e4 reg2 (ite $e5 reg1 (ite $e6 reg0 #b00000000)))) (ite (= #b01 $e7) ex_val $e8)) (ite (= #b00 $e14) (ite $e10 reg3 (ite $e11 reg2 (ite $e12 reg1 (ite $e13 reg0 #b00000000)))) (ite (= #b01 $e14) ex_val $e8))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1))))))))))))))))
| RTL_registers[2]    | (let (($e1 ((_ extract 1 0) inst))) (let (($e2 ((_ extract 3 2) inst))) (let (($e3 (= #b11 $e2))) (let (($e4 (= #b10 $e2))) (let (($e5 (= #b01 $e2))) (let (($e6 (= #b00 $e2))) (let (($e7 (ite $e3 s3 (ite $e4 s2 (ite $e5 s1 (ite $e6 s0 #b00)))))) (let (($e8 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e9 ((_ extract 5 4) inst))) (let (($e10 (= #b11 $e9))) (let (($e11 (= #b10 $e9))) (let (($e12 (= #b01 $e9))) (let (($e13 (= #b00 $e9))) (let (($e14 (ite $e10 s3 (ite $e11 s2 (ite $e12 s1 (ite $e13 s0 #b00)))))) (ite (= #b1 (bvand inst_v (ite (and (= #b10 $e1) (not (= #b01 $e1)) (not (= #b00 $e1))) #b1 #b0))) (bvadd (ite (= #b00 $e7) (ite $e3 reg3 (ite $e4 reg2 (ite $e5 reg1 (ite $e6 reg0 #b00000000)))) (ite (= #b01 $e7) ex_val $e8)) (ite (= #b00 $e14) (ite $e10 reg3 (ite $e11 reg2 (ite $e12 reg1 (ite $e13 reg0 #b00000000)))) (ite (= #b01 $e14) ex_val $e8))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2))))))))))))))))
| RTL_registers[0]    | (let (($e1 ((_ extract 3 2) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (let (($e7 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e8 ((_ extract 5 4) inst))) (let (($e9 (= #b11 $e8))) (let (($e10 (= #b10 $e8))) (let (($e11 (= #b01 $e8))) (let (($e12 (= #b00 $e8))) (let (($e13 (ite $e9 s3 (ite $e10 s2 (ite $e11 s1 (ite $e12 s0 #b00)))))) (ite (= #b1 (bvand inst_v (ite (= #b00 ((_ extract 1 0) inst)) #b1 #b0))) (bvadd (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val $e7)) (ite (= #b00 $e13) (ite $e9 reg3 (ite $e10 reg2 (ite $e11 reg1 (ite $e12 reg0 #b00000000)))) (ite (= #b01 $e13) ex_val $e7))) (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0)))))))))))))))
| RTL_registers[3]    | (let (($e1 ((_ extract 1 0) inst))) (let (($e2 ((_ extract 3 2) inst))) (let (($e3 (= #b11 $e2))) (let (($e4 (= #b10 $e2))) (let (($e5 (= #b01 $e2))) (let (($e6 (= #b00 $e2))) (let (($e7 (ite $e3 s3 (ite $e4 s2 (ite $e5 s1 (ite $e6 s0 #b00)))))) (let (($e8 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e9 ((_ extract 5 4) inst))) (let (($e10 (= #b11 $e9))) (let (($e11 (= #b10 $e9))) (let (($e12 (= #b01 $e9))) (let (($e13 (= #b00 $e9))) (let (($e14 (ite $e10 s3 (ite $e11 s2 (ite $e12 s1 (ite $e13 s0 #b00)))))) (ite (= #b1 (bvand inst_v (ite (and (not (= #b10 $e1)) (= #b11 $e1) (not (= #b01 $e1)) (not (= #b00 $e1))) #b1 #b0))) (bvadd (ite (= #b00 $e7) (ite $e3 reg3 (ite $e4 reg2 (ite $e5 reg1 (ite $e6 reg0 #b00000000)))) (ite (= #b01 $e7) ex_val $e8)) (ite (= #b00 $e14) (ite $e10 reg3 (ite $e11 reg2 (ite $e12 reg1 (ite $e13 reg0 #b00000000)))) (ite (= #b01 $e14) ex_val $e8))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3))))))))))))))))
>> [[] ptr: 0]  new state!
=============================
Finish!
Get #state: 1
number of state wb-finish: 1-> 1
--------------------------------
| sv                  | value               
--------------------------------
| RTL_registers[1]    | (let (($e1 ((_ extract 1 0) inst))) (let (($e2 ((_ extract 3 2) inst))) (let (($e3 (= #b11 $e2))) (let (($e4 (= #b10 $e2))) (let (($e5 (= #b01 $e2))) (let (($e6 (= #b00 $e2))) (let (($e7 (ite $e3 s3 (ite $e4 s2 (ite $e5 s1 (ite $e6 s0 #b00)))))) (let (($e8 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e9 ((_ extract 5 4) inst))) (let (($e10 (= #b11 $e9))) (let (($e11 (= #b10 $e9))) (let (($e12 (= #b01 $e9))) (let (($e13 (= #b00 $e9))) (let (($e14 (ite $e10 s3 (ite $e11 s2 (ite $e12 s1 (ite $e13 s0 #b00)))))) (ite (= #b1 (bvand inst_v (ite (and (= #b01 $e1) (not (= #b00 $e1))) #b1 #b0))) (bvadd (ite (= #b00 $e7) (ite $e3 reg3 (ite $e4 reg2 (ite $e5 reg1 (ite $e6 reg0 #b00000000)))) (ite (= #b01 $e7) ex_val $e8)) (ite (= #b00 $e14) (ite $e10 reg3 (ite $e11 reg2 (ite $e12 reg1 (ite $e13 reg0 #b00000000)))) (ite (= #b01 $e14) ex_val $e8))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1))))))))))))))))
| RTL_registers[2]    | (let (($e1 ((_ extract 1 0) inst))) (let (($e2 ((_ extract 3 2) inst))) (let (($e3 (= #b11 $e2))) (let (($e4 (= #b10 $e2))) (let (($e5 (= #b01 $e2))) (let (($e6 (= #b00 $e2))) (let (($e7 (ite $e3 s3 (ite $e4 s2 (ite $e5 s1 (ite $e6 s0 #b00)))))) (let (($e8 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e9 ((_ extract 5 4) inst))) (let (($e10 (= #b11 $e9))) (let (($e11 (= #b10 $e9))) (let (($e12 (= #b01 $e9))) (let (($e13 (= #b00 $e9))) (let (($e14 (ite $e10 s3 (ite $e11 s2 (ite $e12 s1 (ite $e13 s0 #b00)))))) (ite (= #b1 (bvand inst_v (ite (and (= #b10 $e1) (not (= #b01 $e1)) (not (= #b00 $e1))) #b1 #b0))) (bvadd (ite (= #b00 $e7) (ite $e3 reg3 (ite $e4 reg2 (ite $e5 reg1 (ite $e6 reg0 #b00000000)))) (ite (= #b01 $e7) ex_val $e8)) (ite (= #b00 $e14) (ite $e10 reg3 (ite $e11 reg2 (ite $e12 reg1 (ite $e13 reg0 #b00000000)))) (ite (= #b01 $e14) ex_val $e8))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2))))))))))))))))
| RTL_registers[0]    | (let (($e1 ((_ extract 3 2) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (let (($e7 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e8 ((_ extract 5 4) inst))) (let (($e9 (= #b11 $e8))) (let (($e10 (= #b10 $e8))) (let (($e11 (= #b01 $e8))) (let (($e12 (= #b00 $e8))) (let (($e13 (ite $e9 s3 (ite $e10 s2 (ite $e11 s1 (ite $e12 s0 #b00)))))) (ite (= #b1 (bvand inst_v (ite (= #b00 ((_ extract 1 0) inst)) #b1 #b0))) (bvadd (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val $e7)) (ite (= #b00 $e13) (ite $e9 reg3 (ite $e10 reg2 (ite $e11 reg1 (ite $e12 reg0 #b00000000)))) (ite (= #b01 $e13) ex_val $e7))) (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0)))))))))))))))
| RTL_registers[3]    | (let (($e1 ((_ extract 1 0) inst))) (let (($e2 ((_ extract 3 2) inst))) (let (($e3 (= #b11 $e2))) (let (($e4 (= #b10 $e2))) (let (($e5 (= #b01 $e2))) (let (($e6 (= #b00 $e2))) (let (($e7 (ite $e3 s3 (ite $e4 s2 (ite $e5 s1 (ite $e6 s0 #b00)))))) (let (($e8 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e9 ((_ extract 5 4) inst))) (let (($e10 (= #b11 $e9))) (let (($e11 (= #b10 $e9))) (let (($e12 (= #b01 $e9))) (let (($e13 (= #b00 $e9))) (let (($e14 (ite $e10 s3 (ite $e11 s2 (ite $e12 s1 (ite $e13 s0 #b00)))))) (ite (= #b1 (bvand inst_v (ite (and (not (= #b10 $e1)) (= #b11 $e1) (not (= #b01 $e1)) (not (= #b00 $e1))) #b1 #b0))) (bvadd (ite (= #b00 $e7) (ite $e3 reg3 (ite $e4 reg2 (ite $e5 reg1 (ite $e6 reg0 #b00000000)))) (ite (= #b01 $e7) ex_val $e8)) (ite (= #b00 $e14) (ite $e10 reg3 (ite $e11 reg2 (ite $e12 reg1 (ite $e13 reg0 #b00000000)))) (ite (= #b01 $e14) ex_val $e8))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3))))))))))))))))
>> [[] ptr: 0]  new state!
=============================
Finish!
Get #state: 1
number of state wb-finish: 1-> 1
--------------------------------
| sv                  | value               
--------------------------------
| RTL_registers[1]    | (let (($e1 ((_ extract 1 0) inst))) (let (($e2 ((_ extract 3 2) inst))) (let (($e3 (= #b11 $e2))) (let (($e4 (= #b10 $e2))) (let (($e5 (= #b01 $e2))) (let (($e6 (= #b00 $e2))) (let (($e7 (ite $e3 s3 (ite $e4 s2 (ite $e5 s1 (ite $e6 s0 #b00)))))) (let (($e8 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e9 ((_ extract 5 4) inst))) (let (($e10 (= #b11 $e9))) (let (($e11 (= #b10 $e9))) (let (($e12 (= #b01 $e9))) (let (($e13 (= #b00 $e9))) (let (($e14 (ite $e10 s3 (ite $e11 s2 (ite $e12 s1 (ite $e13 s0 #b00)))))) (ite (= #b1 (bvand v1 (ite (and (= #b01 $e1) (not (= #b00 $e1))) #b1 #b0))) (bvadd (ite (= #b00 $e7) (ite $e3 reg3 (ite $e4 reg2 (ite $e5 reg1 (ite $e6 reg0 #b00000000)))) (ite (= #b01 $e7) ex_val $e8)) (ite (= #b00 $e14) (ite $e10 reg3 (ite $e11 reg2 (ite $e12 reg1 (ite $e13 reg0 #b00000000)))) (ite (= #b01 $e14) ex_val $e8))) (ite (= #b1 (bvand (bvand w1 v1) (ite (and (= #b01 rd1) (not (= #b00 rd1))) #b1 #b0))) $e8 (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1)))))))))))))))))
| RTL_registers[2]    | (let (($e1 ((_ extract 1 0) inst))) (let (($e2 ((_ extract 3 2) inst))) (let (($e3 (= #b11 $e2))) (let (($e4 (= #b10 $e2))) (let (($e5 (= #b01 $e2))) (let (($e6 (= #b00 $e2))) (let (($e7 (ite $e3 s3 (ite $e4 s2 (ite $e5 s1 (ite $e6 s0 #b00)))))) (let (($e8 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e9 ((_ extract 5 4) inst))) (let (($e10 (= #b11 $e9))) (let (($e11 (= #b10 $e9))) (let (($e12 (= #b01 $e9))) (let (($e13 (= #b00 $e9))) (let (($e14 (ite $e10 s3 (ite $e11 s2 (ite $e12 s1 (ite $e13 s0 #b00)))))) (ite (= #b1 (bvand v1 (ite (and (= #b10 $e1) (not (= #b01 $e1)) (not (= #b00 $e1))) #b1 #b0))) (bvadd (ite (= #b00 $e7) (ite $e3 reg3 (ite $e4 reg2 (ite $e5 reg1 (ite $e6 reg0 #b00000000)))) (ite (= #b01 $e7) ex_val $e8)) (ite (= #b00 $e14) (ite $e10 reg3 (ite $e11 reg2 (ite $e12 reg1 (ite $e13 reg0 #b00000000)))) (ite (= #b01 $e14) ex_val $e8))) (ite (= #b1 (bvand (bvand w1 v1) (ite (and (= #b10 rd1) (not (= #b01 rd1)) (not (= #b00 rd1))) #b1 #b0))) $e8 (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2)))))))))))))))))
| RTL_registers[0]    | (let (($e1 ((_ extract 3 2) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (let (($e7 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e8 ((_ extract 5 4) inst))) (let (($e9 (= #b11 $e8))) (let (($e10 (= #b10 $e8))) (let (($e11 (= #b01 $e8))) (let (($e12 (= #b00 $e8))) (let (($e13 (ite $e9 s3 (ite $e10 s2 (ite $e11 s1 (ite $e12 s0 #b00)))))) (ite (= #b1 (bvand v1 (ite (= #b00 ((_ extract 1 0) inst)) #b1 #b0))) (bvadd (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val $e7)) (ite (= #b00 $e13) (ite $e9 reg3 (ite $e10 reg2 (ite $e11 reg1 (ite $e12 reg0 #b00000000)))) (ite (= #b01 $e13) ex_val $e7))) (ite (= #b1 (bvand (bvand w1 v1) (ite (= #b00 rd1) #b1 #b0))) $e7 (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0))))))))))))))))
| RTL_registers[3]    | (let (($e1 ((_ extract 1 0) inst))) (let (($e2 ((_ extract 3 2) inst))) (let (($e3 (= #b11 $e2))) (let (($e4 (= #b10 $e2))) (let (($e5 (= #b01 $e2))) (let (($e6 (= #b00 $e2))) (let (($e7 (ite $e3 s3 (ite $e4 s2 (ite $e5 s1 (ite $e6 s0 #b00)))))) (let (($e8 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e9 ((_ extract 5 4) inst))) (let (($e10 (= #b11 $e9))) (let (($e11 (= #b10 $e9))) (let (($e12 (= #b01 $e9))) (let (($e13 (= #b00 $e9))) (let (($e14 (ite $e10 s3 (ite $e11 s2 (ite $e12 s1 (ite $e13 s0 #b00)))))) (ite (= #b1 (bvand v1 (ite (and (not (= #b10 $e1)) (= #b11 $e1) (not (= #b01 $e1)) (not (= #b00 $e1))) #b1 #b0))) (bvadd (ite (= #b00 $e7) (ite $e3 reg3 (ite $e4 reg2 (ite $e5 reg1 (ite $e6 reg0 #b00000000)))) (ite (= #b01 $e7) ex_val $e8)) (ite (= #b00 $e14) (ite $e10 reg3 (ite $e11 reg2 (ite $e12 reg1 (ite $e13 reg0 #b00000000)))) (ite (= #b01 $e14) ex_val $e8))) (ite (= #b1 (bvand (bvand w1 v1) (ite (and (= #b11 rd1) (not (= #b10 rd1)) (not (= #b01 rd1)) (not (= #b00 rd1))) #b1 #b0))) $e8 (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3)))))))))))))))))
>> [[] ptr: 0]  new state!
=============================
Finish!
Get #state: 1
number of state wb-finish: 1-> 1
--------------------------------
| sv                  | value               
--------------------------------
| RTL_registers[1]    | (let (($e1 ((_ extract 1 0) inst))) (let (($e2 ((_ extract 3 2) inst))) (let (($e3 (= #b11 $e2))) (let (($e4 (= #b10 $e2))) (let (($e5 (= #b01 $e2))) (let (($e6 (= #b00 $e2))) (let (($e7 (ite $e3 s3 (ite $e4 s2 (ite $e5 s1 (ite $e6 s0 #b00)))))) (let (($e8 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e9 ((_ extract 5 4) inst))) (let (($e10 (= #b11 $e9))) (let (($e11 (= #b10 $e9))) (let (($e12 (= #b01 $e9))) (let (($e13 (= #b00 $e9))) (let (($e14 (ite $e10 s3 (ite $e11 s2 (ite $e12 s1 (ite $e13 s0 #b00)))))) (ite (= #b1 (bvand v1 (ite (and (= #b01 $e1) (not (= #b00 $e1))) #b1 #b0))) (bvadd (ite (= #b00 $e7) (ite $e3 reg3 (ite $e4 reg2 (ite $e5 reg1 (ite $e6 reg0 #b00000000)))) (ite (= #b01 $e7) ex_val $e8)) (ite (= #b00 $e14) (ite $e10 reg3 (ite $e11 reg2 (ite $e12 reg1 (ite $e13 reg0 #b00000000)))) (ite (= #b01 $e14) ex_val $e8))) (ite (= #b1 (bvand (bvand w1 v1) (ite (and (= #b01 rd1) (not (= #b00 rd1))) #b1 #b0))) $e8 (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1)))))))))))))))))
| RTL_registers[2]    | (let (($e1 ((_ extract 1 0) inst))) (let (($e2 ((_ extract 3 2) inst))) (let (($e3 (= #b11 $e2))) (let (($e4 (= #b10 $e2))) (let (($e5 (= #b01 $e2))) (let (($e6 (= #b00 $e2))) (let (($e7 (ite $e3 s3 (ite $e4 s2 (ite $e5 s1 (ite $e6 s0 #b00)))))) (let (($e8 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e9 ((_ extract 5 4) inst))) (let (($e10 (= #b11 $e9))) (let (($e11 (= #b10 $e9))) (let (($e12 (= #b01 $e9))) (let (($e13 (= #b00 $e9))) (let (($e14 (ite $e10 s3 (ite $e11 s2 (ite $e12 s1 (ite $e13 s0 #b00)))))) (ite (= #b1 (bvand v1 (ite (and (= #b10 $e1) (not (= #b01 $e1)) (not (= #b00 $e1))) #b1 #b0))) (bvadd (ite (= #b00 $e7) (ite $e3 reg3 (ite $e4 reg2 (ite $e5 reg1 (ite $e6 reg0 #b00000000)))) (ite (= #b01 $e7) ex_val $e8)) (ite (= #b00 $e14) (ite $e10 reg3 (ite $e11 reg2 (ite $e12 reg1 (ite $e13 reg0 #b00000000)))) (ite (= #b01 $e14) ex_val $e8))) (ite (= #b1 (bvand (bvand w1 v1) (ite (and (= #b10 rd1) (not (= #b01 rd1)) (not (= #b00 rd1))) #b1 #b0))) $e8 (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2)))))))))))))))))
| RTL_registers[0]    | (let (($e1 ((_ extract 3 2) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (let (($e7 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e8 ((_ extract 5 4) inst))) (let (($e9 (= #b11 $e8))) (let (($e10 (= #b10 $e8))) (let (($e11 (= #b01 $e8))) (let (($e12 (= #b00 $e8))) (let (($e13 (ite $e9 s3 (ite $e10 s2 (ite $e11 s1 (ite $e12 s0 #b00)))))) (ite (= #b1 (bvand v1 (ite (= #b00 ((_ extract 1 0) inst)) #b1 #b0))) (bvadd (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val $e7)) (ite (= #b00 $e13) (ite $e9 reg3 (ite $e10 reg2 (ite $e11 reg1 (ite $e12 reg0 #b00000000)))) (ite (= #b01 $e13) ex_val $e7))) (ite (= #b1 (bvand (bvand w1 v1) (ite (= #b00 rd1) #b1 #b0))) $e7 (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0))))))))))))))))
| RTL_registers[3]    | (let (($e1 ((_ extract 1 0) inst))) (let (($e2 ((_ extract 3 2) inst))) (let (($e3 (= #b11 $e2))) (let (($e4 (= #b10 $e2))) (let (($e5 (= #b01 $e2))) (let (($e6 (= #b00 $e2))) (let (($e7 (ite $e3 s3 (ite $e4 s2 (ite $e5 s1 (ite $e6 s0 #b00)))))) (let (($e8 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e9 ((_ extract 5 4) inst))) (let (($e10 (= #b11 $e9))) (let (($e11 (= #b10 $e9))) (let (($e12 (= #b01 $e9))) (let (($e13 (= #b00 $e9))) (let (($e14 (ite $e10 s3 (ite $e11 s2 (ite $e12 s1 (ite $e13 s0 #b00)))))) (ite (= #b1 (bvand v1 (ite (and (not (= #b10 $e1)) (= #b11 $e1) (not (= #b01 $e1)) (not (= #b00 $e1))) #b1 #b0))) (bvadd (ite (= #b00 $e7) (ite $e3 reg3 (ite $e4 reg2 (ite $e5 reg1 (ite $e6 reg0 #b00000000)))) (ite (= #b01 $e7) ex_val $e8)) (ite (= #b00 $e14) (ite $e10 reg3 (ite $e11 reg2 (ite $e12 reg1 (ite $e13 reg0 #b00000000)))) (ite (= #b01 $e14) ex_val $e8))) (ite (= #b1 (bvand (bvand w1 v1) (ite (and (= #b11 rd1) (not (= #b10 rd1)) (not (= #b01 rd1)) (not (= #b00 rd1))) #b1 #b0))) $e8 (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3)))))))))))))))))
number of state wb-finish in total: 5 --> 5
Program running time: 48 (s)
