(define-fun FunNew ((RTL_ex_wb_reg_wen (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) RTL_ex_wb_reg_wen RTL_ex_wb_reg_wen))
(define-fun FunNew ((v0 (_ BitVec 1)) (w1 (_ BitVec 1)) (v1 (_ BitVec 1)) ) (_ BitVec 1) (bvnot (bvand (bvnot v1) (bvnot (bvand w1 (bvnot v0))))))
(define-fun FunNew ((RTL_registers[1] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[1] RTL_registers[1]))
(define-fun FunNew ((reg1 (_ BitVec 8)) (rd2 (_ BitVec 8)) (w2 (_ BitVec 8)) (ex_val (_ BitVec 8)) (v2 (_ BitVec 8)) (oper1 (_ BitVec 8)) (op (_ BitVec 8)) (oper2 (_ BitVec 8)) (rd1 (_ BitVec 8)) (v0 (_ BitVec 8)) (w1 (_ BitVec 8)) (v1 (_ BitVec 8)) ) (_ BitVec 8) (ite (= #b1 (bvand (bvand v1 (bvand w1 (bvnot v0))) (ite (and (= #b01 rd1) (not (= #b00 rd1))) #b1 #b0))) (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1)))
(define-fun FunNew ((RTL_ex_wb_rd (_ BitVec 2))) (_ BitVec 2) (ite (= #b1 #b1) RTL_ex_wb_rd RTL_ex_wb_rd))
(define-fun FunNew ((inst (_ BitVec 2)) ) (_ BitVec 2) ((_ extract 1 0) inst))
(define-fun FunNew ((RTL_registers[0] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[0] RTL_registers[0]))
(define-fun FunNew ((rd2 (_ BitVec 8)) (w2 (_ BitVec 8)) (reg0 (_ BitVec 8)) (ex_val (_ BitVec 8)) (v2 (_ BitVec 8)) (oper1 (_ BitVec 8)) (op (_ BitVec 8)) (v0 (_ BitVec 8)) (w1 (_ BitVec 8)) (v1 (_ BitVec 8)) (oper2 (_ BitVec 8)) (rd1 (_ BitVec 8)) ) (_ BitVec 8) (ite (= #b1 (bvand (ite (= #b00 rd1) #b1 #b0) (bvand v1 (bvand w1 (bvnot v0))))) (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))) (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0)))
(define-fun FunNew ((RTL_ex_wb_valid (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) RTL_ex_wb_valid RTL_ex_wb_valid))
(define-fun FunNew ((v1 (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) v1 v1))
(define-fun FunNew ((RTL_registers[3] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[3] RTL_registers[3]))
(define-fun FunNew ((reg3 (_ BitVec 8)) (rd2 (_ BitVec 8)) (w2 (_ BitVec 8)) (ex_val (_ BitVec 8)) (v2 (_ BitVec 8)) (oper1 (_ BitVec 8)) (op (_ BitVec 8)) (oper2 (_ BitVec 8)) (rd1 (_ BitVec 8)) (v0 (_ BitVec 8)) (w1 (_ BitVec 8)) (v1 (_ BitVec 8)) ) (_ BitVec 8) (ite (= #b1 (bvand (bvand v1 (bvand w1 (bvnot v0))) (ite (and (= #b11 rd1) (not (= #b10 rd1)) (not (= #b01 rd1)) (not (= #b00 rd1))) #b1 #b0))) (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3)))
(define-fun FunNew ((RTL_ex_wb_val (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_ex_wb_val RTL_ex_wb_val))
(define-fun FunNew ((oper2 (_ BitVec 8)) (oper1 (_ BitVec 8)) (op (_ BitVec 8)) (rd2 (_ BitVec 8)) (s2 (_ BitVec 8)) (s3 (_ BitVec 8)) (v2 (_ BitVec 8)) (ex_val (_ BitVec 8)) (reg0 (_ BitVec 8)) (s1 (_ BitVec 8)) (inst (_ BitVec 8)) (s0 (_ BitVec 8)) (w2 (_ BitVec 8)) (reg2 (_ BitVec 8)) (reg3 (_ BitVec 8)) (reg1 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 (bvand w2 v2))) (let (($e2 (= #b00 rd2))) (let (($e3 (= #b01 rd2))) (let (($e4 (= #b10 rd2))) (let (($e5 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e6 (ite (= #b1 (bvand $e1 (ite $e2 #b1 #b0))) ex_val reg0))) (let (($e7 (ite (= #b1 (bvand $e1 (ite (and $e3 (not $e2)) #b1 #b0))) ex_val reg1))) (let (($e8 (ite (= #b1 (bvand $e1 (ite (and $e4 (not $e3) (not $e2)) #b1 #b0))) ex_val reg2))) (let (($e9 (ite (= #b1 (bvand $e1 (ite (and (= #b11 rd2) (not $e4) (not $e3) (not $e2)) #b1 #b0))) ex_val reg3))) (let (($e10 (concat #b0 ((_ extract 1 1) s3)))) (let (($e11 (concat #b0 ((_ extract 1 1) s1)))) (let (($e12 (concat #b0 ((_ extract 1 1) s0)))) (let (($e13 (concat #b0 ((_ extract 1 1) s2)))) (let (($e14 ((_ extract 5 4) inst))) (let (($e15 (= #b11 $e14))) (let (($e16 (= #b10 $e14))) (let (($e17 (= #b01 $e14))) (let (($e18 (= #b00 $e14))) (let (($e19 ((_ extract 3 2) inst))) (let (($e20 (= #b11 $e19))) (let (($e21 (= #b10 $e19))) (let (($e22 (= #b01 $e19))) (let (($e23 (= #b00 $e19))) (bvadd (ite (= #b00 (ite $e15 $e10 (ite $e16 $e13 (ite $e17 $e11 (ite $e18 $e12 #b00))))) (ite $e15 $e9 (ite $e16 $e8 (ite $e17 $e7 (ite $e18 $e6 #b00000000)))) $e5) (ite (= #b00 (ite $e20 $e10 (ite $e21 $e13 (ite $e22 $e11 (ite $e23 $e12 #b00))))) (ite $e20 $e9 (ite $e21 $e8 (ite $e22 $e7 (ite $e23 $e6 #b00000000)))) $e5))))))))))))))))))))))))))
(define-fun FunNew ((RTL_registers[2] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[2] RTL_registers[2]))
(define-fun FunNew ((reg2 (_ BitVec 8)) (rd2 (_ BitVec 8)) (w2 (_ BitVec 8)) (ex_val (_ BitVec 8)) (v2 (_ BitVec 8)) (oper1 (_ BitVec 8)) (op (_ BitVec 8)) (oper2 (_ BitVec 8)) (rd1 (_ BitVec 8)) (v0 (_ BitVec 8)) (w1 (_ BitVec 8)) (v1 (_ BitVec 8)) ) (_ BitVec 8) (ite (= #b1 (bvand (bvand v1 (bvand w1 (bvnot v0))) (ite (and (= #b10 rd1) (not (= #b01 rd1)) (not (= #b00 rd1))) #b1 #b0))) (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2)))
