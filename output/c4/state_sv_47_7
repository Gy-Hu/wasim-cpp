(define-fun FunNew ((RTL_registers[0] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[0] RTL_registers[0]))
(define-fun FunNew ((s1 (_ BitVec 8)) (s2 (_ BitVec 8)) (reg0 (_ BitVec 8)) (reg2 (_ BitVec 8)) (reg1 (_ BitVec 8)) (reg3 (_ BitVec 8)) (s0 (_ BitVec 8)) (inst (_ BitVec 8)) (w2 (_ BitVec 8)) (w1 (_ BitVec 8)) (v0 (_ BitVec 8)) (rd1 (_ BitVec 8)) (inst_id (_ BitVec 8)) (oper2 (_ BitVec 8)) (op (_ BitVec 8)) (oper1 (_ BitVec 8)) (s3 (_ BitVec 8)) (v2 (_ BitVec 8)) (v1 (_ BitVec 8)) (ex_val (_ BitVec 8)) (rd2 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 (= #b00 rd1))) (let (($e2 (bvand w2 v2))) (let (($e3 (= #b00 rd2))) (let (($e4 (= #b01 rd1))) (let (($e5 (= #b01 rd2))) (let (($e6 (= #b10 rd1))) (let (($e7 (= #b10 rd2))) (let (($e8 ((_ extract 7 6) inst_id))) (let (($e9 (= #b10 $e8))) (let (($e10 (= #b01 $e8))) (let (($e11 (= #b11 $e8))) (let (($e12 (and (not $e10) (not $e9) (not $e11)))) (let (($e13 (bvand v0 (bvnot (ite $e12 #b1 #b0))))) (let (($e14 ((_ extract 1 0) inst_id))) (let (($e15 (= #b01 $e14))) (let (($e16 (= #b00 $e14))) (let (($e17 (= #b10 $e14))) (let (($e18 (= #b11 $e14))) (let (($e19 (concat #b0000 ((_ extract 5 2) inst_id)))) (let (($e20 ((_ extract 5 4) inst_id))) (let (($e21 (= #b11 $e20))) (let (($e22 (= #b10 $e20))) (let (($e23 (= #b01 $e20))) (let (($e24 (= #b00 $e20))) (let (($e25 (ite $e21 s3 (ite $e22 s2 (ite $e23 s1 (ite $e24 s0 #b00)))))) (let (($e26 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e27 (ite $e9 $e19 (ite (= #b00 $e25) (ite $e21 reg3 (ite $e22 reg2 (ite $e23 reg1 (ite $e24 reg0 #b00000000)))) (ite (= #b01 $e25) ex_val $e26))))) (let (($e28 ((_ extract 3 2) inst_id))) (let (($e29 (= #b11 $e28))) (let (($e30 (= #b10 $e28))) (let (($e31 (= #b01 $e28))) (let (($e32 (= #b00 $e28))) (let (($e33 (ite $e29 s3 (ite $e30 s2 (ite $e31 s1 (ite $e32 s0 #b00)))))) (let (($e34 (ite (= #b00 $e33) (ite $e29 reg3 (ite $e30 reg2 (ite $e31 reg1 (ite $e32 reg0 #b00000000)))) (ite (= #b01 $e33) ex_val $e26)))) (let (($e35 (ite (= #b1 (bvand $e2 (ite $e3 #b1 #b0))) ex_val reg0))) (let (($e36 ((_ extract 7 6) inst))) (let (($e37 ((_ extract 5 4) inst))) (let (($e38 (= #b11 $e37))) (let (($e39 (= #b10 $e37))) (let (($e40 (= #b01 $e37))) (let (($e41 (= #b00 $e37))) (let (($e42 ((_ extract 3 2) inst))) (let (($e43 (= #b11 $e42))) (let (($e44 (= #b10 $e42))) (let (($e45 (= #b01 $e42))) (let (($e46 (= #b00 $e42))) (let (($e47 (ite (= #b1 (bvand w1 (ite $e1 #b1 #b0))) $e26 $e35))) (let (($e48 (ite (= #b1 (bvand w1 (ite (and $e4 (not $e1)) #b1 #b0))) $e26 (ite (= #b1 (bvand $e2 (ite (and $e5 (not $e3)) #b1 #b0))) ex_val reg1)))) (let (($e49 (ite (= #b1 (bvand w1 (ite (and $e6 (not $e4) (not $e1)) #b1 #b0))) $e26 (ite (= #b1 (bvand $e2 (ite (and $e7 (not $e5) (not $e3)) #b1 #b0))) ex_val reg2)))) (let (($e50 (ite (= #b1 (bvand w1 (ite (and (= #b11 rd1) (not $e6) (not $e4) (not $e1)) #b1 #b0))) $e26 (ite (= #b1 (bvand $e2 (ite (and (= #b11 rd2) (not $e7) (not $e5) (not $e3)) #b1 #b0))) ex_val reg3)))) (let (($e51 (ite $e10 (bvadd $e27 $e34) (ite $e9 $e19 (ite $e11 (bvnot (bvand $e27 $e34)) #b00000000))))) (let (($e52 (and $e16 (not $e12)))) (let (($e53 (and $e15 (not $e12)))) (let (($e54 (and $e17 (not $e12)))) (let (($e55 (and $e18 (not $e12)))) (let (($e56 (bvand (bvnot (bvand v1 (ite $e12 #b1 #b0))) (bvnot (bvand (bvnot w1) (bvnot v1)))))) (let (($e57 (bvand (concat #b0 (ite $e52 #b1 #b0)) (concat (bvand $e13 (ite $e16 #b1 #b0)) (ite $e52 #b1 #b0))))) (let (($e58 (bvand (concat #b0 (ite $e53 #b1 #b0)) (concat (bvand $e13 (ite $e15 #b1 #b0)) (ite $e53 #b1 #b0))))) (let (($e59 (bvand (concat #b0 (ite $e54 #b1 #b0)) (concat (bvand $e13 (ite $e17 #b1 #b0)) (ite $e54 #b1 #b0))))) (let (($e60 (bvand (concat #b0 (ite $e55 #b1 #b0)) (concat (bvand $e13 (ite $e18 #b1 #b0)) (ite $e55 #b1 #b0))))) (ite (= #b1 (bvand (ite (= #b00 ((_ extract 1 0) inst)) #b1 #b0) (bvand v1 (bvand (bvnot (bvand v1 (bvnot (bvand (bvnot (bvand v1 (ite (and (not (= #b01 $e36)) (not (= #b10 $e36)) (not (= #b11 $e36))) #b1 #b0))) (bvnot (bvand (bvnot v1) (ite $e12 #b1 #b0))))))) (bvnot (bvand (bvnot v1) (bvnot $e56))))))) (bvadd (ite (= #b00 (ite $e38 $e60 (ite $e39 $e59 (ite $e40 $e58 (ite $e41 $e57 #b00))))) (ite $e38 $e50 (ite $e39 $e49 (ite $e40 $e48 (ite $e41 $e47 #b00000000)))) $e51) (ite (= #b00 (ite $e43 $e60 (ite $e44 $e59 (ite $e45 $e58 (ite $e46 $e57 #b00))))) (ite $e43 $e50 (ite $e44 $e49 (ite $e45 $e48 (ite $e46 $e47 #b00000000)))) $e51)) (ite (= #b1 (bvand (ite $e16 #b1 #b0) (bvand v1 $e56))) $e51 (ite (= #b1 (bvand (bvand w1 v1) (ite $e1 #b1 #b0))) $e26 $e35))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(define-fun FunNew ((RTL_registers[3] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[3] RTL_registers[3]))
(define-fun FunNew ((s1 (_ BitVec 8)) (s2 (_ BitVec 8)) (reg0 (_ BitVec 8)) (reg2 (_ BitVec 8)) (reg1 (_ BitVec 8)) (reg3 (_ BitVec 8)) (s0 (_ BitVec 8)) (inst (_ BitVec 8)) (w2 (_ BitVec 8)) (w1 (_ BitVec 8)) (v0 (_ BitVec 8)) (rd1 (_ BitVec 8)) (inst_id (_ BitVec 8)) (oper2 (_ BitVec 8)) (op (_ BitVec 8)) (oper1 (_ BitVec 8)) (s3 (_ BitVec 8)) (v2 (_ BitVec 8)) (v1 (_ BitVec 8)) (ex_val (_ BitVec 8)) (rd2 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 (= #b00 rd1))) (let (($e2 (bvand w2 v2))) (let (($e3 (= #b00 rd2))) (let (($e4 (= #b01 rd1))) (let (($e5 (= #b01 rd2))) (let (($e6 (= #b10 rd1))) (let (($e7 (= #b10 rd2))) (let (($e8 ((_ extract 7 6) inst_id))) (let (($e9 (= #b10 $e8))) (let (($e10 (= #b01 $e8))) (let (($e11 (= #b11 $e8))) (let (($e12 (and (not $e10) (not $e9) (not $e11)))) (let (($e13 (bvand v0 (bvnot (ite $e12 #b1 #b0))))) (let (($e14 ((_ extract 1 0) inst_id))) (let (($e15 (= #b01 $e14))) (let (($e16 (= #b00 $e14))) (let (($e17 (= #b10 $e14))) (let (($e18 (= #b11 $e14))) (let (($e19 (concat #b0000 ((_ extract 5 2) inst_id)))) (let (($e20 ((_ extract 5 4) inst_id))) (let (($e21 (= #b11 $e20))) (let (($e22 (= #b10 $e20))) (let (($e23 (= #b01 $e20))) (let (($e24 (= #b00 $e20))) (let (($e25 (ite $e21 s3 (ite $e22 s2 (ite $e23 s1 (ite $e24 s0 #b00)))))) (let (($e26 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e27 (ite $e9 $e19 (ite (= #b00 $e25) (ite $e21 reg3 (ite $e22 reg2 (ite $e23 reg1 (ite $e24 reg0 #b00000000)))) (ite (= #b01 $e25) ex_val $e26))))) (let (($e28 ((_ extract 3 2) inst_id))) (let (($e29 (= #b11 $e28))) (let (($e30 (= #b10 $e28))) (let (($e31 (= #b01 $e28))) (let (($e32 (= #b00 $e28))) (let (($e33 (ite $e29 s3 (ite $e30 s2 (ite $e31 s1 (ite $e32 s0 #b00)))))) (let (($e34 (ite (= #b00 $e33) (ite $e29 reg3 (ite $e30 reg2 (ite $e31 reg1 (ite $e32 reg0 #b00000000)))) (ite (= #b01 $e33) ex_val $e26)))) (let (($e35 (ite (= #b1 (bvand $e2 (ite (and (= #b11 rd2) (not $e7) (not $e5) (not $e3)) #b1 #b0))) ex_val reg3))) (let (($e36 ((_ extract 7 6) inst))) (let (($e37 ((_ extract 1 0) inst))) (let (($e38 ((_ extract 5 4) inst))) (let (($e39 (= #b11 $e38))) (let (($e40 (= #b10 $e38))) (let (($e41 (= #b01 $e38))) (let (($e42 (= #b00 $e38))) (let (($e43 ((_ extract 3 2) inst))) (let (($e44 (= #b11 $e43))) (let (($e45 (= #b10 $e43))) (let (($e46 (= #b01 $e43))) (let (($e47 (= #b00 $e43))) (let (($e48 (and (= #b11 rd1) (not $e6) (not $e4) (not $e1)))) (let (($e49 (ite (= #b1 (bvand w1 (ite $e1 #b1 #b0))) $e26 (ite (= #b1 (bvand $e2 (ite $e3 #b1 #b0))) ex_val reg0)))) (let (($e50 (ite (= #b1 (bvand w1 (ite (and $e4 (not $e1)) #b1 #b0))) $e26 (ite (= #b1 (bvand $e2 (ite (and $e5 (not $e3)) #b1 #b0))) ex_val reg1)))) (let (($e51 (ite (= #b1 (bvand w1 (ite (and $e6 (not $e4) (not $e1)) #b1 #b0))) $e26 (ite (= #b1 (bvand $e2 (ite (and $e7 (not $e5) (not $e3)) #b1 #b0))) ex_val reg2)))) (let (($e52 (ite (= #b1 (bvand w1 (ite $e48 #b1 #b0))) $e26 $e35))) (let (($e53 (ite $e10 (bvadd $e27 $e34) (ite $e9 $e19 (ite $e11 (bvnot (bvand $e27 $e34)) #b00000000))))) (let (($e54 (and $e16 (not $e12)))) (let (($e55 (and $e15 (not $e12)))) (let (($e56 (and $e17 (not $e12)))) (let (($e57 (and $e18 (not $e12)))) (let (($e58 (bvand (bvnot (bvand v1 (ite $e12 #b1 #b0))) (bvnot (bvand (bvnot w1) (bvnot v1)))))) (let (($e59 (bvand (concat #b0 (ite $e54 #b1 #b0)) (concat (bvand $e13 (ite $e16 #b1 #b0)) (ite $e54 #b1 #b0))))) (let (($e60 (bvand (concat #b0 (ite $e55 #b1 #b0)) (concat (bvand $e13 (ite $e15 #b1 #b0)) (ite $e55 #b1 #b0))))) (let (($e61 (bvand (concat #b0 (ite $e56 #b1 #b0)) (concat (bvand $e13 (ite $e17 #b1 #b0)) (ite $e56 #b1 #b0))))) (let (($e62 (bvand (concat #b0 (ite $e57 #b1 #b0)) (concat (bvand $e13 (ite $e18 #b1 #b0)) (ite $e57 #b1 #b0))))) (ite (= #b1 (bvand (bvand v1 (bvand (bvnot (bvand v1 (bvnot (bvand (bvnot (bvand v1 (ite (and (not (= #b01 $e36)) (not (= #b10 $e36)) (not (= #b11 $e36))) #b1 #b0))) (bvnot (bvand (bvnot v1) (ite $e12 #b1 #b0))))))) (bvnot (bvand (bvnot v1) (bvnot $e58))))) (ite (and (= #b11 $e37) (not (= #b10 $e37)) (not (= #b01 $e37)) (not (= #b00 $e37))) #b1 #b0))) (bvadd (ite (= #b00 (ite $e39 $e62 (ite $e40 $e61 (ite $e41 $e60 (ite $e42 $e59 #b00))))) (ite $e39 $e52 (ite $e40 $e51 (ite $e41 $e50 (ite $e42 $e49 #b00000000)))) $e53) (ite (= #b00 (ite $e44 $e62 (ite $e45 $e61 (ite $e46 $e60 (ite $e47 $e59 #b00))))) (ite $e44 $e52 (ite $e45 $e51 (ite $e46 $e50 (ite $e47 $e49 #b00000000)))) $e53)) (ite (= #b1 (bvand (ite (and $e18 (not $e17) (not $e15) (not $e16)) #b1 #b0) (bvand v1 $e58))) $e53 (ite (= #b1 (bvand (bvand w1 v1) (ite $e48 #b1 #b0))) $e26 $e35))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(define-fun FunNew ((RTL_registers[2] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[2] RTL_registers[2]))
(define-fun FunNew ((s1 (_ BitVec 8)) (s2 (_ BitVec 8)) (reg0 (_ BitVec 8)) (reg2 (_ BitVec 8)) (reg1 (_ BitVec 8)) (reg3 (_ BitVec 8)) (s0 (_ BitVec 8)) (inst (_ BitVec 8)) (w2 (_ BitVec 8)) (w1 (_ BitVec 8)) (v0 (_ BitVec 8)) (rd1 (_ BitVec 8)) (inst_id (_ BitVec 8)) (oper2 (_ BitVec 8)) (op (_ BitVec 8)) (oper1 (_ BitVec 8)) (s3 (_ BitVec 8)) (v2 (_ BitVec 8)) (v1 (_ BitVec 8)) (ex_val (_ BitVec 8)) (rd2 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 (= #b00 rd1))) (let (($e2 (bvand w2 v2))) (let (($e3 (= #b00 rd2))) (let (($e4 (= #b01 rd1))) (let (($e5 (= #b01 rd2))) (let (($e6 (= #b10 rd1))) (let (($e7 (= #b10 rd2))) (let (($e8 ((_ extract 7 6) inst_id))) (let (($e9 (= #b10 $e8))) (let (($e10 (= #b01 $e8))) (let (($e11 (= #b11 $e8))) (let (($e12 (and (not $e10) (not $e9) (not $e11)))) (let (($e13 (bvand v0 (bvnot (ite $e12 #b1 #b0))))) (let (($e14 ((_ extract 1 0) inst_id))) (let (($e15 (= #b01 $e14))) (let (($e16 (= #b00 $e14))) (let (($e17 (= #b10 $e14))) (let (($e18 (= #b11 $e14))) (let (($e19 (concat #b0000 ((_ extract 5 2) inst_id)))) (let (($e20 ((_ extract 5 4) inst_id))) (let (($e21 (= #b11 $e20))) (let (($e22 (= #b10 $e20))) (let (($e23 (= #b01 $e20))) (let (($e24 (= #b00 $e20))) (let (($e25 (ite $e21 s3 (ite $e22 s2 (ite $e23 s1 (ite $e24 s0 #b00)))))) (let (($e26 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e27 (ite $e9 $e19 (ite (= #b00 $e25) (ite $e21 reg3 (ite $e22 reg2 (ite $e23 reg1 (ite $e24 reg0 #b00000000)))) (ite (= #b01 $e25) ex_val $e26))))) (let (($e28 ((_ extract 3 2) inst_id))) (let (($e29 (= #b11 $e28))) (let (($e30 (= #b10 $e28))) (let (($e31 (= #b01 $e28))) (let (($e32 (= #b00 $e28))) (let (($e33 (ite $e29 s3 (ite $e30 s2 (ite $e31 s1 (ite $e32 s0 #b00)))))) (let (($e34 (ite (= #b00 $e33) (ite $e29 reg3 (ite $e30 reg2 (ite $e31 reg1 (ite $e32 reg0 #b00000000)))) (ite (= #b01 $e33) ex_val $e26)))) (let (($e35 (ite (= #b1 (bvand $e2 (ite (and $e7 (not $e5) (not $e3)) #b1 #b0))) ex_val reg2))) (let (($e36 ((_ extract 7 6) inst))) (let (($e37 ((_ extract 1 0) inst))) (let (($e38 ((_ extract 5 4) inst))) (let (($e39 (= #b11 $e38))) (let (($e40 (= #b10 $e38))) (let (($e41 (= #b01 $e38))) (let (($e42 (= #b00 $e38))) (let (($e43 ((_ extract 3 2) inst))) (let (($e44 (= #b11 $e43))) (let (($e45 (= #b10 $e43))) (let (($e46 (= #b01 $e43))) (let (($e47 (= #b00 $e43))) (let (($e48 (and $e6 (not $e4) (not $e1)))) (let (($e49 (ite (= #b1 (bvand w1 (ite $e1 #b1 #b0))) $e26 (ite (= #b1 (bvand $e2 (ite $e3 #b1 #b0))) ex_val reg0)))) (let (($e50 (ite (= #b1 (bvand w1 (ite (and $e4 (not $e1)) #b1 #b0))) $e26 (ite (= #b1 (bvand $e2 (ite (and $e5 (not $e3)) #b1 #b0))) ex_val reg1)))) (let (($e51 (ite (= #b1 (bvand w1 (ite $e48 #b1 #b0))) $e26 $e35))) (let (($e52 (ite (= #b1 (bvand w1 (ite (and (= #b11 rd1) (not $e6) (not $e4) (not $e1)) #b1 #b0))) $e26 (ite (= #b1 (bvand $e2 (ite (and (= #b11 rd2) (not $e7) (not $e5) (not $e3)) #b1 #b0))) ex_val reg3)))) (let (($e53 (ite $e10 (bvadd $e27 $e34) (ite $e9 $e19 (ite $e11 (bvnot (bvand $e27 $e34)) #b00000000))))) (let (($e54 (and $e16 (not $e12)))) (let (($e55 (and $e15 (not $e12)))) (let (($e56 (and $e17 (not $e12)))) (let (($e57 (and $e18 (not $e12)))) (let (($e58 (bvand (bvnot (bvand v1 (ite $e12 #b1 #b0))) (bvnot (bvand (bvnot w1) (bvnot v1)))))) (let (($e59 (bvand (concat #b0 (ite $e54 #b1 #b0)) (concat (bvand $e13 (ite $e16 #b1 #b0)) (ite $e54 #b1 #b0))))) (let (($e60 (bvand (concat #b0 (ite $e55 #b1 #b0)) (concat (bvand $e13 (ite $e15 #b1 #b0)) (ite $e55 #b1 #b0))))) (let (($e61 (bvand (concat #b0 (ite $e56 #b1 #b0)) (concat (bvand $e13 (ite $e17 #b1 #b0)) (ite $e56 #b1 #b0))))) (let (($e62 (bvand (concat #b0 (ite $e57 #b1 #b0)) (concat (bvand $e13 (ite $e18 #b1 #b0)) (ite $e57 #b1 #b0))))) (ite (= #b1 (bvand (bvand v1 (bvand (bvnot (bvand v1 (bvnot (bvand (bvnot (bvand v1 (ite (and (not (= #b01 $e36)) (not (= #b10 $e36)) (not (= #b11 $e36))) #b1 #b0))) (bvnot (bvand (bvnot v1) (ite $e12 #b1 #b0))))))) (bvnot (bvand (bvnot v1) (bvnot $e58))))) (ite (and (= #b10 $e37) (not (= #b01 $e37)) (not (= #b00 $e37))) #b1 #b0))) (bvadd (ite (= #b00 (ite $e39 $e62 (ite $e40 $e61 (ite $e41 $e60 (ite $e42 $e59 #b00))))) (ite $e39 $e52 (ite $e40 $e51 (ite $e41 $e50 (ite $e42 $e49 #b00000000)))) $e53) (ite (= #b00 (ite $e44 $e62 (ite $e45 $e61 (ite $e46 $e60 (ite $e47 $e59 #b00))))) (ite $e44 $e52 (ite $e45 $e51 (ite $e46 $e50 (ite $e47 $e49 #b00000000)))) $e53)) (ite (= #b1 (bvand (ite (and $e17 (not $e15) (not $e16)) #b1 #b0) (bvand v1 $e58))) $e53 (ite (= #b1 (bvand (bvand w1 v1) (ite $e48 #b1 #b0))) $e26 $e35))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(define-fun FunNew ((RTL_registers[1] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[1] RTL_registers[1]))
(define-fun FunNew ((s1 (_ BitVec 8)) (s2 (_ BitVec 8)) (reg0 (_ BitVec 8)) (reg2 (_ BitVec 8)) (reg1 (_ BitVec 8)) (reg3 (_ BitVec 8)) (s0 (_ BitVec 8)) (inst (_ BitVec 8)) (w2 (_ BitVec 8)) (w1 (_ BitVec 8)) (v0 (_ BitVec 8)) (rd1 (_ BitVec 8)) (inst_id (_ BitVec 8)) (oper2 (_ BitVec 8)) (op (_ BitVec 8)) (oper1 (_ BitVec 8)) (s3 (_ BitVec 8)) (v2 (_ BitVec 8)) (v1 (_ BitVec 8)) (ex_val (_ BitVec 8)) (rd2 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 (= #b00 rd1))) (let (($e2 (bvand w2 v2))) (let (($e3 (= #b00 rd2))) (let (($e4 (= #b01 rd1))) (let (($e5 (= #b01 rd2))) (let (($e6 (= #b10 rd1))) (let (($e7 (= #b10 rd2))) (let (($e8 ((_ extract 7 6) inst_id))) (let (($e9 (= #b10 $e8))) (let (($e10 (= #b01 $e8))) (let (($e11 (= #b11 $e8))) (let (($e12 (and (not $e10) (not $e9) (not $e11)))) (let (($e13 (bvand v0 (bvnot (ite $e12 #b1 #b0))))) (let (($e14 ((_ extract 1 0) inst_id))) (let (($e15 (= #b01 $e14))) (let (($e16 (= #b00 $e14))) (let (($e17 (= #b10 $e14))) (let (($e18 (= #b11 $e14))) (let (($e19 (concat #b0000 ((_ extract 5 2) inst_id)))) (let (($e20 ((_ extract 5 4) inst_id))) (let (($e21 (= #b11 $e20))) (let (($e22 (= #b10 $e20))) (let (($e23 (= #b01 $e20))) (let (($e24 (= #b00 $e20))) (let (($e25 (ite $e21 s3 (ite $e22 s2 (ite $e23 s1 (ite $e24 s0 #b00)))))) (let (($e26 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e27 (ite $e9 $e19 (ite (= #b00 $e25) (ite $e21 reg3 (ite $e22 reg2 (ite $e23 reg1 (ite $e24 reg0 #b00000000)))) (ite (= #b01 $e25) ex_val $e26))))) (let (($e28 ((_ extract 3 2) inst_id))) (let (($e29 (= #b11 $e28))) (let (($e30 (= #b10 $e28))) (let (($e31 (= #b01 $e28))) (let (($e32 (= #b00 $e28))) (let (($e33 (ite $e29 s3 (ite $e30 s2 (ite $e31 s1 (ite $e32 s0 #b00)))))) (let (($e34 (ite (= #b00 $e33) (ite $e29 reg3 (ite $e30 reg2 (ite $e31 reg1 (ite $e32 reg0 #b00000000)))) (ite (= #b01 $e33) ex_val $e26)))) (let (($e35 (ite (= #b1 (bvand $e2 (ite (and $e5 (not $e3)) #b1 #b0))) ex_val reg1))) (let (($e36 ((_ extract 7 6) inst))) (let (($e37 ((_ extract 1 0) inst))) (let (($e38 ((_ extract 5 4) inst))) (let (($e39 (= #b11 $e38))) (let (($e40 (= #b10 $e38))) (let (($e41 (= #b01 $e38))) (let (($e42 (= #b00 $e38))) (let (($e43 ((_ extract 3 2) inst))) (let (($e44 (= #b11 $e43))) (let (($e45 (= #b10 $e43))) (let (($e46 (= #b01 $e43))) (let (($e47 (= #b00 $e43))) (let (($e48 (and $e4 (not $e1)))) (let (($e49 (ite (= #b1 (bvand w1 (ite $e1 #b1 #b0))) $e26 (ite (= #b1 (bvand $e2 (ite $e3 #b1 #b0))) ex_val reg0)))) (let (($e50 (ite (= #b1 (bvand w1 (ite $e48 #b1 #b0))) $e26 $e35))) (let (($e51 (ite (= #b1 (bvand w1 (ite (and $e6 (not $e4) (not $e1)) #b1 #b0))) $e26 (ite (= #b1 (bvand $e2 (ite (and $e7 (not $e5) (not $e3)) #b1 #b0))) ex_val reg2)))) (let (($e52 (ite (= #b1 (bvand w1 (ite (and (= #b11 rd1) (not $e6) (not $e4) (not $e1)) #b1 #b0))) $e26 (ite (= #b1 (bvand $e2 (ite (and (= #b11 rd2) (not $e7) (not $e5) (not $e3)) #b1 #b0))) ex_val reg3)))) (let (($e53 (ite $e10 (bvadd $e27 $e34) (ite $e9 $e19 (ite $e11 (bvnot (bvand $e27 $e34)) #b00000000))))) (let (($e54 (and $e16 (not $e12)))) (let (($e55 (and $e15 (not $e12)))) (let (($e56 (and $e17 (not $e12)))) (let (($e57 (and $e18 (not $e12)))) (let (($e58 (bvand (bvnot (bvand v1 (ite $e12 #b1 #b0))) (bvnot (bvand (bvnot w1) (bvnot v1)))))) (let (($e59 (bvand (concat #b0 (ite $e54 #b1 #b0)) (concat (bvand $e13 (ite $e16 #b1 #b0)) (ite $e54 #b1 #b0))))) (let (($e60 (bvand (concat #b0 (ite $e55 #b1 #b0)) (concat (bvand $e13 (ite $e15 #b1 #b0)) (ite $e55 #b1 #b0))))) (let (($e61 (bvand (concat #b0 (ite $e56 #b1 #b0)) (concat (bvand $e13 (ite $e17 #b1 #b0)) (ite $e56 #b1 #b0))))) (let (($e62 (bvand (concat #b0 (ite $e57 #b1 #b0)) (concat (bvand $e13 (ite $e18 #b1 #b0)) (ite $e57 #b1 #b0))))) (ite (= #b1 (bvand (bvand v1 (bvand (bvnot (bvand v1 (bvnot (bvand (bvnot (bvand v1 (ite (and (not (= #b01 $e36)) (not (= #b10 $e36)) (not (= #b11 $e36))) #b1 #b0))) (bvnot (bvand (bvnot v1) (ite $e12 #b1 #b0))))))) (bvnot (bvand (bvnot v1) (bvnot $e58))))) (ite (and (not (= #b00 $e37)) (= #b01 $e37)) #b1 #b0))) (bvadd (ite (= #b00 (ite $e39 $e62 (ite $e40 $e61 (ite $e41 $e60 (ite $e42 $e59 #b00))))) (ite $e39 $e52 (ite $e40 $e51 (ite $e41 $e50 (ite $e42 $e49 #b00000000)))) $e53) (ite (= #b00 (ite $e44 $e62 (ite $e45 $e61 (ite $e46 $e60 (ite $e47 $e59 #b00))))) (ite $e44 $e52 (ite $e45 $e51 (ite $e46 $e50 (ite $e47 $e49 #b00000000)))) $e53)) (ite (= #b1 (bvand (ite (and (not $e16) $e15) #b1 #b0) (bvand v1 $e58))) $e53 (ite (= #b1 (bvand (bvand w1 v1) (ite $e48 #b1 #b0))) $e26 $e35))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
