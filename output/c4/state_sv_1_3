(define-fun FunNew ((RTL_ex_wb_rd (_ BitVec 2))) (_ BitVec 2) (ite (= #b1 #b1) RTL_ex_wb_rd RTL_ex_wb_rd))
(define-fun FunNew ((rd2 (_ BitVec 2))) (_ BitVec 2) (ite (= #b1 #b1) rd2 rd2))
(define-fun FunNew ((RTL_id_ex_rd (_ BitVec 2))) (_ BitVec 2) (ite (= #b1 #b1) RTL_id_ex_rd RTL_id_ex_rd))
(define-fun FunNew ((inst (_ BitVec 2)) ) (_ BitVec 2) ((_ extract 1 0) inst))
(define-fun FunNew ((RTL_id_ex_valid (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) RTL_id_ex_valid RTL_id_ex_valid))
(define-fun FunNew ((inst_v (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) inst_v inst_v))
(define-fun FunNew ((RTL_registers[2] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[2] RTL_registers[2]))
(define-fun FunNew ((reg2 (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) reg2 reg2))
(define-fun FunNew ((RTL_id_ex_operand1 (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_id_ex_operand1 RTL_id_ex_operand1))
(define-fun FunNew ((oper2 (_ BitVec 8)) (reg1 (_ BitVec 8)) (reg2 (_ BitVec 8)) (reg3 (_ BitVec 8)) (s0 (_ BitVec 8)) (s1 (_ BitVec 8)) (oper1 (_ BitVec 8)) (op (_ BitVec 8)) (ex_val (_ BitVec 8)) (reg0 (_ BitVec 8)) (s2 (_ BitVec 8)) (s3 (_ BitVec 8)) (inst (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 ((_ extract 5 4) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))))))))))
(define-fun FunNew ((RTL_id_ex_operand2 (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_id_ex_operand2 RTL_id_ex_operand2))
(define-fun FunNew ((oper2 (_ BitVec 8)) (reg1 (_ BitVec 8)) (reg2 (_ BitVec 8)) (reg3 (_ BitVec 8)) (s0 (_ BitVec 8)) (s1 (_ BitVec 8)) (oper1 (_ BitVec 8)) (op (_ BitVec 8)) (ex_val (_ BitVec 8)) (reg0 (_ BitVec 8)) (s2 (_ BitVec 8)) (s3 (_ BitVec 8)) (inst (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 ((_ extract 3 2) inst))) (let (($e2 (= #b11 $e1))) (let (($e3 (= #b10 $e1))) (let (($e4 (= #b01 $e1))) (let (($e5 (= #b00 $e1))) (let (($e6 (ite $e2 s3 (ite $e3 s2 (ite $e4 s1 (ite $e5 s0 #b00)))))) (ite (= #b00 $e6) (ite $e2 reg3 (ite $e3 reg2 (ite $e4 reg1 (ite $e5 reg0 #b00000000)))) (ite (= #b01 $e6) ex_val (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))))))))))
(define-fun FunNew ((RTL_ex_wb_val (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_ex_wb_val RTL_ex_wb_val))
(define-fun FunNew ((ex_val (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) ex_val ex_val))
(define-fun FunNew ((RTL_registers[3] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[3] RTL_registers[3]))
(define-fun FunNew ((reg3 (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) reg3 reg3))
(define-fun FunNew ((RTL_id_ex_reg_wen (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) RTL_id_ex_reg_wen RTL_id_ex_reg_wen))
#b1
(define-fun FunNew ((RTL_id_ex_op (_ BitVec 2))) (_ BitVec 2) (ite (= #b1 #b1) RTL_id_ex_op RTL_id_ex_op))
(define-fun FunNew ((inst (_ BitVec 2)) ) (_ BitVec 2) ((_ extract 7 6) inst))
(define-fun FunNew ((RTL_registers[1] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[1] RTL_registers[1]))
(define-fun FunNew ((reg1 (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) reg1 reg1))
(define-fun FunNew ((RTL_ex_wb_reg_wen (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) RTL_ex_wb_reg_wen RTL_ex_wb_reg_wen))
(define-fun FunNew ((w2 (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) w2 w2))
(define-fun FunNew ((RTL_ex_wb_valid (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) RTL_ex_wb_valid RTL_ex_wb_valid))
(define-fun FunNew ((v2 (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) v2 v2))
(define-fun FunNew ((RTL_registers[0] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[0] RTL_registers[0]))
(define-fun FunNew ((reg0 (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) reg0 reg0))
