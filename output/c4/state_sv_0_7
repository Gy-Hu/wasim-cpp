(define-fun FunNew ((RTL_registers[0] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[0] RTL_registers[0]))
(define-fun FunNew ((rd2 (_ BitVec 8)) (w2 (_ BitVec 8)) (oper2 (_ BitVec 8)) (v2 (_ BitVec 8)) (s3 (_ BitVec 8)) (s2 (_ BitVec 8)) (reg0 (_ BitVec 8)) (ex_val (_ BitVec 8)) (op (_ BitVec 8)) (inst_v (_ BitVec 8)) (oper1 (_ BitVec 8)) (s1 (_ BitVec 8)) (inst (_ BitVec 8)) (s0 (_ BitVec 8)) (reg1 (_ BitVec 8)) (reg3 (_ BitVec 8)) (reg2 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e2 ((_ extract 5 4) inst))) (let (($e3 (= #b11 $e2))) (let (($e4 (= #b10 $e2))) (let (($e5 (= #b01 $e2))) (let (($e6 (= #b00 $e2))) (let (($e7 (ite $e3 s3 (ite $e4 s2 (ite $e5 s1 (ite $e6 s0 #b00)))))) (let (($e8 ((_ extract 3 2) inst))) (let (($e9 (= #b11 $e8))) (let (($e10 (= #b10 $e8))) (let (($e11 (= #b01 $e8))) (let (($e12 (= #b00 $e8))) (let (($e13 (ite $e9 s3 (ite $e10 s2 (ite $e11 s1 (ite $e12 s0 #b00)))))) (ite (= #b1 (bvand inst_v (ite (= #b00 ((_ extract 1 0) inst)) #b1 #b0))) (bvadd (ite (= #b00 $e7) (ite $e3 reg3 (ite $e4 reg2 (ite $e5 reg1 (ite $e6 reg0 #b00000000)))) (ite (= #b01 $e7) ex_val $e1)) (ite (= #b00 $e13) (ite $e9 reg3 (ite $e10 reg2 (ite $e11 reg1 (ite $e12 reg0 #b00000000)))) (ite (= #b01 $e13) ex_val $e1))) (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0))))))))))))))))
(define-fun FunNew ((RTL_registers[3] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[3] RTL_registers[3]))
(define-fun FunNew ((rd2 (_ BitVec 8)) (w2 (_ BitVec 8)) (oper2 (_ BitVec 8)) (v2 (_ BitVec 8)) (s3 (_ BitVec 8)) (s2 (_ BitVec 8)) (reg0 (_ BitVec 8)) (ex_val (_ BitVec 8)) (op (_ BitVec 8)) (inst_v (_ BitVec 8)) (oper1 (_ BitVec 8)) (s1 (_ BitVec 8)) (inst (_ BitVec 8)) (s0 (_ BitVec 8)) (reg1 (_ BitVec 8)) (reg3 (_ BitVec 8)) (reg2 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e2 ((_ extract 1 0) inst))) (let (($e3 ((_ extract 5 4) inst))) (let (($e4 (= #b11 $e3))) (let (($e5 (= #b10 $e3))) (let (($e6 (= #b01 $e3))) (let (($e7 (= #b00 $e3))) (let (($e8 (ite $e4 s3 (ite $e5 s2 (ite $e6 s1 (ite $e7 s0 #b00)))))) (let (($e9 ((_ extract 3 2) inst))) (let (($e10 (= #b11 $e9))) (let (($e11 (= #b10 $e9))) (let (($e12 (= #b01 $e9))) (let (($e13 (= #b00 $e9))) (let (($e14 (ite $e10 s3 (ite $e11 s2 (ite $e12 s1 (ite $e13 s0 #b00)))))) (ite (= #b1 (bvand inst_v (ite (and (= #b11 $e2) (not (= #b10 $e2)) (not (= #b01 $e2)) (not (= #b00 $e2))) #b1 #b0))) (bvadd (ite (= #b00 $e8) (ite $e4 reg3 (ite $e5 reg2 (ite $e6 reg1 (ite $e7 reg0 #b00000000)))) (ite (= #b01 $e8) ex_val $e1)) (ite (= #b00 $e14) (ite $e10 reg3 (ite $e11 reg2 (ite $e12 reg1 (ite $e13 reg0 #b00000000)))) (ite (= #b01 $e14) ex_val $e1))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3)))))))))))))))))
(define-fun FunNew ((RTL_registers[2] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[2] RTL_registers[2]))
(define-fun FunNew ((rd2 (_ BitVec 8)) (w2 (_ BitVec 8)) (oper2 (_ BitVec 8)) (v2 (_ BitVec 8)) (s3 (_ BitVec 8)) (s2 (_ BitVec 8)) (reg0 (_ BitVec 8)) (ex_val (_ BitVec 8)) (op (_ BitVec 8)) (inst_v (_ BitVec 8)) (oper1 (_ BitVec 8)) (s1 (_ BitVec 8)) (inst (_ BitVec 8)) (s0 (_ BitVec 8)) (reg1 (_ BitVec 8)) (reg3 (_ BitVec 8)) (reg2 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e2 ((_ extract 1 0) inst))) (let (($e3 ((_ extract 5 4) inst))) (let (($e4 (= #b11 $e3))) (let (($e5 (= #b10 $e3))) (let (($e6 (= #b01 $e3))) (let (($e7 (= #b00 $e3))) (let (($e8 (ite $e4 s3 (ite $e5 s2 (ite $e6 s1 (ite $e7 s0 #b00)))))) (let (($e9 ((_ extract 3 2) inst))) (let (($e10 (= #b11 $e9))) (let (($e11 (= #b10 $e9))) (let (($e12 (= #b01 $e9))) (let (($e13 (= #b00 $e9))) (let (($e14 (ite $e10 s3 (ite $e11 s2 (ite $e12 s1 (ite $e13 s0 #b00)))))) (ite (= #b1 (bvand inst_v (ite (and (= #b10 $e2) (not (= #b01 $e2)) (not (= #b00 $e2))) #b1 #b0))) (bvadd (ite (= #b00 $e8) (ite $e4 reg3 (ite $e5 reg2 (ite $e6 reg1 (ite $e7 reg0 #b00000000)))) (ite (= #b01 $e8) ex_val $e1)) (ite (= #b00 $e14) (ite $e10 reg3 (ite $e11 reg2 (ite $e12 reg1 (ite $e13 reg0 #b00000000)))) (ite (= #b01 $e14) ex_val $e1))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2)))))))))))))))))
(define-fun FunNew ((RTL_registers[1] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[1] RTL_registers[1]))
(define-fun FunNew ((rd2 (_ BitVec 8)) (w2 (_ BitVec 8)) (oper2 (_ BitVec 8)) (v2 (_ BitVec 8)) (s3 (_ BitVec 8)) (s2 (_ BitVec 8)) (reg0 (_ BitVec 8)) (ex_val (_ BitVec 8)) (op (_ BitVec 8)) (inst_v (_ BitVec 8)) (oper1 (_ BitVec 8)) (s1 (_ BitVec 8)) (inst (_ BitVec 8)) (s0 (_ BitVec 8)) (reg1 (_ BitVec 8)) (reg3 (_ BitVec 8)) (reg2 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e2 ((_ extract 1 0) inst))) (let (($e3 ((_ extract 5 4) inst))) (let (($e4 (= #b11 $e3))) (let (($e5 (= #b10 $e3))) (let (($e6 (= #b01 $e3))) (let (($e7 (= #b00 $e3))) (let (($e8 (ite $e4 s3 (ite $e5 s2 (ite $e6 s1 (ite $e7 s0 #b00)))))) (let (($e9 ((_ extract 3 2) inst))) (let (($e10 (= #b11 $e9))) (let (($e11 (= #b10 $e9))) (let (($e12 (= #b01 $e9))) (let (($e13 (= #b00 $e9))) (let (($e14 (ite $e10 s3 (ite $e11 s2 (ite $e12 s1 (ite $e13 s0 #b00)))))) (ite (= #b1 (bvand inst_v (ite (and (not (= #b00 $e2)) (= #b01 $e2)) #b1 #b0))) (bvadd (ite (= #b00 $e8) (ite $e4 reg3 (ite $e5 reg2 (ite $e6 reg1 (ite $e7 reg0 #b00000000)))) (ite (= #b01 $e8) ex_val $e1)) (ite (= #b00 $e14) (ite $e10 reg3 (ite $e11 reg2 (ite $e12 reg1 (ite $e13 reg0 #b00000000)))) (ite (= #b01 $e14) ex_val $e1))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1)))))))))))))))))
