(define-fun FunNew ((RTL_registers[0] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[0] RTL_registers[0]))
(define-fun FunNew ((oper2 (_ BitVec 8)) (op (_ BitVec 8)) (reg0 (_ BitVec 8)) (reg2 (_ BitVec 8)) (reg1 (_ BitVec 8)) (reg3 (_ BitVec 8)) (oper1 (_ BitVec 8)) (inst_v (_ BitVec 8)) (w1 (_ BitVec 8)) (s1 (_ BitVec 8)) (inst (_ BitVec 8)) (s0 (_ BitVec 8)) (w2 (_ BitVec 8)) (rd1 (_ BitVec 8)) (rd2 (_ BitVec 8)) (s2 (_ BitVec 8)) (s3 (_ BitVec 8)) (v2 (_ BitVec 8)) (v1 (_ BitVec 8)) (ex_val (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 ((_ extract 1 1) s0))) (let (($e2 (bvand w1 v1))) (let (($e3 (= #b00 rd1))) (let (($e4 (bvand $e2 (ite $e3 #b1 #b0)))) (let (($e5 (bvand w2 v2))) (let (($e6 (= #b00 rd2))) (let (($e7 ((_ extract 1 1) s1))) (let (($e8 (bvand $e2 (ite (= #b01 rd1) #b1 #b0)))) (let (($e9 (= #b01 rd2))) (let (($e10 ((_ extract 1 1) s2))) (let (($e11 (bvand $e2 (ite (= #b10 rd1) #b1 #b0)))) (let (($e12 (= #b10 rd2))) (let (($e13 ((_ extract 1 1) s3))) (let (($e14 (bvand $e2 (ite (= #b11 rd1) #b1 #b0)))) (let (($e15 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e16 (ite (= #b1 (bvand $e5 (ite $e6 #b1 #b0))) ex_val reg0))) (let (($e17 (ite (= #b1 (bvand $e5 (ite (and $e9 (not $e6)) #b1 #b0))) ex_val reg1))) (let (($e18 (ite (= #b1 (bvand $e5 (ite (and $e12 (not $e9) (not $e6)) #b1 #b0))) ex_val reg2))) (let (($e19 (ite (= #b1 (bvand $e5 (ite (and (= #b11 rd2) (not $e12) (not $e9) (not $e6)) #b1 #b0))) ex_val reg3))) (let (($e20 ((_ extract 7 6) inst))) (let (($e21 ((_ extract 5 4) inst))) (let (($e22 (= #b11 $e21))) (let (($e23 (= #b10 $e21))) (let (($e24 (= #b01 $e21))) (let (($e25 (= #b00 $e21))) (let (($e26 ((_ extract 3 2) inst))) (let (($e27 (= #b11 $e26))) (let (($e28 (= #b10 $e26))) (let (($e29 (= #b01 $e26))) (let (($e30 (= #b00 $e26))) (let (($e31 (bvand (bvnot (bvand (bvnot w1) v1)) (bvnot (bvand (bvnot w2) (bvnot v1)))))) (let (($e32 (concat (bvnot v1) v1))) (let (($e33 (bvand (bvand $e32 (concat (bvnot v1) $e14)) (bvand (concat $e13 v1) (concat $e13 $e14))))) (let (($e34 (bvand (bvand $e32 (concat (bvnot v1) $e8)) (bvand (concat $e7 v1) (concat $e7 $e8))))) (let (($e35 (bvand (bvand $e32 (concat (bvnot v1) $e4)) (bvand (concat $e1 v1) (concat $e1 $e4))))) (let (($e36 (bvand (bvand $e32 (concat (bvnot v1) $e11)) (bvand (concat $e10 v1) (concat $e10 $e11))))) (ite (= #b1 (bvand (ite (= #b00 ((_ extract 1 0) inst)) #b1 #b0) (bvand inst_v (bvand (bvnot (bvand (bvnot inst_v) (bvnot $e31))) (bvnot (bvand inst_v (bvnot (bvand (bvnot (bvand inst_v (ite (and (not (= #b01 $e20)) (not (= #b10 $e20)) (not (= #b11 $e20))) #b1 #b0))) (bvnot (bvand (bvnot w1) (bvnot inst_v))))))))))) (bvadd (ite (= #b00 (ite $e22 $e33 (ite $e23 $e36 (ite $e24 $e34 (ite $e25 $e35 #b00))))) (ite $e22 $e19 (ite $e23 $e18 (ite $e24 $e17 (ite $e25 $e16 #b00000000)))) $e15) (ite (= #b00 (ite $e27 $e33 (ite $e28 $e36 (ite $e29 $e34 (ite $e30 $e35 #b00))))) (ite $e27 $e19 (ite $e28 $e18 (ite $e29 $e17 (ite $e30 $e16 #b00000000)))) $e15)) (ite (= #b1 (bvand (ite $e3 #b1 #b0) (bvand v1 $e31))) $e15 $e16)))))))))))))))))))))))))))))))))))))))
(define-fun FunNew ((RTL_registers[3] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[3] RTL_registers[3]))
(define-fun FunNew ((oper2 (_ BitVec 8)) (op (_ BitVec 8)) (reg0 (_ BitVec 8)) (reg2 (_ BitVec 8)) (reg1 (_ BitVec 8)) (reg3 (_ BitVec 8)) (oper1 (_ BitVec 8)) (inst_v (_ BitVec 8)) (w1 (_ BitVec 8)) (s1 (_ BitVec 8)) (w2 (_ BitVec 8)) (s0 (_ BitVec 8)) (inst (_ BitVec 8)) (rd1 (_ BitVec 8)) (rd2 (_ BitVec 8)) (s2 (_ BitVec 8)) (s3 (_ BitVec 8)) (v2 (_ BitVec 8)) (v1 (_ BitVec 8)) (ex_val (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 ((_ extract 1 1) s0))) (let (($e2 (bvand w1 v1))) (let (($e3 (= #b00 rd1))) (let (($e4 (bvand $e2 (ite $e3 #b1 #b0)))) (let (($e5 (bvand w2 v2))) (let (($e6 (= #b00 rd2))) (let (($e7 ((_ extract 1 1) s1))) (let (($e8 (= #b01 rd1))) (let (($e9 (bvand $e2 (ite $e8 #b1 #b0)))) (let (($e10 (= #b01 rd2))) (let (($e11 ((_ extract 1 1) s2))) (let (($e12 (= #b10 rd1))) (let (($e13 (bvand $e2 (ite $e12 #b1 #b0)))) (let (($e14 (= #b10 rd2))) (let (($e15 ((_ extract 1 1) s3))) (let (($e16 (= #b11 rd1))) (let (($e17 (bvand $e2 (ite $e16 #b1 #b0)))) (let (($e18 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e19 (ite (= #b1 (bvand $e5 (ite $e6 #b1 #b0))) ex_val reg0))) (let (($e20 (ite (= #b1 (bvand $e5 (ite (and $e10 (not $e6)) #b1 #b0))) ex_val reg1))) (let (($e21 (ite (= #b1 (bvand $e5 (ite (and $e14 (not $e10) (not $e6)) #b1 #b0))) ex_val reg2))) (let (($e22 (ite (= #b1 (bvand $e5 (ite (and (= #b11 rd2) (not $e14) (not $e10) (not $e6)) #b1 #b0))) ex_val reg3))) (let (($e23 ((_ extract 7 6) inst))) (let (($e24 ((_ extract 1 0) inst))) (let (($e25 ((_ extract 5 4) inst))) (let (($e26 (= #b11 $e25))) (let (($e27 (= #b10 $e25))) (let (($e28 (= #b01 $e25))) (let (($e29 (= #b00 $e25))) (let (($e30 ((_ extract 3 2) inst))) (let (($e31 (= #b11 $e30))) (let (($e32 (= #b10 $e30))) (let (($e33 (= #b01 $e30))) (let (($e34 (= #b00 $e30))) (let (($e35 (bvand (bvnot (bvand (bvnot w1) v1)) (bvnot (bvand (bvnot w2) (bvnot v1)))))) (let (($e36 (concat (bvnot v1) v1))) (let (($e37 (bvand (bvand $e36 (concat (bvnot v1) $e17)) (bvand (concat $e15 v1) (concat $e15 $e17))))) (let (($e38 (bvand (bvand $e36 (concat (bvnot v1) $e9)) (bvand (concat $e7 v1) (concat $e7 $e9))))) (let (($e39 (bvand (bvand $e36 (concat (bvnot v1) $e4)) (bvand (concat $e1 v1) (concat $e1 $e4))))) (let (($e40 (bvand (bvand $e36 (concat (bvnot v1) $e13)) (bvand (concat $e11 v1) (concat $e11 $e13))))) (ite (= #b1 (bvand (bvand inst_v (bvand (bvnot (bvand (bvnot inst_v) (bvnot $e35))) (bvnot (bvand inst_v (bvnot (bvand (bvnot (bvand inst_v (ite (and (not (= #b01 $e23)) (not (= #b10 $e23)) (not (= #b11 $e23))) #b1 #b0))) (bvnot (bvand (bvnot w1) (bvnot inst_v))))))))) (ite (and (= #b11 $e24) (not (= #b10 $e24)) (not (= #b01 $e24)) (not (= #b00 $e24))) #b1 #b0))) (bvadd (ite (= #b00 (ite $e26 $e37 (ite $e27 $e40 (ite $e28 $e38 (ite $e29 $e39 #b00))))) (ite $e26 $e22 (ite $e27 $e21 (ite $e28 $e20 (ite $e29 $e19 #b00000000)))) $e18) (ite (= #b00 (ite $e31 $e37 (ite $e32 $e40 (ite $e33 $e38 (ite $e34 $e39 #b00))))) (ite $e31 $e22 (ite $e32 $e21 (ite $e33 $e20 (ite $e34 $e19 #b00000000)))) $e18)) (ite (= #b1 (bvand (ite (and $e16 (not $e12) (not $e8) (not $e3)) #b1 #b0) (bvand v1 $e35))) $e18 $e22)))))))))))))))))))))))))))))))))))))))))))
(define-fun FunNew ((RTL_registers[2] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[2] RTL_registers[2]))
(define-fun FunNew ((oper2 (_ BitVec 8)) (op (_ BitVec 8)) (reg0 (_ BitVec 8)) (reg2 (_ BitVec 8)) (reg1 (_ BitVec 8)) (reg3 (_ BitVec 8)) (oper1 (_ BitVec 8)) (inst_v (_ BitVec 8)) (w1 (_ BitVec 8)) (s1 (_ BitVec 8)) (w2 (_ BitVec 8)) (s0 (_ BitVec 8)) (inst (_ BitVec 8)) (rd1 (_ BitVec 8)) (rd2 (_ BitVec 8)) (s2 (_ BitVec 8)) (s3 (_ BitVec 8)) (v2 (_ BitVec 8)) (v1 (_ BitVec 8)) (ex_val (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 ((_ extract 1 1) s0))) (let (($e2 (bvand w1 v1))) (let (($e3 (= #b00 rd1))) (let (($e4 (bvand $e2 (ite $e3 #b1 #b0)))) (let (($e5 (bvand w2 v2))) (let (($e6 (= #b00 rd2))) (let (($e7 ((_ extract 1 1) s1))) (let (($e8 (= #b01 rd1))) (let (($e9 (bvand $e2 (ite $e8 #b1 #b0)))) (let (($e10 (= #b01 rd2))) (let (($e11 ((_ extract 1 1) s2))) (let (($e12 (= #b10 rd1))) (let (($e13 (bvand $e2 (ite $e12 #b1 #b0)))) (let (($e14 (= #b10 rd2))) (let (($e15 ((_ extract 1 1) s3))) (let (($e16 (bvand $e2 (ite (= #b11 rd1) #b1 #b0)))) (let (($e17 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e18 (ite (= #b1 (bvand $e5 (ite $e6 #b1 #b0))) ex_val reg0))) (let (($e19 (ite (= #b1 (bvand $e5 (ite (and $e10 (not $e6)) #b1 #b0))) ex_val reg1))) (let (($e20 (ite (= #b1 (bvand $e5 (ite (and $e14 (not $e10) (not $e6)) #b1 #b0))) ex_val reg2))) (let (($e21 (ite (= #b1 (bvand $e5 (ite (and (= #b11 rd2) (not $e14) (not $e10) (not $e6)) #b1 #b0))) ex_val reg3))) (let (($e22 ((_ extract 7 6) inst))) (let (($e23 ((_ extract 1 0) inst))) (let (($e24 ((_ extract 5 4) inst))) (let (($e25 (= #b11 $e24))) (let (($e26 (= #b10 $e24))) (let (($e27 (= #b01 $e24))) (let (($e28 (= #b00 $e24))) (let (($e29 ((_ extract 3 2) inst))) (let (($e30 (= #b11 $e29))) (let (($e31 (= #b10 $e29))) (let (($e32 (= #b01 $e29))) (let (($e33 (= #b00 $e29))) (let (($e34 (bvand (bvnot (bvand (bvnot w1) v1)) (bvnot (bvand (bvnot w2) (bvnot v1)))))) (let (($e35 (concat (bvnot v1) v1))) (let (($e36 (bvand (bvand $e35 (concat (bvnot v1) $e16)) (bvand (concat $e15 v1) (concat $e15 $e16))))) (let (($e37 (bvand (bvand $e35 (concat (bvnot v1) $e9)) (bvand (concat $e7 v1) (concat $e7 $e9))))) (let (($e38 (bvand (bvand $e35 (concat (bvnot v1) $e4)) (bvand (concat $e1 v1) (concat $e1 $e4))))) (let (($e39 (bvand (bvand $e35 (concat (bvnot v1) $e13)) (bvand (concat $e11 v1) (concat $e11 $e13))))) (ite (= #b1 (bvand (bvand inst_v (bvand (bvnot (bvand (bvnot inst_v) (bvnot $e34))) (bvnot (bvand inst_v (bvnot (bvand (bvnot (bvand inst_v (ite (and (not (= #b01 $e22)) (not (= #b10 $e22)) (not (= #b11 $e22))) #b1 #b0))) (bvnot (bvand (bvnot w1) (bvnot inst_v))))))))) (ite (and (= #b10 $e23) (not (= #b01 $e23)) (not (= #b00 $e23))) #b1 #b0))) (bvadd (ite (= #b00 (ite $e25 $e36 (ite $e26 $e39 (ite $e27 $e37 (ite $e28 $e38 #b00))))) (ite $e25 $e21 (ite $e26 $e20 (ite $e27 $e19 (ite $e28 $e18 #b00000000)))) $e17) (ite (= #b00 (ite $e30 $e36 (ite $e31 $e39 (ite $e32 $e37 (ite $e33 $e38 #b00))))) (ite $e30 $e21 (ite $e31 $e20 (ite $e32 $e19 (ite $e33 $e18 #b00000000)))) $e17)) (ite (= #b1 (bvand (ite (and $e12 (not $e8) (not $e3)) #b1 #b0) (bvand v1 $e34))) $e17 $e20))))))))))))))))))))))))))))))))))))))))))
(define-fun FunNew ((RTL_registers[1] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[1] RTL_registers[1]))
(define-fun FunNew ((oper2 (_ BitVec 8)) (op (_ BitVec 8)) (reg0 (_ BitVec 8)) (reg2 (_ BitVec 8)) (reg1 (_ BitVec 8)) (reg3 (_ BitVec 8)) (oper1 (_ BitVec 8)) (inst_v (_ BitVec 8)) (w1 (_ BitVec 8)) (s1 (_ BitVec 8)) (w2 (_ BitVec 8)) (s0 (_ BitVec 8)) (inst (_ BitVec 8)) (rd1 (_ BitVec 8)) (rd2 (_ BitVec 8)) (s2 (_ BitVec 8)) (s3 (_ BitVec 8)) (v2 (_ BitVec 8)) (v1 (_ BitVec 8)) (ex_val (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 ((_ extract 1 1) s0))) (let (($e2 (bvand w1 v1))) (let (($e3 (= #b00 rd1))) (let (($e4 (bvand $e2 (ite $e3 #b1 #b0)))) (let (($e5 (bvand w2 v2))) (let (($e6 (= #b00 rd2))) (let (($e7 ((_ extract 1 1) s1))) (let (($e8 (= #b01 rd1))) (let (($e9 (bvand $e2 (ite $e8 #b1 #b0)))) (let (($e10 (= #b01 rd2))) (let (($e11 ((_ extract 1 1) s2))) (let (($e12 (bvand $e2 (ite (= #b10 rd1) #b1 #b0)))) (let (($e13 (= #b10 rd2))) (let (($e14 ((_ extract 1 1) s3))) (let (($e15 (bvand $e2 (ite (= #b11 rd1) #b1 #b0)))) (let (($e16 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e17 (ite (= #b1 (bvand $e5 (ite $e6 #b1 #b0))) ex_val reg0))) (let (($e18 (ite (= #b1 (bvand $e5 (ite (and $e10 (not $e6)) #b1 #b0))) ex_val reg1))) (let (($e19 (ite (= #b1 (bvand $e5 (ite (and $e13 (not $e10) (not $e6)) #b1 #b0))) ex_val reg2))) (let (($e20 (ite (= #b1 (bvand $e5 (ite (and (= #b11 rd2) (not $e13) (not $e10) (not $e6)) #b1 #b0))) ex_val reg3))) (let (($e21 ((_ extract 7 6) inst))) (let (($e22 ((_ extract 1 0) inst))) (let (($e23 ((_ extract 5 4) inst))) (let (($e24 (= #b11 $e23))) (let (($e25 (= #b10 $e23))) (let (($e26 (= #b01 $e23))) (let (($e27 (= #b00 $e23))) (let (($e28 ((_ extract 3 2) inst))) (let (($e29 (= #b11 $e28))) (let (($e30 (= #b10 $e28))) (let (($e31 (= #b01 $e28))) (let (($e32 (= #b00 $e28))) (let (($e33 (bvand (bvnot (bvand (bvnot w1) v1)) (bvnot (bvand (bvnot w2) (bvnot v1)))))) (let (($e34 (concat (bvnot v1) v1))) (let (($e35 (bvand (bvand $e34 (concat (bvnot v1) $e15)) (bvand (concat $e14 v1) (concat $e14 $e15))))) (let (($e36 (bvand (bvand $e34 (concat (bvnot v1) $e9)) (bvand (concat $e7 v1) (concat $e7 $e9))))) (let (($e37 (bvand (bvand $e34 (concat (bvnot v1) $e4)) (bvand (concat $e1 v1) (concat $e1 $e4))))) (let (($e38 (bvand (bvand $e34 (concat (bvnot v1) $e12)) (bvand (concat $e11 v1) (concat $e11 $e12))))) (ite (= #b1 (bvand (bvand inst_v (bvand (bvnot (bvand (bvnot inst_v) (bvnot $e33))) (bvnot (bvand inst_v (bvnot (bvand (bvnot (bvand inst_v (ite (and (not (= #b01 $e21)) (not (= #b10 $e21)) (not (= #b11 $e21))) #b1 #b0))) (bvnot (bvand (bvnot w1) (bvnot inst_v))))))))) (ite (and (not (= #b00 $e22)) (= #b01 $e22)) #b1 #b0))) (bvadd (ite (= #b00 (ite $e24 $e35 (ite $e25 $e38 (ite $e26 $e36 (ite $e27 $e37 #b00))))) (ite $e24 $e20 (ite $e25 $e19 (ite $e26 $e18 (ite $e27 $e17 #b00000000)))) $e16) (ite (= #b00 (ite $e29 $e35 (ite $e30 $e38 (ite $e31 $e36 (ite $e32 $e37 #b00))))) (ite $e29 $e20 (ite $e30 $e19 (ite $e31 $e18 (ite $e32 $e17 #b00000000)))) $e16)) (ite (= #b1 (bvand (ite (and $e8 (not $e3)) #b1 #b0) (bvand v1 $e33))) $e16 $e18)))))))))))))))))))))))))))))))))))))))))
