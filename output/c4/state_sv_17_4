(define-fun FunNew ((RTL_id_ex_operand1 (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_id_ex_operand1 RTL_id_ex_operand1))
(define-fun FunNew ((oper2 (_ BitVec 8)) (oper1 (_ BitVec 8)) (op (_ BitVec 8)) (reg0 (_ BitVec 8)) (reg2 (_ BitVec 8)) (w1 (_ BitVec 8)) (s1 (_ BitVec 8)) (inst (_ BitVec 8)) (s0 (_ BitVec 8)) (rd1 (_ BitVec 8)) (rd2 (_ BitVec 8)) (s2 (_ BitVec 8)) (s3 (_ BitVec 8)) (v2 (_ BitVec 8)) (v1 (_ BitVec 8)) (ex_val (_ BitVec 8)) (w2 (_ BitVec 8)) (reg1 (_ BitVec 8)) (reg3 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 ((_ extract 1 1) s0))) (let (($e2 (bvand w1 v1))) (let (($e3 (bvand $e2 (ite (= #b00 rd1) #b1 #b0)))) (let (($e4 (bvand w2 v2))) (let (($e5 (= #b00 rd2))) (let (($e6 ((_ extract 1 1) s1))) (let (($e7 (bvand $e2 (ite (= #b01 rd1) #b1 #b0)))) (let (($e8 (= #b01 rd2))) (let (($e9 ((_ extract 1 1) s2))) (let (($e10 (bvand $e2 (ite (= #b10 rd1) #b1 #b0)))) (let (($e11 (= #b10 rd2))) (let (($e12 ((_ extract 1 1) s3))) (let (($e13 (bvand $e2 (ite (= #b11 rd1) #b1 #b0)))) (let (($e14 ((_ extract 5 4) inst))) (let (($e15 (= #b11 $e14))) (let (($e16 (= #b10 $e14))) (let (($e17 (= #b01 $e14))) (let (($e18 (= #b00 $e14))) (let (($e19 (concat (bvnot v1) v1))) (ite (= #b00 (ite $e15 (bvand (bvand $e19 (concat (bvnot v1) $e13)) (bvand (concat $e12 v1) (concat $e12 $e13))) (ite $e16 (bvand (bvand $e19 (concat (bvnot v1) $e10)) (bvand (concat $e9 v1) (concat $e9 $e10))) (ite $e17 (bvand (bvand $e19 (concat (bvnot v1) $e7)) (bvand (concat $e6 v1) (concat $e6 $e7))) (ite $e18 (bvand (bvand $e19 (concat (bvnot v1) $e3)) (bvand (concat $e1 v1) (concat $e1 $e3))) #b00))))) (ite $e15 (ite (= #b1 (bvand $e4 (ite (and (= #b11 rd2) (not $e11) (not $e8) (not $e5)) #b1 #b0))) ex_val reg3) (ite $e16 (ite (= #b1 (bvand $e4 (ite (and $e11 (not $e8) (not $e5)) #b1 #b0))) ex_val reg2) (ite $e17 (ite (= #b1 (bvand $e4 (ite (and $e8 (not $e5)) #b1 #b0))) ex_val reg1) (ite $e18 (ite (= #b1 (bvand $e4 (ite $e5 #b1 #b0))) ex_val reg0) #b00000000)))) (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))))))))))))))))))))))
(define-fun FunNew ((RTL_ex_wb_valid (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) RTL_ex_wb_valid RTL_ex_wb_valid))
(define-fun FunNew ((v1 (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) v1 v1))
(define-fun FunNew ((RTL_ex_wb_reg_wen (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) RTL_ex_wb_reg_wen RTL_ex_wb_reg_wen))
(define-fun FunNew ((w2 (_ BitVec 1)) (v1 (_ BitVec 1)) (w1 (_ BitVec 1)) ) (_ BitVec 1) (bvand (bvnot (bvand (bvnot w1) v1)) (bvnot (bvand (bvnot w2) (bvnot v1)))))
(define-fun FunNew ((RTL_registers[1] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[1] RTL_registers[1]))
(define-fun FunNew ((reg1 (_ BitVec 8)) (rd2 (_ BitVec 8)) (ex_val (_ BitVec 8)) (v2 (_ BitVec 8)) (w2 (_ BitVec 8)) ) (_ BitVec 8) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1))
(define-fun FunNew ((RTL_id_ex_rd (_ BitVec 2))) (_ BitVec 2) (ite (= #b1 #b1) RTL_id_ex_rd RTL_id_ex_rd))
(define-fun FunNew ((inst (_ BitVec 2)) ) (_ BitVec 2) ((_ extract 1 0) inst))
(define-fun FunNew ((RTL_id_ex_op (_ BitVec 2))) (_ BitVec 2) (ite (= #b1 #b1) RTL_id_ex_op RTL_id_ex_op))
(define-fun FunNew ((inst (_ BitVec 2)) ) (_ BitVec 2) ((_ extract 7 6) inst))
(define-fun FunNew ((RTL_registers[3] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[3] RTL_registers[3]))
(define-fun FunNew ((reg3 (_ BitVec 8)) (rd2 (_ BitVec 8)) (ex_val (_ BitVec 8)) (v2 (_ BitVec 8)) (w2 (_ BitVec 8)) ) (_ BitVec 8) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3))
(define-fun FunNew ((RTL_id_ex_operand2 (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_id_ex_operand2 RTL_id_ex_operand2))
(define-fun FunNew ((oper2 (_ BitVec 8)) (oper1 (_ BitVec 8)) (op (_ BitVec 8)) (reg0 (_ BitVec 8)) (reg2 (_ BitVec 8)) (w1 (_ BitVec 8)) (s1 (_ BitVec 8)) (inst (_ BitVec 8)) (s0 (_ BitVec 8)) (rd1 (_ BitVec 8)) (rd2 (_ BitVec 8)) (s2 (_ BitVec 8)) (s3 (_ BitVec 8)) (v2 (_ BitVec 8)) (v1 (_ BitVec 8)) (ex_val (_ BitVec 8)) (w2 (_ BitVec 8)) (reg1 (_ BitVec 8)) (reg3 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 ((_ extract 1 1) s0))) (let (($e2 (bvand w1 v1))) (let (($e3 (bvand $e2 (ite (= #b00 rd1) #b1 #b0)))) (let (($e4 (bvand w2 v2))) (let (($e5 (= #b00 rd2))) (let (($e6 ((_ extract 1 1) s1))) (let (($e7 (bvand $e2 (ite (= #b01 rd1) #b1 #b0)))) (let (($e8 (= #b01 rd2))) (let (($e9 ((_ extract 1 1) s2))) (let (($e10 (bvand $e2 (ite (= #b10 rd1) #b1 #b0)))) (let (($e11 (= #b10 rd2))) (let (($e12 ((_ extract 1 1) s3))) (let (($e13 (bvand $e2 (ite (= #b11 rd1) #b1 #b0)))) (let (($e14 ((_ extract 3 2) inst))) (let (($e15 (= #b11 $e14))) (let (($e16 (= #b10 $e14))) (let (($e17 (= #b01 $e14))) (let (($e18 (= #b00 $e14))) (let (($e19 (concat (bvnot v1) v1))) (ite (= #b00 (ite $e15 (bvand (bvand $e19 (concat (bvnot v1) $e13)) (bvand (concat $e12 v1) (concat $e12 $e13))) (ite $e16 (bvand (bvand $e19 (concat (bvnot v1) $e10)) (bvand (concat $e9 v1) (concat $e9 $e10))) (ite $e17 (bvand (bvand $e19 (concat (bvnot v1) $e7)) (bvand (concat $e6 v1) (concat $e6 $e7))) (ite $e18 (bvand (bvand $e19 (concat (bvnot v1) $e3)) (bvand (concat $e1 v1) (concat $e1 $e3))) #b00))))) (ite $e15 (ite (= #b1 (bvand $e4 (ite (and (= #b11 rd2) (not $e11) (not $e8) (not $e5)) #b1 #b0))) ex_val reg3) (ite $e16 (ite (= #b1 (bvand $e4 (ite (and $e11 (not $e8) (not $e5)) #b1 #b0))) ex_val reg2) (ite $e17 (ite (= #b1 (bvand $e4 (ite (and $e8 (not $e5)) #b1 #b0))) ex_val reg1) (ite $e18 (ite (= #b1 (bvand $e4 (ite $e5 #b1 #b0))) ex_val reg0) #b00000000)))) (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))))))))))))))))))))))
(define-fun FunNew ((RTL_registers[2] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[2] RTL_registers[2]))
(define-fun FunNew ((reg2 (_ BitVec 8)) (rd2 (_ BitVec 8)) (ex_val (_ BitVec 8)) (v2 (_ BitVec 8)) (w2 (_ BitVec 8)) ) (_ BitVec 8) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2))
(define-fun FunNew ((RTL_id_ex_valid (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) RTL_id_ex_valid RTL_id_ex_valid))
(define-fun FunNew ((inst_v (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) inst_v inst_v))
(define-fun FunNew ((RTL_ex_wb_rd (_ BitVec 2))) (_ BitVec 2) (ite (= #b1 #b1) RTL_ex_wb_rd RTL_ex_wb_rd))
(define-fun FunNew ((rd1 (_ BitVec 2))) (_ BitVec 2) (ite (= #b1 #b1) rd1 rd1))
(define-fun FunNew ((RTL_registers[0] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[0] RTL_registers[0]))
(define-fun FunNew ((rd2 (_ BitVec 8)) (reg0 (_ BitVec 8)) (ex_val (_ BitVec 8)) (v2 (_ BitVec 8)) (w2 (_ BitVec 8)) ) (_ BitVec 8) (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0))
(define-fun FunNew ((RTL_ex_wb_val (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_ex_wb_val RTL_ex_wb_val))
(define-fun FunNew ((oper2 (_ BitVec 8)) (oper1 (_ BitVec 8)) (op (_ BitVec 8)) ) (_ BitVec 8) (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))
(define-fun FunNew ((RTL_id_ex_reg_wen (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) RTL_id_ex_reg_wen RTL_id_ex_reg_wen))
(define-fun FunNew ((w1 (_ BitVec 1)) (inst (_ BitVec 1)) (inst_v (_ BitVec 1)) ) (_ BitVec 1) (let (($e1 ((_ extract 7 6) inst))) (bvand (bvnot (bvand inst_v (ite (and (not (= #b01 $e1)) (not (= #b10 $e1)) (not (= #b11 $e1))) #b1 #b0))) (bvnot (bvand (bvnot w1) (bvnot inst_v))))))
