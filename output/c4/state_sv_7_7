(define-fun FunNew ((RTL_registers[0] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[0] RTL_registers[0]))
(define-fun FunNew ((oper2 (_ BitVec 8)) (op (_ BitVec 8)) (reg0 (_ BitVec 8)) (reg2 (_ BitVec 8)) (reg1 (_ BitVec 8)) (reg3 (_ BitVec 8)) (oper1 (_ BitVec 8)) (inst_v (_ BitVec 8)) (w1 (_ BitVec 8)) (s1 (_ BitVec 8)) (inst (_ BitVec 8)) (s0 (_ BitVec 8)) (v0 (_ BitVec 8)) (ex_val (_ BitVec 8)) (v1 (_ BitVec 8)) (s2 (_ BitVec 8)) (v2 (_ BitVec 8)) (s3 (_ BitVec 8)) (rd2 (_ BitVec 8)) (rd1 (_ BitVec 8)) (w2 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 (= #b00 rd1))) (let (($e2 (bvand w2 v2))) (let (($e3 (= #b00 rd2))) (let (($e4 (= #b01 rd2))) (let (($e5 (= #b10 rd2))) (let (($e6 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e7 (bvand w1 (bvnot v0)))) (let (($e8 (ite (= #b1 (bvand $e2 (ite $e3 #b1 #b0))) ex_val reg0))) (let (($e9 (ite (= #b1 (bvand $e2 (ite (and $e4 (not $e3)) #b1 #b0))) ex_val reg1))) (let (($e10 (ite (= #b1 (bvand $e2 (ite (and $e5 (not $e4) (not $e3)) #b1 #b0))) ex_val reg2))) (let (($e11 (ite (= #b1 (bvand $e2 (ite (and (= #b11 rd2) (not $e5) (not $e4) (not $e3)) #b1 #b0))) ex_val reg3))) (let (($e12 (bvand v1 $e7))) (let (($e13 ((_ extract 7 6) inst))) (let (($e14 ((_ extract 5 4) inst))) (let (($e15 (= #b11 $e14))) (let (($e16 (= #b10 $e14))) (let (($e17 (= #b01 $e14))) (let (($e18 (= #b00 $e14))) (let (($e19 ((_ extract 3 2) inst))) (let (($e20 (= #b11 $e19))) (let (($e21 (= #b10 $e19))) (let (($e22 (= #b01 $e19))) (let (($e23 (= #b00 $e19))) (let (($e24 (bvand (bvnot (bvand (bvnot v1) (bvnot (bvand (bvnot v2) ((_ extract 0 0) s3))))) (bvnot (bvand v1 (bvnot (bvand (ite (= #b11 rd1) #b1 #b0) $e12))))))) (let (($e25 (bvand (concat (bvnot v1) $e24) (concat ((_ extract 1 1) s3) $e24)))) (let (($e26 (bvand (bvnot (bvand (bvnot v1) (bvnot (bvand (bvnot v2) ((_ extract 0 0) s1))))) (bvnot (bvand v1 (bvnot (bvand (ite (= #b01 rd1) #b1 #b0) $e12))))))) (let (($e27 (bvand (concat (bvnot v1) $e26) (concat ((_ extract 1 1) s1) $e26)))) (let (($e28 (bvand (bvnot (bvand (bvnot v1) (bvnot (bvand (bvnot v2) ((_ extract 0 0) s0))))) (bvnot (bvand v1 (bvnot (bvand (ite $e1 #b1 #b0) $e12))))))) (let (($e29 (bvand (concat (bvnot v1) $e28) (concat ((_ extract 1 1) s0) $e28)))) (let (($e30 (bvand (bvnot (bvand (bvnot v1) (bvnot (bvand (bvnot v2) ((_ extract 0 0) s2))))) (bvnot (bvand v1 (bvnot (bvand (ite (= #b10 rd1) #b1 #b0) $e12))))))) (let (($e31 (bvand (concat (bvnot v1) $e30) (concat ((_ extract 1 1) s2) $e30)))) (ite (= #b1 (bvand (ite (= #b00 ((_ extract 1 0) inst)) #b1 #b0) (bvand inst_v (bvand (bvnot (bvand (bvnot inst_v) (bvnot $e7))) (bvnot (bvand inst_v (bvnot (bvand (bvnot (bvand inst_v (ite (and (not (= #b01 $e13)) (not (= #b10 $e13)) (not (= #b11 $e13))) #b1 #b0))) (bvnot (bvand (bvnot inst_v) (bvnot (ite (= w1 v1) #b1 #b0)))))))))))) (bvadd (ite (= #b00 (ite $e15 $e25 (ite $e16 $e31 (ite $e17 $e27 (ite $e18 $e29 #b00))))) (ite $e15 $e11 (ite $e16 $e10 (ite $e17 $e9 (ite $e18 $e8 #b00000000)))) $e6) (ite (= #b00 (ite $e20 $e25 (ite $e21 $e31 (ite $e22 $e27 (ite $e23 $e29 #b00))))) (ite $e20 $e11 (ite $e21 $e10 (ite $e22 $e9 (ite $e23 $e8 #b00000000)))) $e6)) (ite (= #b1 (bvand (ite $e1 #b1 #b0) (bvand inst_v $e7))) $e6 $e8))))))))))))))))))))))))))))))))))
(define-fun FunNew ((RTL_registers[3] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[3] RTL_registers[3]))
(define-fun FunNew ((oper2 (_ BitVec 8)) (op (_ BitVec 8)) (reg0 (_ BitVec 8)) (reg2 (_ BitVec 8)) (reg1 (_ BitVec 8)) (reg3 (_ BitVec 8)) (oper1 (_ BitVec 8)) (inst_v (_ BitVec 8)) (w1 (_ BitVec 8)) (s1 (_ BitVec 8)) (v0 (_ BitVec 8)) (s0 (_ BitVec 8)) (inst (_ BitVec 8)) (ex_val (_ BitVec 8)) (v1 (_ BitVec 8)) (s2 (_ BitVec 8)) (v2 (_ BitVec 8)) (s3 (_ BitVec 8)) (rd2 (_ BitVec 8)) (rd1 (_ BitVec 8)) (w2 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 (= #b00 rd1))) (let (($e2 (bvand w2 v2))) (let (($e3 (= #b00 rd2))) (let (($e4 (= #b01 rd1))) (let (($e5 (= #b01 rd2))) (let (($e6 (= #b10 rd1))) (let (($e7 (= #b10 rd2))) (let (($e8 (= #b11 rd1))) (let (($e9 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e10 (bvand w1 (bvnot v0)))) (let (($e11 (ite (= #b1 (bvand $e2 (ite $e3 #b1 #b0))) ex_val reg0))) (let (($e12 (ite (= #b1 (bvand $e2 (ite (and $e5 (not $e3)) #b1 #b0))) ex_val reg1))) (let (($e13 (ite (= #b1 (bvand $e2 (ite (and $e7 (not $e5) (not $e3)) #b1 #b0))) ex_val reg2))) (let (($e14 (ite (= #b1 (bvand $e2 (ite (and (= #b11 rd2) (not $e7) (not $e5) (not $e3)) #b1 #b0))) ex_val reg3))) (let (($e15 (bvand v1 $e10))) (let (($e16 ((_ extract 7 6) inst))) (let (($e17 ((_ extract 1 0) inst))) (let (($e18 ((_ extract 5 4) inst))) (let (($e19 (= #b11 $e18))) (let (($e20 (= #b10 $e18))) (let (($e21 (= #b01 $e18))) (let (($e22 (= #b00 $e18))) (let (($e23 ((_ extract 3 2) inst))) (let (($e24 (= #b11 $e23))) (let (($e25 (= #b10 $e23))) (let (($e26 (= #b01 $e23))) (let (($e27 (= #b00 $e23))) (let (($e28 (bvand (bvnot (bvand (bvnot v1) (bvnot (bvand (bvnot v2) ((_ extract 0 0) s3))))) (bvnot (bvand v1 (bvnot (bvand (ite $e8 #b1 #b0) $e15))))))) (let (($e29 (bvand (concat (bvnot v1) $e28) (concat ((_ extract 1 1) s3) $e28)))) (let (($e30 (bvand (bvnot (bvand (bvnot v1) (bvnot (bvand (bvnot v2) ((_ extract 0 0) s1))))) (bvnot (bvand v1 (bvnot (bvand (ite $e4 #b1 #b0) $e15))))))) (let (($e31 (bvand (concat (bvnot v1) $e30) (concat ((_ extract 1 1) s1) $e30)))) (let (($e32 (bvand (bvnot (bvand (bvnot v1) (bvnot (bvand (bvnot v2) ((_ extract 0 0) s0))))) (bvnot (bvand v1 (bvnot (bvand (ite $e1 #b1 #b0) $e15))))))) (let (($e33 (bvand (concat (bvnot v1) $e32) (concat ((_ extract 1 1) s0) $e32)))) (let (($e34 (bvand (bvnot (bvand (bvnot v1) (bvnot (bvand (bvnot v2) ((_ extract 0 0) s2))))) (bvnot (bvand v1 (bvnot (bvand (ite $e6 #b1 #b0) $e15))))))) (let (($e35 (bvand (concat (bvnot v1) $e34) (concat ((_ extract 1 1) s2) $e34)))) (ite (= #b1 (bvand (bvand inst_v (bvand (bvnot (bvand (bvnot inst_v) (bvnot $e10))) (bvnot (bvand inst_v (bvnot (bvand (bvnot (bvand inst_v (ite (and (not (= #b01 $e16)) (not (= #b10 $e16)) (not (= #b11 $e16))) #b1 #b0))) (bvnot (bvand (bvnot inst_v) (bvnot (ite (= w1 v1) #b1 #b0)))))))))) (ite (and (= #b11 $e17) (not (= #b10 $e17)) (not (= #b01 $e17)) (not (= #b00 $e17))) #b1 #b0))) (bvadd (ite (= #b00 (ite $e19 $e29 (ite $e20 $e35 (ite $e21 $e31 (ite $e22 $e33 #b00))))) (ite $e19 $e14 (ite $e20 $e13 (ite $e21 $e12 (ite $e22 $e11 #b00000000)))) $e9) (ite (= #b00 (ite $e24 $e29 (ite $e25 $e35 (ite $e26 $e31 (ite $e27 $e33 #b00))))) (ite $e24 $e14 (ite $e25 $e13 (ite $e26 $e12 (ite $e27 $e11 #b00000000)))) $e9)) (ite (= #b1 (bvand (ite (and $e8 (not $e6) (not $e4) (not $e1)) #b1 #b0) (bvand inst_v $e10))) $e9 $e14))))))))))))))))))))))))))))))))))))))
(define-fun FunNew ((RTL_registers[2] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[2] RTL_registers[2]))
(define-fun FunNew ((oper2 (_ BitVec 8)) (op (_ BitVec 8)) (reg0 (_ BitVec 8)) (reg2 (_ BitVec 8)) (reg1 (_ BitVec 8)) (reg3 (_ BitVec 8)) (oper1 (_ BitVec 8)) (inst_v (_ BitVec 8)) (w1 (_ BitVec 8)) (s1 (_ BitVec 8)) (v0 (_ BitVec 8)) (s0 (_ BitVec 8)) (inst (_ BitVec 8)) (ex_val (_ BitVec 8)) (v1 (_ BitVec 8)) (s2 (_ BitVec 8)) (v2 (_ BitVec 8)) (s3 (_ BitVec 8)) (rd2 (_ BitVec 8)) (rd1 (_ BitVec 8)) (w2 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 (= #b00 rd1))) (let (($e2 (bvand w2 v2))) (let (($e3 (= #b00 rd2))) (let (($e4 (= #b01 rd1))) (let (($e5 (= #b01 rd2))) (let (($e6 (= #b10 rd1))) (let (($e7 (= #b10 rd2))) (let (($e8 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e9 (bvand w1 (bvnot v0)))) (let (($e10 (ite (= #b1 (bvand $e2 (ite $e3 #b1 #b0))) ex_val reg0))) (let (($e11 (ite (= #b1 (bvand $e2 (ite (and $e5 (not $e3)) #b1 #b0))) ex_val reg1))) (let (($e12 (ite (= #b1 (bvand $e2 (ite (and $e7 (not $e5) (not $e3)) #b1 #b0))) ex_val reg2))) (let (($e13 (ite (= #b1 (bvand $e2 (ite (and (= #b11 rd2) (not $e7) (not $e5) (not $e3)) #b1 #b0))) ex_val reg3))) (let (($e14 (bvand v1 $e9))) (let (($e15 ((_ extract 7 6) inst))) (let (($e16 ((_ extract 1 0) inst))) (let (($e17 ((_ extract 5 4) inst))) (let (($e18 (= #b11 $e17))) (let (($e19 (= #b10 $e17))) (let (($e20 (= #b01 $e17))) (let (($e21 (= #b00 $e17))) (let (($e22 ((_ extract 3 2) inst))) (let (($e23 (= #b11 $e22))) (let (($e24 (= #b10 $e22))) (let (($e25 (= #b01 $e22))) (let (($e26 (= #b00 $e22))) (let (($e27 (bvand (bvnot (bvand (bvnot v1) (bvnot (bvand (bvnot v2) ((_ extract 0 0) s3))))) (bvnot (bvand v1 (bvnot (bvand (ite (= #b11 rd1) #b1 #b0) $e14))))))) (let (($e28 (bvand (concat (bvnot v1) $e27) (concat ((_ extract 1 1) s3) $e27)))) (let (($e29 (bvand (bvnot (bvand (bvnot v1) (bvnot (bvand (bvnot v2) ((_ extract 0 0) s1))))) (bvnot (bvand v1 (bvnot (bvand (ite $e4 #b1 #b0) $e14))))))) (let (($e30 (bvand (concat (bvnot v1) $e29) (concat ((_ extract 1 1) s1) $e29)))) (let (($e31 (bvand (bvnot (bvand (bvnot v1) (bvnot (bvand (bvnot v2) ((_ extract 0 0) s0))))) (bvnot (bvand v1 (bvnot (bvand (ite $e1 #b1 #b0) $e14))))))) (let (($e32 (bvand (concat (bvnot v1) $e31) (concat ((_ extract 1 1) s0) $e31)))) (let (($e33 (bvand (bvnot (bvand (bvnot v1) (bvnot (bvand (bvnot v2) ((_ extract 0 0) s2))))) (bvnot (bvand v1 (bvnot (bvand (ite $e6 #b1 #b0) $e14))))))) (let (($e34 (bvand (concat (bvnot v1) $e33) (concat ((_ extract 1 1) s2) $e33)))) (ite (= #b1 (bvand (bvand inst_v (bvand (bvnot (bvand (bvnot inst_v) (bvnot $e9))) (bvnot (bvand inst_v (bvnot (bvand (bvnot (bvand inst_v (ite (and (not (= #b01 $e15)) (not (= #b10 $e15)) (not (= #b11 $e15))) #b1 #b0))) (bvnot (bvand (bvnot inst_v) (bvnot (ite (= w1 v1) #b1 #b0)))))))))) (ite (and (= #b10 $e16) (not (= #b01 $e16)) (not (= #b00 $e16))) #b1 #b0))) (bvadd (ite (= #b00 (ite $e18 $e28 (ite $e19 $e34 (ite $e20 $e30 (ite $e21 $e32 #b00))))) (ite $e18 $e13 (ite $e19 $e12 (ite $e20 $e11 (ite $e21 $e10 #b00000000)))) $e8) (ite (= #b00 (ite $e23 $e28 (ite $e24 $e34 (ite $e25 $e30 (ite $e26 $e32 #b00))))) (ite $e23 $e13 (ite $e24 $e12 (ite $e25 $e11 (ite $e26 $e10 #b00000000)))) $e8)) (ite (= #b1 (bvand (ite (and $e6 (not $e4) (not $e1)) #b1 #b0) (bvand inst_v $e9))) $e8 $e12)))))))))))))))))))))))))))))))))))))
(define-fun FunNew ((RTL_registers[1] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[1] RTL_registers[1]))
(define-fun FunNew ((oper2 (_ BitVec 8)) (op (_ BitVec 8)) (reg0 (_ BitVec 8)) (reg2 (_ BitVec 8)) (reg1 (_ BitVec 8)) (reg3 (_ BitVec 8)) (oper1 (_ BitVec 8)) (inst_v (_ BitVec 8)) (w1 (_ BitVec 8)) (s1 (_ BitVec 8)) (v0 (_ BitVec 8)) (s0 (_ BitVec 8)) (inst (_ BitVec 8)) (ex_val (_ BitVec 8)) (v1 (_ BitVec 8)) (s2 (_ BitVec 8)) (v2 (_ BitVec 8)) (s3 (_ BitVec 8)) (rd2 (_ BitVec 8)) (rd1 (_ BitVec 8)) (w2 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 (= #b00 rd1))) (let (($e2 (bvand w2 v2))) (let (($e3 (= #b00 rd2))) (let (($e4 (= #b01 rd1))) (let (($e5 (= #b01 rd2))) (let (($e6 (= #b10 rd2))) (let (($e7 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e8 (bvand w1 (bvnot v0)))) (let (($e9 (ite (= #b1 (bvand $e2 (ite $e3 #b1 #b0))) ex_val reg0))) (let (($e10 (ite (= #b1 (bvand $e2 (ite (and $e5 (not $e3)) #b1 #b0))) ex_val reg1))) (let (($e11 (ite (= #b1 (bvand $e2 (ite (and $e6 (not $e5) (not $e3)) #b1 #b0))) ex_val reg2))) (let (($e12 (ite (= #b1 (bvand $e2 (ite (and (= #b11 rd2) (not $e6) (not $e5) (not $e3)) #b1 #b0))) ex_val reg3))) (let (($e13 (bvand v1 $e8))) (let (($e14 ((_ extract 7 6) inst))) (let (($e15 ((_ extract 1 0) inst))) (let (($e16 ((_ extract 5 4) inst))) (let (($e17 (= #b11 $e16))) (let (($e18 (= #b10 $e16))) (let (($e19 (= #b01 $e16))) (let (($e20 (= #b00 $e16))) (let (($e21 ((_ extract 3 2) inst))) (let (($e22 (= #b11 $e21))) (let (($e23 (= #b10 $e21))) (let (($e24 (= #b01 $e21))) (let (($e25 (= #b00 $e21))) (let (($e26 (bvand (bvnot (bvand (bvnot v1) (bvnot (bvand (bvnot v2) ((_ extract 0 0) s3))))) (bvnot (bvand v1 (bvnot (bvand (ite (= #b11 rd1) #b1 #b0) $e13))))))) (let (($e27 (bvand (concat (bvnot v1) $e26) (concat ((_ extract 1 1) s3) $e26)))) (let (($e28 (bvand (bvnot (bvand (bvnot v1) (bvnot (bvand (bvnot v2) ((_ extract 0 0) s1))))) (bvnot (bvand v1 (bvnot (bvand (ite $e4 #b1 #b0) $e13))))))) (let (($e29 (bvand (concat (bvnot v1) $e28) (concat ((_ extract 1 1) s1) $e28)))) (let (($e30 (bvand (bvnot (bvand (bvnot v1) (bvnot (bvand (bvnot v2) ((_ extract 0 0) s0))))) (bvnot (bvand v1 (bvnot (bvand (ite $e1 #b1 #b0) $e13))))))) (let (($e31 (bvand (concat (bvnot v1) $e30) (concat ((_ extract 1 1) s0) $e30)))) (let (($e32 (bvand (bvnot (bvand (bvnot v1) (bvnot (bvand (bvnot v2) ((_ extract 0 0) s2))))) (bvnot (bvand v1 (bvnot (bvand (ite (= #b10 rd1) #b1 #b0) $e13))))))) (let (($e33 (bvand (concat (bvnot v1) $e32) (concat ((_ extract 1 1) s2) $e32)))) (ite (= #b1 (bvand (bvand inst_v (bvand (bvnot (bvand (bvnot inst_v) (bvnot $e8))) (bvnot (bvand inst_v (bvnot (bvand (bvnot (bvand inst_v (ite (and (not (= #b01 $e14)) (not (= #b10 $e14)) (not (= #b11 $e14))) #b1 #b0))) (bvnot (bvand (bvnot inst_v) (bvnot (ite (= w1 v1) #b1 #b0)))))))))) (ite (and (not (= #b00 $e15)) (= #b01 $e15)) #b1 #b0))) (bvadd (ite (= #b00 (ite $e17 $e27 (ite $e18 $e33 (ite $e19 $e29 (ite $e20 $e31 #b00))))) (ite $e17 $e12 (ite $e18 $e11 (ite $e19 $e10 (ite $e20 $e9 #b00000000)))) $e7) (ite (= #b00 (ite $e22 $e27 (ite $e23 $e33 (ite $e24 $e29 (ite $e25 $e31 #b00))))) (ite $e22 $e12 (ite $e23 $e11 (ite $e24 $e10 (ite $e25 $e9 #b00000000)))) $e7)) (ite (= #b1 (bvand (ite (and $e4 (not $e1)) #b1 #b0) (bvand inst_v $e8))) $e7 $e10))))))))))))))))))))))))))))))))))))
