(define-fun FunNew ((RTL_ex_wb_rd (_ BitVec 2))) (_ BitVec 2) (ite (= #b1 #b1) RTL_ex_wb_rd RTL_ex_wb_rd))
(define-fun FunNew ((inst_id (_ BitVec 2)) ) (_ BitVec 2) ((_ extract 1 0) inst_id))
(define-fun FunNew ((RTL_id_ex_rd (_ BitVec 2))) (_ BitVec 2) (ite (= #b1 #b1) RTL_id_ex_rd RTL_id_ex_rd))
(define-fun FunNew ((inst (_ BitVec 2)) ) (_ BitVec 2) ((_ extract 1 0) inst))
(define-fun FunNew ((RTL_id_ex_valid (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) RTL_id_ex_valid RTL_id_ex_valid))
(define-fun FunNew ((v1 (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) v1 v1))
(define-fun FunNew ((RTL_registers[2] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[2] RTL_registers[2]))
(define-fun FunNew ((rd2 (_ BitVec 8)) (w2 (_ BitVec 8)) (rd1 (_ BitVec 8)) (oper1 (_ BitVec 8)) (oper2 (_ BitVec 8)) (inst_id (_ BitVec 8)) (w1 (_ BitVec 8)) (s1 (_ BitVec 8)) (s0 (_ BitVec 8)) (v2 (_ BitVec 8)) (s3 (_ BitVec 8)) (s2 (_ BitVec 8)) (reg0 (_ BitVec 8)) (v1 (_ BitVec 8)) (ex_val (_ BitVec 8)) (op (_ BitVec 8)) (reg2 (_ BitVec 8)) (reg3 (_ BitVec 8)) (reg1 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 ((_ extract 7 6) inst_id))) (let (($e2 (= #b10 $e1))) (let (($e3 (= #b01 $e1))) (let (($e4 (= #b11 $e1))) (let (($e5 ((_ extract 1 0) inst_id))) (let (($e6 (concat #b0000 ((_ extract 5 2) inst_id)))) (let (($e7 ((_ extract 5 4) inst_id))) (let (($e8 (= #b11 $e7))) (let (($e9 (= #b10 $e7))) (let (($e10 (= #b01 $e7))) (let (($e11 (= #b00 $e7))) (let (($e12 (ite $e8 s3 (ite $e9 s2 (ite $e10 s1 (ite $e11 s0 #b00)))))) (let (($e13 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e14 (ite $e2 $e6 (ite (= #b00 $e12) (ite $e8 reg3 (ite $e9 reg2 (ite $e10 reg1 (ite $e11 reg0 #b00000000)))) (ite (= #b01 $e12) ex_val $e13))))) (let (($e15 ((_ extract 3 2) inst_id))) (let (($e16 (= #b11 $e15))) (let (($e17 (= #b10 $e15))) (let (($e18 (= #b01 $e15))) (let (($e19 (= #b00 $e15))) (let (($e20 (ite $e16 s3 (ite $e17 s2 (ite $e18 s1 (ite $e19 s0 #b00)))))) (let (($e21 (ite (= #b00 $e20) (ite $e16 reg3 (ite $e17 reg2 (ite $e18 reg1 (ite $e19 reg0 #b00000000)))) (ite (= #b01 $e20) ex_val $e13)))) (ite (= #b1 (bvand (ite (and (= #b10 $e5) (not (= #b01 $e5)) (not (= #b00 $e5))) #b1 #b0) (bvand v1 (bvand (bvnot (bvand v1 (ite (and (not $e3) (not $e2) (not $e4)) #b1 #b0))) (bvnot (bvand (bvnot w1) (bvnot v1))))))) (ite $e3 (bvadd $e14 $e21) (ite $e2 $e6 (ite $e4 (bvnot (bvand $e14 $e21)) #b00000000))) (ite (= #b1 (bvand (bvand w1 v1) (ite (and (= #b10 rd1) (not (= #b01 rd1)) (not (= #b00 rd1))) #b1 #b0))) $e13 (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2)))))))))))))))))))))))))
(define-fun FunNew ((RTL_id_ex_operand1 (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_id_ex_operand1 RTL_id_ex_operand1))
(define-fun FunNew ((s1 (_ BitVec 8)) (s2 (_ BitVec 8)) (reg0 (_ BitVec 8)) (reg2 (_ BitVec 8)) (s0 (_ BitVec 8)) (inst (_ BitVec 8)) (w2 (_ BitVec 8)) (v0 (_ BitVec 8)) (w1 (_ BitVec 8)) (rd1 (_ BitVec 8)) (inst_id (_ BitVec 8)) (oper2 (_ BitVec 8)) (op (_ BitVec 8)) (oper1 (_ BitVec 8)) (s3 (_ BitVec 8)) (v2 (_ BitVec 8)) (ex_val (_ BitVec 8)) (rd2 (_ BitVec 8)) (reg1 (_ BitVec 8)) (reg3 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 (= #b00 rd1))) (let (($e2 (bvand w2 v2))) (let (($e3 (= #b00 rd2))) (let (($e4 (= #b01 rd1))) (let (($e5 (= #b01 rd2))) (let (($e6 (= #b10 rd1))) (let (($e7 (= #b10 rd2))) (let (($e8 ((_ extract 7 6) inst_id))) (let (($e9 (= #b10 $e8))) (let (($e10 (= #b01 $e8))) (let (($e11 (= #b11 $e8))) (let (($e12 (and (not $e10) (not $e9) (not $e11)))) (let (($e13 (bvand v0 (bvnot (ite $e12 #b1 #b0))))) (let (($e14 ((_ extract 1 0) inst_id))) (let (($e15 (= #b01 $e14))) (let (($e16 (= #b00 $e14))) (let (($e17 (= #b10 $e14))) (let (($e18 (= #b11 $e14))) (let (($e19 (concat #b0000 ((_ extract 5 2) inst_id)))) (let (($e20 ((_ extract 5 4) inst_id))) (let (($e21 (= #b11 $e20))) (let (($e22 (= #b10 $e20))) (let (($e23 (= #b01 $e20))) (let (($e24 (= #b00 $e20))) (let (($e25 (ite $e21 s3 (ite $e22 s2 (ite $e23 s1 (ite $e24 s0 #b00)))))) (let (($e26 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e27 (ite $e9 $e19 (ite (= #b00 $e25) (ite $e21 reg3 (ite $e22 reg2 (ite $e23 reg1 (ite $e24 reg0 #b00000000)))) (ite (= #b01 $e25) ex_val $e26))))) (let (($e28 ((_ extract 3 2) inst_id))) (let (($e29 (= #b11 $e28))) (let (($e30 (= #b10 $e28))) (let (($e31 (= #b01 $e28))) (let (($e32 (= #b00 $e28))) (let (($e33 (ite $e29 s3 (ite $e30 s2 (ite $e31 s1 (ite $e32 s0 #b00)))))) (let (($e34 (ite (= #b00 $e33) (ite $e29 reg3 (ite $e30 reg2 (ite $e31 reg1 (ite $e32 reg0 #b00000000)))) (ite (= #b01 $e33) ex_val $e26)))) (let (($e35 ((_ extract 5 4) inst))) (let (($e36 (= #b11 $e35))) (let (($e37 (= #b10 $e35))) (let (($e38 (= #b01 $e35))) (let (($e39 (= #b00 $e35))) (let (($e40 (and $e16 (not $e12)))) (let (($e41 (and $e15 (not $e12)))) (let (($e42 (and $e17 (not $e12)))) (let (($e43 (and $e18 (not $e12)))) (ite (= #b00 (ite $e36 (bvand (concat #b0 (ite $e43 #b1 #b0)) (concat (bvand $e13 (ite $e18 #b1 #b0)) (ite $e43 #b1 #b0))) (ite $e37 (bvand (concat #b0 (ite $e42 #b1 #b0)) (concat (bvand $e13 (ite $e17 #b1 #b0)) (ite $e42 #b1 #b0))) (ite $e38 (bvand (concat #b0 (ite $e41 #b1 #b0)) (concat (bvand $e13 (ite $e15 #b1 #b0)) (ite $e41 #b1 #b0))) (ite $e39 (bvand (concat #b0 (ite $e40 #b1 #b0)) (concat (bvand $e13 (ite $e16 #b1 #b0)) (ite $e40 #b1 #b0))) #b00))))) (ite $e36 (ite (= #b1 (bvand w1 (ite (and (= #b11 rd1) (not $e6) (not $e4) (not $e1)) #b1 #b0))) $e26 (ite (= #b1 (bvand $e2 (ite (and (= #b11 rd2) (not $e7) (not $e5) (not $e3)) #b1 #b0))) ex_val reg3)) (ite $e37 (ite (= #b1 (bvand w1 (ite (and $e6 (not $e4) (not $e1)) #b1 #b0))) $e26 (ite (= #b1 (bvand $e2 (ite (and $e7 (not $e5) (not $e3)) #b1 #b0))) ex_val reg2)) (ite $e38 (ite (= #b1 (bvand w1 (ite (and $e4 (not $e1)) #b1 #b0))) $e26 (ite (= #b1 (bvand $e2 (ite (and $e5 (not $e3)) #b1 #b0))) ex_val reg1)) (ite $e39 (ite (= #b1 (bvand w1 (ite $e1 #b1 #b0))) $e26 (ite (= #b1 (bvand $e2 (ite $e3 #b1 #b0))) ex_val reg0)) #b00000000)))) (ite $e10 (bvadd $e27 $e34) (ite $e9 $e19 (ite $e11 (bvnot (bvand $e27 $e34)) #b00000000))))))))))))))))))))))))))))))))))))))))))))))))
(define-fun FunNew ((RTL_id_ex_operand2 (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_id_ex_operand2 RTL_id_ex_operand2))
(define-fun FunNew ((s1 (_ BitVec 8)) (s2 (_ BitVec 8)) (reg0 (_ BitVec 8)) (reg2 (_ BitVec 8)) (s0 (_ BitVec 8)) (inst (_ BitVec 8)) (w2 (_ BitVec 8)) (v0 (_ BitVec 8)) (w1 (_ BitVec 8)) (rd1 (_ BitVec 8)) (inst_id (_ BitVec 8)) (oper2 (_ BitVec 8)) (op (_ BitVec 8)) (oper1 (_ BitVec 8)) (s3 (_ BitVec 8)) (v2 (_ BitVec 8)) (ex_val (_ BitVec 8)) (rd2 (_ BitVec 8)) (reg1 (_ BitVec 8)) (reg3 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 (= #b00 rd1))) (let (($e2 (bvand w2 v2))) (let (($e3 (= #b00 rd2))) (let (($e4 (= #b01 rd1))) (let (($e5 (= #b01 rd2))) (let (($e6 (= #b10 rd1))) (let (($e7 (= #b10 rd2))) (let (($e8 ((_ extract 7 6) inst_id))) (let (($e9 (= #b10 $e8))) (let (($e10 (= #b01 $e8))) (let (($e11 (= #b11 $e8))) (let (($e12 (and (not $e10) (not $e9) (not $e11)))) (let (($e13 (bvand v0 (bvnot (ite $e12 #b1 #b0))))) (let (($e14 ((_ extract 1 0) inst_id))) (let (($e15 (= #b01 $e14))) (let (($e16 (= #b00 $e14))) (let (($e17 (= #b10 $e14))) (let (($e18 (= #b11 $e14))) (let (($e19 (concat #b0000 ((_ extract 5 2) inst_id)))) (let (($e20 ((_ extract 5 4) inst_id))) (let (($e21 (= #b11 $e20))) (let (($e22 (= #b10 $e20))) (let (($e23 (= #b01 $e20))) (let (($e24 (= #b00 $e20))) (let (($e25 (ite $e21 s3 (ite $e22 s2 (ite $e23 s1 (ite $e24 s0 #b00)))))) (let (($e26 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e27 (ite $e9 $e19 (ite (= #b00 $e25) (ite $e21 reg3 (ite $e22 reg2 (ite $e23 reg1 (ite $e24 reg0 #b00000000)))) (ite (= #b01 $e25) ex_val $e26))))) (let (($e28 ((_ extract 3 2) inst_id))) (let (($e29 (= #b11 $e28))) (let (($e30 (= #b10 $e28))) (let (($e31 (= #b01 $e28))) (let (($e32 (= #b00 $e28))) (let (($e33 (ite $e29 s3 (ite $e30 s2 (ite $e31 s1 (ite $e32 s0 #b00)))))) (let (($e34 (ite (= #b00 $e33) (ite $e29 reg3 (ite $e30 reg2 (ite $e31 reg1 (ite $e32 reg0 #b00000000)))) (ite (= #b01 $e33) ex_val $e26)))) (let (($e35 ((_ extract 3 2) inst))) (let (($e36 (= #b11 $e35))) (let (($e37 (= #b10 $e35))) (let (($e38 (= #b01 $e35))) (let (($e39 (= #b00 $e35))) (let (($e40 (and $e16 (not $e12)))) (let (($e41 (and $e15 (not $e12)))) (let (($e42 (and $e17 (not $e12)))) (let (($e43 (and $e18 (not $e12)))) (ite (= #b00 (ite $e36 (bvand (concat #b0 (ite $e43 #b1 #b0)) (concat (bvand $e13 (ite $e18 #b1 #b0)) (ite $e43 #b1 #b0))) (ite $e37 (bvand (concat #b0 (ite $e42 #b1 #b0)) (concat (bvand $e13 (ite $e17 #b1 #b0)) (ite $e42 #b1 #b0))) (ite $e38 (bvand (concat #b0 (ite $e41 #b1 #b0)) (concat (bvand $e13 (ite $e15 #b1 #b0)) (ite $e41 #b1 #b0))) (ite $e39 (bvand (concat #b0 (ite $e40 #b1 #b0)) (concat (bvand $e13 (ite $e16 #b1 #b0)) (ite $e40 #b1 #b0))) #b00))))) (ite $e36 (ite (= #b1 (bvand w1 (ite (and (= #b11 rd1) (not $e6) (not $e4) (not $e1)) #b1 #b0))) $e26 (ite (= #b1 (bvand $e2 (ite (and (= #b11 rd2) (not $e7) (not $e5) (not $e3)) #b1 #b0))) ex_val reg3)) (ite $e37 (ite (= #b1 (bvand w1 (ite (and $e6 (not $e4) (not $e1)) #b1 #b0))) $e26 (ite (= #b1 (bvand $e2 (ite (and $e7 (not $e5) (not $e3)) #b1 #b0))) ex_val reg2)) (ite $e38 (ite (= #b1 (bvand w1 (ite (and $e4 (not $e1)) #b1 #b0))) $e26 (ite (= #b1 (bvand $e2 (ite (and $e5 (not $e3)) #b1 #b0))) ex_val reg1)) (ite $e39 (ite (= #b1 (bvand w1 (ite $e1 #b1 #b0))) $e26 (ite (= #b1 (bvand $e2 (ite $e3 #b1 #b0))) ex_val reg0)) #b00000000)))) (ite $e10 (bvadd $e27 $e34) (ite $e9 $e19 (ite $e11 (bvnot (bvand $e27 $e34)) #b00000000))))))))))))))))))))))))))))))))))))))))))))))))
(define-fun FunNew ((RTL_ex_wb_val (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_ex_wb_val RTL_ex_wb_val))
(define-fun FunNew ((oper2 (_ BitVec 8)) (reg1 (_ BitVec 8)) (reg2 (_ BitVec 8)) (reg3 (_ BitVec 8)) (s0 (_ BitVec 8)) (s1 (_ BitVec 8)) (oper1 (_ BitVec 8)) (op (_ BitVec 8)) (ex_val (_ BitVec 8)) (reg0 (_ BitVec 8)) (s2 (_ BitVec 8)) (s3 (_ BitVec 8)) (inst_id (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 ((_ extract 7 6) inst_id))) (let (($e2 (= #b10 $e1))) (let (($e3 (concat #b0000 ((_ extract 5 2) inst_id)))) (let (($e4 ((_ extract 5 4) inst_id))) (let (($e5 (= #b11 $e4))) (let (($e6 (= #b10 $e4))) (let (($e7 (= #b01 $e4))) (let (($e8 (= #b00 $e4))) (let (($e9 (ite $e5 s3 (ite $e6 s2 (ite $e7 s1 (ite $e8 s0 #b00)))))) (let (($e10 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e11 (ite $e2 $e3 (ite (= #b00 $e9) (ite $e5 reg3 (ite $e6 reg2 (ite $e7 reg1 (ite $e8 reg0 #b00000000)))) (ite (= #b01 $e9) ex_val $e10))))) (let (($e12 ((_ extract 3 2) inst_id))) (let (($e13 (= #b11 $e12))) (let (($e14 (= #b10 $e12))) (let (($e15 (= #b01 $e12))) (let (($e16 (= #b00 $e12))) (let (($e17 (ite $e13 s3 (ite $e14 s2 (ite $e15 s1 (ite $e16 s0 #b00)))))) (let (($e18 (ite (= #b00 $e17) (ite $e13 reg3 (ite $e14 reg2 (ite $e15 reg1 (ite $e16 reg0 #b00000000)))) (ite (= #b01 $e17) ex_val $e10)))) (ite (= #b01 $e1) (bvadd $e11 $e18) (ite $e2 $e3 (ite (= #b11 $e1) (bvnot (bvand $e11 $e18)) #b00000000))))))))))))))))))))))
(define-fun FunNew ((RTL_registers[3] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[3] RTL_registers[3]))
(define-fun FunNew ((rd2 (_ BitVec 8)) (w2 (_ BitVec 8)) (rd1 (_ BitVec 8)) (oper1 (_ BitVec 8)) (oper2 (_ BitVec 8)) (inst_id (_ BitVec 8)) (w1 (_ BitVec 8)) (s1 (_ BitVec 8)) (s0 (_ BitVec 8)) (v2 (_ BitVec 8)) (s3 (_ BitVec 8)) (s2 (_ BitVec 8)) (reg0 (_ BitVec 8)) (v1 (_ BitVec 8)) (ex_val (_ BitVec 8)) (op (_ BitVec 8)) (reg2 (_ BitVec 8)) (reg3 (_ BitVec 8)) (reg1 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 ((_ extract 7 6) inst_id))) (let (($e2 (= #b10 $e1))) (let (($e3 (= #b01 $e1))) (let (($e4 (= #b11 $e1))) (let (($e5 ((_ extract 1 0) inst_id))) (let (($e6 (concat #b0000 ((_ extract 5 2) inst_id)))) (let (($e7 ((_ extract 5 4) inst_id))) (let (($e8 (= #b11 $e7))) (let (($e9 (= #b10 $e7))) (let (($e10 (= #b01 $e7))) (let (($e11 (= #b00 $e7))) (let (($e12 (ite $e8 s3 (ite $e9 s2 (ite $e10 s1 (ite $e11 s0 #b00)))))) (let (($e13 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e14 (ite $e2 $e6 (ite (= #b00 $e12) (ite $e8 reg3 (ite $e9 reg2 (ite $e10 reg1 (ite $e11 reg0 #b00000000)))) (ite (= #b01 $e12) ex_val $e13))))) (let (($e15 ((_ extract 3 2) inst_id))) (let (($e16 (= #b11 $e15))) (let (($e17 (= #b10 $e15))) (let (($e18 (= #b01 $e15))) (let (($e19 (= #b00 $e15))) (let (($e20 (ite $e16 s3 (ite $e17 s2 (ite $e18 s1 (ite $e19 s0 #b00)))))) (let (($e21 (ite (= #b00 $e20) (ite $e16 reg3 (ite $e17 reg2 (ite $e18 reg1 (ite $e19 reg0 #b00000000)))) (ite (= #b01 $e20) ex_val $e13)))) (ite (= #b1 (bvand (ite (and (= #b11 $e5) (not (= #b10 $e5)) (not (= #b01 $e5)) (not (= #b00 $e5))) #b1 #b0) (bvand v1 (bvand (bvnot (bvand v1 (ite (and (not $e3) (not $e2) (not $e4)) #b1 #b0))) (bvnot (bvand (bvnot w1) (bvnot v1))))))) (ite $e3 (bvadd $e14 $e21) (ite $e2 $e6 (ite $e4 (bvnot (bvand $e14 $e21)) #b00000000))) (ite (= #b1 (bvand (bvand w1 v1) (ite (and (= #b11 rd1) (not (= #b10 rd1)) (not (= #b01 rd1)) (not (= #b00 rd1))) #b1 #b0))) $e13 (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3)))))))))))))))))))))))))
(define-fun FunNew ((RTL_id_ex_reg_wen (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) RTL_id_ex_reg_wen RTL_id_ex_reg_wen))
(define-fun FunNew ((inst_id (_ BitVec 1)) (inst (_ BitVec 1)) (v1 (_ BitVec 1)) ) (_ BitVec 1) (let (($e1 ((_ extract 7 6) inst_id))) (let (($e2 ((_ extract 7 6) inst))) (bvand (bvnot (bvand v1 (ite (and (not (= #b01 $e2)) (not (= #b10 $e2)) (not (= #b11 $e2))) #b1 #b0))) (bvnot (bvand (bvnot v1) (ite (and (not (= #b01 $e1)) (not (= #b10 $e1)) (not (= #b11 $e1))) #b1 #b0)))))))
(define-fun FunNew ((RTL_id_ex_op (_ BitVec 2))) (_ BitVec 2) (ite (= #b1 #b1) RTL_id_ex_op RTL_id_ex_op))
(define-fun FunNew ((inst (_ BitVec 2)) ) (_ BitVec 2) ((_ extract 7 6) inst))
(define-fun FunNew ((RTL_registers[1] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[1] RTL_registers[1]))
(define-fun FunNew ((rd2 (_ BitVec 8)) (w2 (_ BitVec 8)) (rd1 (_ BitVec 8)) (oper1 (_ BitVec 8)) (oper2 (_ BitVec 8)) (inst_id (_ BitVec 8)) (w1 (_ BitVec 8)) (s1 (_ BitVec 8)) (s0 (_ BitVec 8)) (v2 (_ BitVec 8)) (s3 (_ BitVec 8)) (s2 (_ BitVec 8)) (reg0 (_ BitVec 8)) (v1 (_ BitVec 8)) (ex_val (_ BitVec 8)) (op (_ BitVec 8)) (reg2 (_ BitVec 8)) (reg3 (_ BitVec 8)) (reg1 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 ((_ extract 7 6) inst_id))) (let (($e2 (= #b10 $e1))) (let (($e3 (= #b01 $e1))) (let (($e4 (= #b11 $e1))) (let (($e5 ((_ extract 1 0) inst_id))) (let (($e6 (concat #b0000 ((_ extract 5 2) inst_id)))) (let (($e7 ((_ extract 5 4) inst_id))) (let (($e8 (= #b11 $e7))) (let (($e9 (= #b10 $e7))) (let (($e10 (= #b01 $e7))) (let (($e11 (= #b00 $e7))) (let (($e12 (ite $e8 s3 (ite $e9 s2 (ite $e10 s1 (ite $e11 s0 #b00)))))) (let (($e13 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e14 (ite $e2 $e6 (ite (= #b00 $e12) (ite $e8 reg3 (ite $e9 reg2 (ite $e10 reg1 (ite $e11 reg0 #b00000000)))) (ite (= #b01 $e12) ex_val $e13))))) (let (($e15 ((_ extract 3 2) inst_id))) (let (($e16 (= #b11 $e15))) (let (($e17 (= #b10 $e15))) (let (($e18 (= #b01 $e15))) (let (($e19 (= #b00 $e15))) (let (($e20 (ite $e16 s3 (ite $e17 s2 (ite $e18 s1 (ite $e19 s0 #b00)))))) (let (($e21 (ite (= #b00 $e20) (ite $e16 reg3 (ite $e17 reg2 (ite $e18 reg1 (ite $e19 reg0 #b00000000)))) (ite (= #b01 $e20) ex_val $e13)))) (ite (= #b1 (bvand (ite (and (not (= #b00 $e5)) (= #b01 $e5)) #b1 #b0) (bvand v1 (bvand (bvnot (bvand v1 (ite (and (not $e3) (not $e2) (not $e4)) #b1 #b0))) (bvnot (bvand (bvnot w1) (bvnot v1))))))) (ite $e3 (bvadd $e14 $e21) (ite $e2 $e6 (ite $e4 (bvnot (bvand $e14 $e21)) #b00000000))) (ite (= #b1 (bvand (bvand w1 v1) (ite (and (= #b01 rd1) (not (= #b00 rd1))) #b1 #b0))) $e13 (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1)))))))))))))))))))))))))
(define-fun FunNew ((RTL_ex_wb_reg_wen (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) RTL_ex_wb_reg_wen RTL_ex_wb_reg_wen))
(define-fun FunNew ((w1 (_ BitVec 1)) (inst_id (_ BitVec 1)) (v1 (_ BitVec 1)) ) (_ BitVec 1) (let (($e1 ((_ extract 7 6) inst_id))) (bvand (bvnot (bvand v1 (ite (and (not (= #b01 $e1)) (not (= #b10 $e1)) (not (= #b11 $e1))) #b1 #b0))) (bvnot (bvand (bvnot w1) (bvnot v1))))))
(define-fun FunNew ((RTL_ex_wb_valid (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) RTL_ex_wb_valid RTL_ex_wb_valid))
#b0
(define-fun FunNew ((RTL_registers[0] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[0] RTL_registers[0]))
(define-fun FunNew ((rd2 (_ BitVec 8)) (w2 (_ BitVec 8)) (rd1 (_ BitVec 8)) (oper1 (_ BitVec 8)) (oper2 (_ BitVec 8)) (inst_id (_ BitVec 8)) (w1 (_ BitVec 8)) (s1 (_ BitVec 8)) (s0 (_ BitVec 8)) (v2 (_ BitVec 8)) (s3 (_ BitVec 8)) (s2 (_ BitVec 8)) (reg0 (_ BitVec 8)) (v1 (_ BitVec 8)) (ex_val (_ BitVec 8)) (op (_ BitVec 8)) (reg2 (_ BitVec 8)) (reg3 (_ BitVec 8)) (reg1 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 ((_ extract 7 6) inst_id))) (let (($e2 (= #b10 $e1))) (let (($e3 (= #b01 $e1))) (let (($e4 (= #b11 $e1))) (let (($e5 (concat #b0000 ((_ extract 5 2) inst_id)))) (let (($e6 ((_ extract 5 4) inst_id))) (let (($e7 (= #b11 $e6))) (let (($e8 (= #b10 $e6))) (let (($e9 (= #b01 $e6))) (let (($e10 (= #b00 $e6))) (let (($e11 (ite $e7 s3 (ite $e8 s2 (ite $e9 s1 (ite $e10 s0 #b00)))))) (let (($e12 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e13 (ite $e2 $e5 (ite (= #b00 $e11) (ite $e7 reg3 (ite $e8 reg2 (ite $e9 reg1 (ite $e10 reg0 #b00000000)))) (ite (= #b01 $e11) ex_val $e12))))) (let (($e14 ((_ extract 3 2) inst_id))) (let (($e15 (= #b11 $e14))) (let (($e16 (= #b10 $e14))) (let (($e17 (= #b01 $e14))) (let (($e18 (= #b00 $e14))) (let (($e19 (ite $e15 s3 (ite $e16 s2 (ite $e17 s1 (ite $e18 s0 #b00)))))) (let (($e20 (ite (= #b00 $e19) (ite $e15 reg3 (ite $e16 reg2 (ite $e17 reg1 (ite $e18 reg0 #b00000000)))) (ite (= #b01 $e19) ex_val $e12)))) (ite (= #b1 (bvand (ite (= #b00 ((_ extract 1 0) inst_id)) #b1 #b0) (bvand v1 (bvand (bvnot (bvand v1 (ite (and (not $e3) (not $e2) (not $e4)) #b1 #b0))) (bvnot (bvand (bvnot w1) (bvnot v1))))))) (ite $e3 (bvadd $e13 $e20) (ite $e2 $e5 (ite $e4 (bvnot (bvand $e13 $e20)) #b00000000))) (ite (= #b1 (bvand (bvand w1 v1) (ite (= #b00 rd1) #b1 #b0))) $e12 (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0))))))))))))))))))))))))
