(define-fun FunNew ((RTL_ex_wb_rd (_ BitVec 2))) (_ BitVec 2) (ite (= #b1 #b1) RTL_ex_wb_rd RTL_ex_wb_rd))
(define-fun FunNew ((inst (_ BitVec 2)) ) (_ BitVec 2) ((_ extract 1 0) inst))
(define-fun FunNew ((RTL_ex_wb_reg_wen (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) RTL_ex_wb_reg_wen RTL_ex_wb_reg_wen))
(define-fun FunNew ((w1 (_ BitVec 1)) (inst_id (_ BitVec 1)) (v1 (_ BitVec 1)) ) (_ BitVec 1) (let (($e1 ((_ extract 7 6) inst_id))) (bvnot (bvand (bvnot v1) (bvnot (bvand (bvnot (bvand v1 (ite (and (not (= #b01 $e1)) (not (= #b10 $e1)) (not (= #b11 $e1))) #b1 #b0))) (bvnot (bvand (bvnot w1) (bvnot v1)))))))))
(define-fun FunNew ((RTL_registers[1] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[1] RTL_registers[1]))
(define-fun FunNew ((reg1 (_ BitVec 8)) (rd2 (_ BitVec 8)) (w2 (_ BitVec 8)) (ex_val (_ BitVec 8)) (v2 (_ BitVec 8)) (oper1 (_ BitVec 8)) (op (_ BitVec 8)) (oper2 (_ BitVec 8)) (rd1 (_ BitVec 8)) (v1 (_ BitVec 8)) (w1 (_ BitVec 8)) ) (_ BitVec 8) (ite (= #b1 (bvand (bvand w1 v1) (ite (and (= #b01 rd1) (not (= #b00 rd1))) #b1 #b0))) (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1)))
(define-fun FunNew ((RTL_ex_wb_valid (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) RTL_ex_wb_valid RTL_ex_wb_valid))
(define-fun FunNew ((v1 (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) v1 v1))
(define-fun FunNew ((RTL_registers[3] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[3] RTL_registers[3]))
(define-fun FunNew ((reg3 (_ BitVec 8)) (rd2 (_ BitVec 8)) (w2 (_ BitVec 8)) (ex_val (_ BitVec 8)) (v2 (_ BitVec 8)) (oper1 (_ BitVec 8)) (op (_ BitVec 8)) (oper2 (_ BitVec 8)) (rd1 (_ BitVec 8)) (v1 (_ BitVec 8)) (w1 (_ BitVec 8)) ) (_ BitVec 8) (ite (= #b1 (bvand (bvand w1 v1) (ite (and (= #b11 rd1) (not (= #b10 rd1)) (not (= #b01 rd1)) (not (= #b00 rd1))) #b1 #b0))) (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3)))
(define-fun FunNew ((RTL_registers[2] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[2] RTL_registers[2]))
(define-fun FunNew ((reg2 (_ BitVec 8)) (rd2 (_ BitVec 8)) (w2 (_ BitVec 8)) (ex_val (_ BitVec 8)) (v2 (_ BitVec 8)) (oper1 (_ BitVec 8)) (op (_ BitVec 8)) (oper2 (_ BitVec 8)) (rd1 (_ BitVec 8)) (v1 (_ BitVec 8)) (w1 (_ BitVec 8)) ) (_ BitVec 8) (ite (= #b1 (bvand (bvand w1 v1) (ite (and (= #b10 rd1) (not (= #b01 rd1)) (not (= #b00 rd1))) #b1 #b0))) (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2)))
(define-fun FunNew ((RTL_ex_wb_val (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_ex_wb_val RTL_ex_wb_val))
(define-fun FunNew ((reg0 (_ BitVec 8)) (inst (_ BitVec 8)) (w1 (_ BitVec 8)) (rd1 (_ BitVec 8)) (oper2 (_ BitVec 8)) (op (_ BitVec 8)) (oper1 (_ BitVec 8)) (v2 (_ BitVec 8)) (ex_val (_ BitVec 8)) (w2 (_ BitVec 8)) (rd2 (_ BitVec 8)) (reg2 (_ BitVec 8)) (reg3 (_ BitVec 8)) (reg1 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 (= #b00 rd1))) (let (($e2 (bvand w2 v2))) (let (($e3 (= #b00 rd2))) (let (($e4 (= #b01 rd1))) (let (($e5 (= #b01 rd2))) (let (($e6 (= #b10 rd1))) (let (($e7 (= #b10 rd2))) (let (($e8 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e9 ((_ extract 5 4) inst))) (let (($e10 ((_ extract 3 2) inst))) (let (($e11 (ite (= #b1 (bvand w1 (ite $e1 #b1 #b0))) $e8 (ite (= #b1 (bvand $e2 (ite $e3 #b1 #b0))) ex_val reg0)))) (let (($e12 (ite (= #b1 (bvand w1 (ite (and $e4 (not $e1)) #b1 #b0))) $e8 (ite (= #b1 (bvand $e2 (ite (and $e5 (not $e3)) #b1 #b0))) ex_val reg1)))) (let (($e13 (ite (= #b1 (bvand w1 (ite (and $e6 (not $e4) (not $e1)) #b1 #b0))) $e8 (ite (= #b1 (bvand $e2 (ite (and $e7 (not $e5) (not $e3)) #b1 #b0))) ex_val reg2)))) (let (($e14 (ite (= #b1 (bvand w1 (ite (and (= #b11 rd1) (not $e6) (not $e4) (not $e1)) #b1 #b0))) $e8 (ite (= #b1 (bvand $e2 (ite (and (= #b11 rd2) (not $e7) (not $e5) (not $e3)) #b1 #b0))) ex_val reg3)))) (bvadd (ite (= #b11 $e9) $e14 (ite (= #b10 $e9) $e13 (ite (= #b01 $e9) $e12 (ite (= #b00 $e9) $e11 #b00000000)))) (ite (= #b11 $e10) $e14 (ite (= #b10 $e10) $e13 (ite (= #b01 $e10) $e12 (ite (= #b00 $e10) $e11 #b00000000))))))))))))))))))))
(define-fun FunNew ((__START__ (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) __START__ __START__))
#b0
(define-fun FunNew ((RTL_registers[0] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[0] RTL_registers[0]))
(define-fun FunNew ((rd2 (_ BitVec 8)) (w2 (_ BitVec 8)) (reg0 (_ BitVec 8)) (ex_val (_ BitVec 8)) (v2 (_ BitVec 8)) (oper1 (_ BitVec 8)) (op (_ BitVec 8)) (oper2 (_ BitVec 8)) (rd1 (_ BitVec 8)) (v1 (_ BitVec 8)) (w1 (_ BitVec 8)) ) (_ BitVec 8) (ite (= #b1 (bvand (bvand w1 v1) (ite (= #b00 rd1) #b1 #b0))) (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))) (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0)))
(define-fun FunNew ((stage_tracker_ex_wb_iuv (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) stage_tracker_ex_wb_iuv stage_tracker_ex_wb_iuv))
#b1
(define-fun FunNew ((stage_tracker_id_ex_iuv (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) stage_tracker_id_ex_iuv stage_tracker_id_ex_iuv))
#b0
(define-fun FunNew ((stage_tracker_wb_iuv (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) stage_tracker_wb_iuv stage_tracker_wb_iuv))
#b0
(define-fun FunNew ((stage_tracker_if_id_iuv (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) stage_tracker_if_id_iuv stage_tracker_if_id_iuv))
#b0
