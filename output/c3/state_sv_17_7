(define-fun FunNew ((RTL_registers[2] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[2] RTL_registers[2]))
(define-fun FunNew ((reg0 (_ BitVec 8)) (reg1 (_ BitVec 8)) (ex_val (_ BitVec 8)) (v2 (_ BitVec 8)) (reg2 (_ BitVec 8)) (w2 (_ BitVec 8)) (v1 (_ BitVec 8)) (rd2 (_ BitVec 8)) (inst (_ BitVec 8)) (w1 (_ BitVec 8)) (v0 (_ BitVec 8)) (oper1 (_ BitVec 8)) (s3 (_ BitVec 8)) (reg3 (_ BitVec 8)) (s0 (_ BitVec 8)) (s2 (_ BitVec 8)) (op (_ BitVec 8)) (s1 (_ BitVec 8)) (rd1 (_ BitVec 8)) (inst_id (_ BitVec 8)) (oper2 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 (= #b00 rd1))) (let (($e2 (bvand w2 v2))) (let (($e3 (= #b00 rd2))) (let (($e4 (= #b01 rd1))) (let (($e5 (= #b01 rd2))) (let (($e6 (= #b10 rd1))) (let (($e7 (= #b10 rd2))) (let (($e8 ((_ extract 7 6) inst_id))) (let (($e9 (= #b10 $e8))) (let (($e10 (= #b01 $e8))) (let (($e11 (= #b11 $e8))) (let (($e12 (and (not $e10) (not $e9) (not $e11)))) (let (($e13 (bvand v0 (bvnot (ite $e12 #b1 #b0))))) (let (($e14 ((_ extract 1 0) inst_id))) (let (($e15 (= #b00 $e14))) (let (($e16 (bvand $e13 (ite $e15 #b1 #b0)))) (let (($e17 (= #b01 $e14))) (let (($e18 (bvand $e13 (ite $e17 #b1 #b0)))) (let (($e19 (= #b10 $e14))) (let (($e20 (bvand $e13 (ite $e19 #b1 #b0)))) (let (($e21 (bvand $e13 (ite (= #b11 $e14) #b1 #b0)))) (let (($e22 (concat #b0000 ((_ extract 5 2) inst_id)))) (let (($e23 ((_ extract 5 4) inst_id))) (let (($e24 (= #b11 $e23))) (let (($e25 (= #b10 $e23))) (let (($e26 (= #b01 $e23))) (let (($e27 (= #b00 $e23))) (let (($e28 (ite $e24 s3 (ite $e25 s2 (ite $e26 s1 (ite $e27 s0 #b00)))))) (let (($e29 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e30 (ite $e9 $e22 (ite (= #b00 $e28) (ite $e24 reg3 (ite $e25 reg2 (ite $e26 reg1 (ite $e27 reg0 #b00000000)))) (ite (= #b01 $e28) ex_val $e29))))) (let (($e31 ((_ extract 3 2) inst_id))) (let (($e32 (= #b11 $e31))) (let (($e33 (= #b10 $e31))) (let (($e34 (= #b01 $e31))) (let (($e35 (= #b00 $e31))) (let (($e36 (ite $e32 s3 (ite $e33 s2 (ite $e34 s1 (ite $e35 s0 #b00)))))) (let (($e37 (ite (= #b00 $e36) (ite $e32 reg3 (ite $e33 reg2 (ite $e34 reg1 (ite $e35 reg0 #b00000000)))) (ite (= #b01 $e36) ex_val $e29)))) (let (($e38 (ite (= #b1 (bvand $e2 (ite (and $e7 (not $e5) (not $e3)) #b1 #b0))) ex_val reg2))) (let (($e39 ((_ extract 7 6) inst))) (let (($e40 ((_ extract 1 0) inst))) (let (($e41 (and $e6 (not $e4) (not $e1)))) (let (($e42 ((_ extract 5 4) inst))) (let (($e43 (= #b11 $e42))) (let (($e44 (= #b10 $e42))) (let (($e45 (= #b01 $e42))) (let (($e46 (= #b00 $e42))) (let (($e47 ((_ extract 3 2) inst))) (let (($e48 (= #b11 $e47))) (let (($e49 (= #b10 $e47))) (let (($e50 (= #b01 $e47))) (let (($e51 (= #b00 $e47))) (let (($e52 (ite $e10 (bvadd $e30 $e37) (ite $e9 $e22 (ite $e11 (bvnot (bvand $e30 $e37)) #b00000000))))) (let (($e53 (bvand (bvnot (bvand v1 (ite $e12 #b1 #b0))) (bvnot (bvand (bvnot w1) (bvnot v1)))))) (let (($e54 (ite (= #b1 (bvand w1 (ite $e1 #b1 #b0))) $e29 (ite (= #b1 (bvand $e2 (ite $e3 #b1 #b0))) ex_val reg0)))) (let (($e55 (ite (= #b1 (bvand w1 (ite (and $e4 (not $e1)) #b1 #b0))) $e29 (ite (= #b1 (bvand $e2 (ite (and $e5 (not $e3)) #b1 #b0))) ex_val reg1)))) (let (($e56 (ite (= #b1 (bvand w1 (ite $e41 #b1 #b0))) $e29 $e38))) (let (($e57 (ite (= #b1 (bvand w1 (ite (and (= #b11 rd1) (not $e6) (not $e4) (not $e1)) #b1 #b0))) $e29 (ite (= #b1 (bvand $e2 (ite (and (= #b11 rd2) (not $e7) (not $e5) (not $e3)) #b1 #b0))) ex_val reg3)))) (let (($e58 (bvand (concat $e16 (ite (bvult #b01 s0) #b1 #b0)) (concat $e16 #b0)))) (let (($e59 (bvand (concat $e18 (ite (bvult #b01 s1) #b1 #b0)) (concat $e18 #b0)))) (let (($e60 (bvand (concat $e20 (ite (bvult #b01 s2) #b1 #b0)) (concat $e20 #b0)))) (let (($e61 (bvand (concat $e21 (ite (bvult #b01 s3) #b1 #b0)) (concat $e21 #b0)))) (ite (= #b1 (bvand (bvand v1 (bvand (bvnot (bvand v1 (bvnot (bvand (bvnot (bvand v1 (ite (and (not (= #b01 $e39)) (not (= #b10 $e39)) (not (= #b11 $e39))) #b1 #b0))) (bvnot (bvand (bvnot v1) (ite $e12 #b1 #b0))))))) (bvnot (bvand (bvnot v1) (bvnot $e53))))) (ite (and (= #b10 $e40) (not (= #b01 $e40)) (not (= #b00 $e40))) #b1 #b0))) (bvadd (ite (= #b00 (ite $e43 $e61 (ite $e44 $e60 (ite $e45 $e59 (ite $e46 $e58 #b00))))) (ite $e43 $e57 (ite $e44 $e56 (ite $e45 $e55 (ite $e46 $e54 #b00000000)))) $e52) (ite (= #b00 (ite $e48 $e61 (ite $e49 $e60 (ite $e50 $e59 (ite $e51 $e58 #b00))))) (ite $e48 $e57 (ite $e49 $e56 (ite $e50 $e55 (ite $e51 $e54 #b00000000)))) $e52)) (ite (= #b1 (bvand (ite (and $e19 (not $e17) (not $e15)) #b1 #b0) (bvand v1 $e53))) $e52 (ite (= #b1 (bvand (bvand w1 v1) (ite $e41 #b1 #b0))) $e29 $e38)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(define-fun FunNew ((RTL_registers[0] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[0] RTL_registers[0]))
(define-fun FunNew ((reg0 (_ BitVec 8)) (reg1 (_ BitVec 8)) (ex_val (_ BitVec 8)) (v2 (_ BitVec 8)) (reg2 (_ BitVec 8)) (w2 (_ BitVec 8)) (rd2 (_ BitVec 8)) (inst (_ BitVec 8)) (v1 (_ BitVec 8)) (w1 (_ BitVec 8)) (v0 (_ BitVec 8)) (oper1 (_ BitVec 8)) (s3 (_ BitVec 8)) (reg3 (_ BitVec 8)) (s0 (_ BitVec 8)) (s2 (_ BitVec 8)) (op (_ BitVec 8)) (s1 (_ BitVec 8)) (rd1 (_ BitVec 8)) (inst_id (_ BitVec 8)) (oper2 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 (= #b00 rd1))) (let (($e2 (bvand w2 v2))) (let (($e3 (= #b00 rd2))) (let (($e4 (= #b01 rd1))) (let (($e5 (= #b01 rd2))) (let (($e6 (= #b10 rd1))) (let (($e7 (= #b10 rd2))) (let (($e8 ((_ extract 7 6) inst_id))) (let (($e9 (= #b10 $e8))) (let (($e10 (= #b01 $e8))) (let (($e11 (= #b11 $e8))) (let (($e12 (and (not $e10) (not $e9) (not $e11)))) (let (($e13 (bvand v0 (bvnot (ite $e12 #b1 #b0))))) (let (($e14 ((_ extract 1 0) inst_id))) (let (($e15 (= #b00 $e14))) (let (($e16 (bvand $e13 (ite $e15 #b1 #b0)))) (let (($e17 (bvand $e13 (ite (= #b01 $e14) #b1 #b0)))) (let (($e18 (bvand $e13 (ite (= #b10 $e14) #b1 #b0)))) (let (($e19 (bvand $e13 (ite (= #b11 $e14) #b1 #b0)))) (let (($e20 (concat #b0000 ((_ extract 5 2) inst_id)))) (let (($e21 ((_ extract 5 4) inst_id))) (let (($e22 (= #b11 $e21))) (let (($e23 (= #b10 $e21))) (let (($e24 (= #b01 $e21))) (let (($e25 (= #b00 $e21))) (let (($e26 (ite $e22 s3 (ite $e23 s2 (ite $e24 s1 (ite $e25 s0 #b00)))))) (let (($e27 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e28 (ite $e9 $e20 (ite (= #b00 $e26) (ite $e22 reg3 (ite $e23 reg2 (ite $e24 reg1 (ite $e25 reg0 #b00000000)))) (ite (= #b01 $e26) ex_val $e27))))) (let (($e29 ((_ extract 3 2) inst_id))) (let (($e30 (= #b11 $e29))) (let (($e31 (= #b10 $e29))) (let (($e32 (= #b01 $e29))) (let (($e33 (= #b00 $e29))) (let (($e34 (ite $e30 s3 (ite $e31 s2 (ite $e32 s1 (ite $e33 s0 #b00)))))) (let (($e35 (ite (= #b00 $e34) (ite $e30 reg3 (ite $e31 reg2 (ite $e32 reg1 (ite $e33 reg0 #b00000000)))) (ite (= #b01 $e34) ex_val $e27)))) (let (($e36 (ite (= #b1 (bvand $e2 (ite $e3 #b1 #b0))) ex_val reg0))) (let (($e37 ((_ extract 7 6) inst))) (let (($e38 ((_ extract 5 4) inst))) (let (($e39 (= #b11 $e38))) (let (($e40 (= #b10 $e38))) (let (($e41 (= #b01 $e38))) (let (($e42 (= #b00 $e38))) (let (($e43 ((_ extract 3 2) inst))) (let (($e44 (= #b11 $e43))) (let (($e45 (= #b10 $e43))) (let (($e46 (= #b01 $e43))) (let (($e47 (= #b00 $e43))) (let (($e48 (ite $e10 (bvadd $e28 $e35) (ite $e9 $e20 (ite $e11 (bvnot (bvand $e28 $e35)) #b00000000))))) (let (($e49 (bvand (bvnot (bvand v1 (ite $e12 #b1 #b0))) (bvnot (bvand (bvnot w1) (bvnot v1)))))) (let (($e50 (ite (= #b1 (bvand w1 (ite $e1 #b1 #b0))) $e27 $e36))) (let (($e51 (ite (= #b1 (bvand w1 (ite (and $e4 (not $e1)) #b1 #b0))) $e27 (ite (= #b1 (bvand $e2 (ite (and $e5 (not $e3)) #b1 #b0))) ex_val reg1)))) (let (($e52 (ite (= #b1 (bvand w1 (ite (and $e6 (not $e4) (not $e1)) #b1 #b0))) $e27 (ite (= #b1 (bvand $e2 (ite (and $e7 (not $e5) (not $e3)) #b1 #b0))) ex_val reg2)))) (let (($e53 (ite (= #b1 (bvand w1 (ite (and (= #b11 rd1) (not $e6) (not $e4) (not $e1)) #b1 #b0))) $e27 (ite (= #b1 (bvand $e2 (ite (and (= #b11 rd2) (not $e7) (not $e5) (not $e3)) #b1 #b0))) ex_val reg3)))) (let (($e54 (bvand (concat $e16 (ite (bvult #b01 s0) #b1 #b0)) (concat $e16 #b0)))) (let (($e55 (bvand (concat $e17 (ite (bvult #b01 s1) #b1 #b0)) (concat $e17 #b0)))) (let (($e56 (bvand (concat $e18 (ite (bvult #b01 s2) #b1 #b0)) (concat $e18 #b0)))) (let (($e57 (bvand (concat $e19 (ite (bvult #b01 s3) #b1 #b0)) (concat $e19 #b0)))) (ite (= #b1 (bvand (ite (= #b00 ((_ extract 1 0) inst)) #b1 #b0) (bvand v1 (bvand (bvnot (bvand v1 (bvnot (bvand (bvnot (bvand v1 (ite (and (not (= #b01 $e37)) (not (= #b10 $e37)) (not (= #b11 $e37))) #b1 #b0))) (bvnot (bvand (bvnot v1) (ite $e12 #b1 #b0))))))) (bvnot (bvand (bvnot v1) (bvnot $e49))))))) (bvadd (ite (= #b00 (ite $e39 $e57 (ite $e40 $e56 (ite $e41 $e55 (ite $e42 $e54 #b00))))) (ite $e39 $e53 (ite $e40 $e52 (ite $e41 $e51 (ite $e42 $e50 #b00000000)))) $e48) (ite (= #b00 (ite $e44 $e57 (ite $e45 $e56 (ite $e46 $e55 (ite $e47 $e54 #b00))))) (ite $e44 $e53 (ite $e45 $e52 (ite $e46 $e51 (ite $e47 $e50 #b00000000)))) $e48)) (ite (= #b1 (bvand (ite $e15 #b1 #b0) (bvand v1 $e49))) $e48 (ite (= #b1 (bvand (bvand w1 v1) (ite $e1 #b1 #b0))) $e27 $e36)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(define-fun FunNew ((RTL_registers[3] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[3] RTL_registers[3]))
(define-fun FunNew ((reg0 (_ BitVec 8)) (reg1 (_ BitVec 8)) (ex_val (_ BitVec 8)) (v2 (_ BitVec 8)) (reg2 (_ BitVec 8)) (w2 (_ BitVec 8)) (v1 (_ BitVec 8)) (rd2 (_ BitVec 8)) (inst (_ BitVec 8)) (w1 (_ BitVec 8)) (v0 (_ BitVec 8)) (oper1 (_ BitVec 8)) (s3 (_ BitVec 8)) (reg3 (_ BitVec 8)) (s0 (_ BitVec 8)) (s2 (_ BitVec 8)) (op (_ BitVec 8)) (s1 (_ BitVec 8)) (rd1 (_ BitVec 8)) (inst_id (_ BitVec 8)) (oper2 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 (= #b00 rd1))) (let (($e2 (bvand w2 v2))) (let (($e3 (= #b00 rd2))) (let (($e4 (= #b01 rd1))) (let (($e5 (= #b01 rd2))) (let (($e6 (= #b10 rd1))) (let (($e7 (= #b10 rd2))) (let (($e8 ((_ extract 7 6) inst_id))) (let (($e9 (= #b10 $e8))) (let (($e10 (= #b01 $e8))) (let (($e11 (= #b11 $e8))) (let (($e12 (and (not $e10) (not $e9) (not $e11)))) (let (($e13 (bvand v0 (bvnot (ite $e12 #b1 #b0))))) (let (($e14 ((_ extract 1 0) inst_id))) (let (($e15 (= #b00 $e14))) (let (($e16 (bvand $e13 (ite $e15 #b1 #b0)))) (let (($e17 (= #b01 $e14))) (let (($e18 (bvand $e13 (ite $e17 #b1 #b0)))) (let (($e19 (= #b10 $e14))) (let (($e20 (bvand $e13 (ite $e19 #b1 #b0)))) (let (($e21 (= #b11 $e14))) (let (($e22 (bvand $e13 (ite $e21 #b1 #b0)))) (let (($e23 (concat #b0000 ((_ extract 5 2) inst_id)))) (let (($e24 ((_ extract 5 4) inst_id))) (let (($e25 (= #b11 $e24))) (let (($e26 (= #b10 $e24))) (let (($e27 (= #b01 $e24))) (let (($e28 (= #b00 $e24))) (let (($e29 (ite $e25 s3 (ite $e26 s2 (ite $e27 s1 (ite $e28 s0 #b00)))))) (let (($e30 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e31 (ite $e9 $e23 (ite (= #b00 $e29) (ite $e25 reg3 (ite $e26 reg2 (ite $e27 reg1 (ite $e28 reg0 #b00000000)))) (ite (= #b01 $e29) ex_val $e30))))) (let (($e32 ((_ extract 3 2) inst_id))) (let (($e33 (= #b11 $e32))) (let (($e34 (= #b10 $e32))) (let (($e35 (= #b01 $e32))) (let (($e36 (= #b00 $e32))) (let (($e37 (ite $e33 s3 (ite $e34 s2 (ite $e35 s1 (ite $e36 s0 #b00)))))) (let (($e38 (ite (= #b00 $e37) (ite $e33 reg3 (ite $e34 reg2 (ite $e35 reg1 (ite $e36 reg0 #b00000000)))) (ite (= #b01 $e37) ex_val $e30)))) (let (($e39 (ite (= #b1 (bvand $e2 (ite (and (= #b11 rd2) (not $e7) (not $e5) (not $e3)) #b1 #b0))) ex_val reg3))) (let (($e40 ((_ extract 7 6) inst))) (let (($e41 ((_ extract 1 0) inst))) (let (($e42 (and (= #b11 rd1) (not $e6) (not $e4) (not $e1)))) (let (($e43 ((_ extract 5 4) inst))) (let (($e44 (= #b11 $e43))) (let (($e45 (= #b10 $e43))) (let (($e46 (= #b01 $e43))) (let (($e47 (= #b00 $e43))) (let (($e48 ((_ extract 3 2) inst))) (let (($e49 (= #b11 $e48))) (let (($e50 (= #b10 $e48))) (let (($e51 (= #b01 $e48))) (let (($e52 (= #b00 $e48))) (let (($e53 (ite $e10 (bvadd $e31 $e38) (ite $e9 $e23 (ite $e11 (bvnot (bvand $e31 $e38)) #b00000000))))) (let (($e54 (bvand (bvnot (bvand v1 (ite $e12 #b1 #b0))) (bvnot (bvand (bvnot w1) (bvnot v1)))))) (let (($e55 (ite (= #b1 (bvand w1 (ite $e1 #b1 #b0))) $e30 (ite (= #b1 (bvand $e2 (ite $e3 #b1 #b0))) ex_val reg0)))) (let (($e56 (ite (= #b1 (bvand w1 (ite (and $e4 (not $e1)) #b1 #b0))) $e30 (ite (= #b1 (bvand $e2 (ite (and $e5 (not $e3)) #b1 #b0))) ex_val reg1)))) (let (($e57 (ite (= #b1 (bvand w1 (ite (and $e6 (not $e4) (not $e1)) #b1 #b0))) $e30 (ite (= #b1 (bvand $e2 (ite (and $e7 (not $e5) (not $e3)) #b1 #b0))) ex_val reg2)))) (let (($e58 (ite (= #b1 (bvand w1 (ite $e42 #b1 #b0))) $e30 $e39))) (let (($e59 (bvand (concat $e16 (ite (bvult #b01 s0) #b1 #b0)) (concat $e16 #b0)))) (let (($e60 (bvand (concat $e18 (ite (bvult #b01 s1) #b1 #b0)) (concat $e18 #b0)))) (let (($e61 (bvand (concat $e20 (ite (bvult #b01 s2) #b1 #b0)) (concat $e20 #b0)))) (let (($e62 (bvand (concat $e22 (ite (bvult #b01 s3) #b1 #b0)) (concat $e22 #b0)))) (ite (= #b1 (bvand (bvand v1 (bvand (bvnot (bvand v1 (bvnot (bvand (bvnot (bvand v1 (ite (and (not (= #b01 $e40)) (not (= #b10 $e40)) (not (= #b11 $e40))) #b1 #b0))) (bvnot (bvand (bvnot v1) (ite $e12 #b1 #b0))))))) (bvnot (bvand (bvnot v1) (bvnot $e54))))) (ite (and (= #b11 $e41) (not (= #b10 $e41)) (not (= #b01 $e41)) (not (= #b00 $e41))) #b1 #b0))) (bvadd (ite (= #b00 (ite $e44 $e62 (ite $e45 $e61 (ite $e46 $e60 (ite $e47 $e59 #b00))))) (ite $e44 $e58 (ite $e45 $e57 (ite $e46 $e56 (ite $e47 $e55 #b00000000)))) $e53) (ite (= #b00 (ite $e49 $e62 (ite $e50 $e61 (ite $e51 $e60 (ite $e52 $e59 #b00))))) (ite $e49 $e58 (ite $e50 $e57 (ite $e51 $e56 (ite $e52 $e55 #b00000000)))) $e53)) (ite (= #b1 (bvand (ite (and $e21 (not $e19) (not $e17) (not $e15)) #b1 #b0) (bvand v1 $e54))) $e53 (ite (= #b1 (bvand (bvand w1 v1) (ite $e42 #b1 #b0))) $e30 $e39))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(define-fun FunNew ((RTL_registers[1] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[1] RTL_registers[1]))
(define-fun FunNew ((reg0 (_ BitVec 8)) (reg1 (_ BitVec 8)) (ex_val (_ BitVec 8)) (v2 (_ BitVec 8)) (reg2 (_ BitVec 8)) (w2 (_ BitVec 8)) (v1 (_ BitVec 8)) (rd2 (_ BitVec 8)) (inst (_ BitVec 8)) (w1 (_ BitVec 8)) (v0 (_ BitVec 8)) (oper1 (_ BitVec 8)) (s3 (_ BitVec 8)) (reg3 (_ BitVec 8)) (s0 (_ BitVec 8)) (s2 (_ BitVec 8)) (op (_ BitVec 8)) (s1 (_ BitVec 8)) (rd1 (_ BitVec 8)) (inst_id (_ BitVec 8)) (oper2 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 (= #b00 rd1))) (let (($e2 (bvand w2 v2))) (let (($e3 (= #b00 rd2))) (let (($e4 (= #b01 rd1))) (let (($e5 (= #b01 rd2))) (let (($e6 (= #b10 rd1))) (let (($e7 (= #b10 rd2))) (let (($e8 ((_ extract 7 6) inst_id))) (let (($e9 (= #b10 $e8))) (let (($e10 (= #b01 $e8))) (let (($e11 (= #b11 $e8))) (let (($e12 (and (not $e10) (not $e9) (not $e11)))) (let (($e13 (bvand v0 (bvnot (ite $e12 #b1 #b0))))) (let (($e14 ((_ extract 1 0) inst_id))) (let (($e15 (= #b00 $e14))) (let (($e16 (bvand $e13 (ite $e15 #b1 #b0)))) (let (($e17 (= #b01 $e14))) (let (($e18 (bvand $e13 (ite $e17 #b1 #b0)))) (let (($e19 (bvand $e13 (ite (= #b10 $e14) #b1 #b0)))) (let (($e20 (bvand $e13 (ite (= #b11 $e14) #b1 #b0)))) (let (($e21 (concat #b0000 ((_ extract 5 2) inst_id)))) (let (($e22 ((_ extract 5 4) inst_id))) (let (($e23 (= #b11 $e22))) (let (($e24 (= #b10 $e22))) (let (($e25 (= #b01 $e22))) (let (($e26 (= #b00 $e22))) (let (($e27 (ite $e23 s3 (ite $e24 s2 (ite $e25 s1 (ite $e26 s0 #b00)))))) (let (($e28 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e29 (ite $e9 $e21 (ite (= #b00 $e27) (ite $e23 reg3 (ite $e24 reg2 (ite $e25 reg1 (ite $e26 reg0 #b00000000)))) (ite (= #b01 $e27) ex_val $e28))))) (let (($e30 ((_ extract 3 2) inst_id))) (let (($e31 (= #b11 $e30))) (let (($e32 (= #b10 $e30))) (let (($e33 (= #b01 $e30))) (let (($e34 (= #b00 $e30))) (let (($e35 (ite $e31 s3 (ite $e32 s2 (ite $e33 s1 (ite $e34 s0 #b00)))))) (let (($e36 (ite (= #b00 $e35) (ite $e31 reg3 (ite $e32 reg2 (ite $e33 reg1 (ite $e34 reg0 #b00000000)))) (ite (= #b01 $e35) ex_val $e28)))) (let (($e37 (ite (= #b1 (bvand $e2 (ite (and $e5 (not $e3)) #b1 #b0))) ex_val reg1))) (let (($e38 ((_ extract 7 6) inst))) (let (($e39 ((_ extract 1 0) inst))) (let (($e40 (and $e4 (not $e1)))) (let (($e41 ((_ extract 5 4) inst))) (let (($e42 (= #b11 $e41))) (let (($e43 (= #b10 $e41))) (let (($e44 (= #b01 $e41))) (let (($e45 (= #b00 $e41))) (let (($e46 ((_ extract 3 2) inst))) (let (($e47 (= #b11 $e46))) (let (($e48 (= #b10 $e46))) (let (($e49 (= #b01 $e46))) (let (($e50 (= #b00 $e46))) (let (($e51 (ite $e10 (bvadd $e29 $e36) (ite $e9 $e21 (ite $e11 (bvnot (bvand $e29 $e36)) #b00000000))))) (let (($e52 (bvand (bvnot (bvand v1 (ite $e12 #b1 #b0))) (bvnot (bvand (bvnot w1) (bvnot v1)))))) (let (($e53 (ite (= #b1 (bvand w1 (ite $e1 #b1 #b0))) $e28 (ite (= #b1 (bvand $e2 (ite $e3 #b1 #b0))) ex_val reg0)))) (let (($e54 (ite (= #b1 (bvand w1 (ite $e40 #b1 #b0))) $e28 $e37))) (let (($e55 (ite (= #b1 (bvand w1 (ite (and $e6 (not $e4) (not $e1)) #b1 #b0))) $e28 (ite (= #b1 (bvand $e2 (ite (and $e7 (not $e5) (not $e3)) #b1 #b0))) ex_val reg2)))) (let (($e56 (ite (= #b1 (bvand w1 (ite (and (= #b11 rd1) (not $e6) (not $e4) (not $e1)) #b1 #b0))) $e28 (ite (= #b1 (bvand $e2 (ite (and (= #b11 rd2) (not $e7) (not $e5) (not $e3)) #b1 #b0))) ex_val reg3)))) (let (($e57 (bvand (concat $e16 (ite (bvult #b01 s0) #b1 #b0)) (concat $e16 #b0)))) (let (($e58 (bvand (concat $e18 (ite (bvult #b01 s1) #b1 #b0)) (concat $e18 #b0)))) (let (($e59 (bvand (concat $e19 (ite (bvult #b01 s2) #b1 #b0)) (concat $e19 #b0)))) (let (($e60 (bvand (concat $e20 (ite (bvult #b01 s3) #b1 #b0)) (concat $e20 #b0)))) (ite (= #b1 (bvand (bvand v1 (bvand (bvnot (bvand v1 (bvnot (bvand (bvnot (bvand v1 (ite (and (not (= #b01 $e38)) (not (= #b10 $e38)) (not (= #b11 $e38))) #b1 #b0))) (bvnot (bvand (bvnot v1) (ite $e12 #b1 #b0))))))) (bvnot (bvand (bvnot v1) (bvnot $e52))))) (ite (and (= #b01 $e39) (not (= #b00 $e39))) #b1 #b0))) (bvadd (ite (= #b00 (ite $e42 $e60 (ite $e43 $e59 (ite $e44 $e58 (ite $e45 $e57 #b00))))) (ite $e42 $e56 (ite $e43 $e55 (ite $e44 $e54 (ite $e45 $e53 #b00000000)))) $e51) (ite (= #b00 (ite $e47 $e60 (ite $e48 $e59 (ite $e49 $e58 (ite $e50 $e57 #b00))))) (ite $e47 $e56 (ite $e48 $e55 (ite $e49 $e54 (ite $e50 $e53 #b00000000)))) $e51)) (ite (= #b1 (bvand (ite (and $e17 (not $e15)) #b1 #b0) (bvand v1 $e52))) $e51 (ite (= #b1 (bvand (bvand w1 v1) (ite $e40 #b1 #b0))) $e28 $e37))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
