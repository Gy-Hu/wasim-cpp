(define-fun FunNew ((RTL_registers[2] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[2] RTL_registers[2]))
(define-fun FunNew ((reg2 (_ BitVec 8)) (rd2 (_ BitVec 8)) (ex_val (_ BitVec 8)) (v2 (_ BitVec 8)) (w2 (_ BitVec 8)) ) (_ BitVec 8) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2))
(define-fun FunNew ((RTL_ex_wb_rd (_ BitVec 2))) (_ BitVec 2) (ite (= #b1 #b1) RTL_ex_wb_rd RTL_ex_wb_rd))
(define-fun FunNew ((rd2 (_ BitVec 2))) (_ BitVec 2) (ite (= #b1 #b1) rd2 rd2))
(define-fun FunNew ((RTL_id_ex_rd (_ BitVec 2))) (_ BitVec 2) (ite (= #b1 #b1) RTL_id_ex_rd RTL_id_ex_rd))
(define-fun FunNew ((rd1 (_ BitVec 2))) (_ BitVec 2) (ite (= #b1 #b1) rd1 rd1))
(define-fun FunNew ((RTL_id_ex_reg_wen (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) RTL_id_ex_reg_wen RTL_id_ex_reg_wen))
(define-fun FunNew ((v0 (_ BitVec 1)) (w1 (_ BitVec 1)) (inst_v (_ BitVec 1)) (v1 (_ BitVec 1)) (inst (_ BitVec 1)) ) (_ BitVec 1) (let (($e1 ((_ extract 7 6) inst))) (let (($e2 (bvand (bvnot v1) inst_v))) (bvand (bvnot (bvand (ite (and (not (= #b01 $e1)) (not (= #b10 $e1)) (not (= #b11 $e1))) #b1 #b0) $e2)) (bvnot (bvand (bvnot (bvand w1 (bvnot v0))) (bvnot $e2)))))))
(define-fun FunNew ((RTL_id_ex_valid (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) RTL_id_ex_valid RTL_id_ex_valid))
(define-fun FunNew ((inst_v (_ BitVec 1)) (v1 (_ BitVec 1)) ) (_ BitVec 1) (bvnot (bvand (bvnot v1) (bvnot inst_v))))
(define-fun FunNew ((RTL_registers[1] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[1] RTL_registers[1]))
(define-fun FunNew ((reg1 (_ BitVec 8)) (rd2 (_ BitVec 8)) (ex_val (_ BitVec 8)) (v2 (_ BitVec 8)) (w2 (_ BitVec 8)) ) (_ BitVec 8) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1))
(define-fun FunNew ((RTL_if_id_inst (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_if_id_inst RTL_if_id_inst))
(define-fun FunNew ((inst (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) inst inst))
(define-fun FunNew ((RTL_scoreboard[1] (_ BitVec 2))) (_ BitVec 2) (ite (= #b1 #b1) RTL_scoreboard[1] RTL_scoreboard[1]))
(define-fun FunNew ((v2 (_ BitVec 2)) (s1 (_ BitVec 2)) (v1 (_ BitVec 2)) (inst (_ BitVec 2)) (inst_v (_ BitVec 2)) ) (_ BitVec 2) (let (($e1 ((_ extract 7 6) inst))) (let (($e2 (bvand (bvnot v1) inst_v))) (let (($e3 (bvand (bvnot (bvand (bvnot (bvand (bvand inst_v (bvnot (ite (and (not (= #b01 $e1)) (not (= #b10 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b01 ((_ extract 1 0) inst)) #b1 #b0))) $e2)) (bvnot (bvand (bvnot ((_ extract 1 1) s1)) (bvnot $e2)))))) (bvand (concat $e3 (bvnot v2)) (concat $e3 ((_ extract 0 0) s1)))))))
(define-fun FunNew ((RTL_scoreboard[2] (_ BitVec 2))) (_ BitVec 2) (ite (= #b1 #b1) RTL_scoreboard[2] RTL_scoreboard[2]))
(define-fun FunNew ((v2 (_ BitVec 2)) (s2 (_ BitVec 2)) (v1 (_ BitVec 2)) (inst (_ BitVec 2)) (inst_v (_ BitVec 2)) ) (_ BitVec 2) (let (($e1 ((_ extract 7 6) inst))) (let (($e2 (bvand (bvnot v1) inst_v))) (let (($e3 (bvand (bvnot (bvand (bvnot (bvand (bvand inst_v (bvnot (ite (and (not (= #b01 $e1)) (not (= #b10 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b10 ((_ extract 1 0) inst)) #b1 #b0))) $e2)) (bvnot (bvand (bvnot ((_ extract 1 1) s2)) (bvnot $e2)))))) (bvand (concat $e3 (bvnot v2)) (concat $e3 ((_ extract 0 0) s2)))))))
(define-fun FunNew ((RTL_if_id_valid (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) RTL_if_id_valid RTL_if_id_valid))
(define-fun FunNew ((inst_v (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) inst_v inst_v))
(define-fun FunNew ((RTL_scoreboard[3] (_ BitVec 2))) (_ BitVec 2) (ite (= #b1 #b1) RTL_scoreboard[3] RTL_scoreboard[3]))
(define-fun FunNew ((v2 (_ BitVec 2)) (s3 (_ BitVec 2)) (v1 (_ BitVec 2)) (inst (_ BitVec 2)) (inst_v (_ BitVec 2)) ) (_ BitVec 2) (let (($e1 ((_ extract 7 6) inst))) (let (($e2 (bvand (bvnot v1) inst_v))) (let (($e3 (bvand (bvnot (bvand (bvnot (bvand (bvand inst_v (bvnot (ite (and (not (= #b01 $e1)) (not (= #b10 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b11 ((_ extract 1 0) inst)) #b1 #b0))) $e2)) (bvnot (bvand (bvnot ((_ extract 1 1) s3)) (bvnot $e2)))))) (bvand (concat $e3 (bvnot v2)) (concat $e3 ((_ extract 0 0) s3)))))))
(define-fun FunNew ((RTL_id_ex_op (_ BitVec 2))) (_ BitVec 2) (ite (= #b1 #b1) RTL_id_ex_op RTL_id_ex_op))
(define-fun FunNew ((op (_ BitVec 2))) (_ BitVec 2) (ite (= #b1 #b1) op op))
(define-fun FunNew ((RTL_registers[3] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[3] RTL_registers[3]))
(define-fun FunNew ((reg3 (_ BitVec 8)) (rd2 (_ BitVec 8)) (ex_val (_ BitVec 8)) (v2 (_ BitVec 8)) (w2 (_ BitVec 8)) ) (_ BitVec 8) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3))
(define-fun FunNew ((RTL_id_ex_operand2 (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_id_ex_operand2 RTL_id_ex_operand2))
(define-fun FunNew ((oper2 (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) oper2 oper2))
(define-fun FunNew ((RTL_ex_wb_val (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_ex_wb_val RTL_ex_wb_val))
(define-fun FunNew ((ex_val (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) ex_val ex_val))
(define-fun FunNew ((RTL_registers[0] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[0] RTL_registers[0]))
(define-fun FunNew ((reg0 (_ BitVec 8)) (rd2 (_ BitVec 8)) (ex_val (_ BitVec 8)) (v2 (_ BitVec 8)) (w2 (_ BitVec 8)) ) (_ BitVec 8) (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0))
(define-fun FunNew ((RTL_scoreboard[0] (_ BitVec 2))) (_ BitVec 2) (ite (= #b1 #b1) RTL_scoreboard[0] RTL_scoreboard[0]))
(define-fun FunNew ((v2 (_ BitVec 2)) (s0 (_ BitVec 2)) (v1 (_ BitVec 2)) (inst (_ BitVec 2)) (inst_v (_ BitVec 2)) ) (_ BitVec 2) (let (($e1 ((_ extract 7 6) inst))) (let (($e2 (bvand (bvnot v1) inst_v))) (let (($e3 (bvand (bvnot (bvand (bvnot (bvand (bvand inst_v (bvnot (ite (and (not (= #b01 $e1)) (not (= #b10 $e1)) (not (= #b11 $e1))) #b1 #b0))) (ite (= #b00 ((_ extract 1 0) inst)) #b1 #b0))) $e2)) (bvnot (bvand (bvnot ((_ extract 1 1) s0)) (bvnot $e2)))))) (bvand (concat $e3 (bvnot v2)) (concat $e3 ((_ extract 0 0) s0)))))))
(define-fun FunNew ((RTL_ex_wb_reg_wen (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) RTL_ex_wb_reg_wen RTL_ex_wb_reg_wen))
(define-fun FunNew ((w2 (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) w2 w2))
(define-fun FunNew ((RTL_ex_wb_valid (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) RTL_ex_wb_valid RTL_ex_wb_valid))
#b0
(define-fun FunNew ((RTL_id_ex_operand1 (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_id_ex_operand1 RTL_id_ex_operand1))
(define-fun FunNew ((oper1 (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) oper1 oper1))
