(define-fun FunNew ((RTL_registers[2] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[2] RTL_registers[2]))
(define-fun FunNew ((rd1 (_ BitVec 8)) (oper2 (_ BitVec 8)) (reg0 (_ BitVec 8)) (reg1 (_ BitVec 8)) (inst_v (_ BitVec 8)) (v1 (_ BitVec 8)) (w1 (_ BitVec 8)) (v2 (_ BitVec 8)) (ex_val (_ BitVec 8)) (v0 (_ BitVec 8)) (oper1 (_ BitVec 8)) (s3 (_ BitVec 8)) (reg2 (_ BitVec 8)) (w2 (_ BitVec 8)) (reg3 (_ BitVec 8)) (s0 (_ BitVec 8)) (s2 (_ BitVec 8)) (op (_ BitVec 8)) (s1 (_ BitVec 8)) (inst (_ BitVec 8)) (rd2 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 (bvand w2 v2))) (let (($e2 (= #b00 rd2))) (let (($e3 (= #b01 rd2))) (let (($e4 (= #b10 rd2))) (let (($e5 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e6 (ite (= #b1 (bvand $e1 (ite (and $e4 (not $e3) (not $e2)) #b1 #b0))) ex_val reg2))) (let (($e7 (ite (= #b1 (bvand $e1 (ite (and $e3 (not $e2)) #b1 #b0))) ex_val reg1))) (let (($e8 (ite (= #b1 (bvand $e1 (ite (and (= #b11 rd2) (not $e4) (not $e3) (not $e2)) #b1 #b0))) ex_val reg3))) (let (($e9 (ite (= #b1 (bvand $e1 (ite $e2 #b1 #b0))) ex_val reg0))) (let (($e10 ((_ extract 7 6) inst))) (let (($e11 (and (not (= #b01 $e10)) (not (= #b10 $e10)) (not (= #b11 $e10))))) (let (($e12 ((_ extract 1 0) inst))) (let (($e13 (= #b00 $e12))) (let (($e14 (= #b01 $e12))) (let (($e15 (= #b10 $e12))) (let (($e16 (bvand (bvnot v1) inst_v))) (let (($e17 (bvand (bvnot (bvand (ite $e11 #b1 #b0) $e16)) (bvnot (bvand (bvnot (bvand w1 (bvnot v0))) (bvnot $e16)))))) (let (($e18 (bvand (bvnot v1) (bvnot inst_v)))) (let (($e19 ((_ extract 5 4) inst))) (let (($e20 (= #b11 $e19))) (let (($e21 (= #b10 $e19))) (let (($e22 (= #b01 $e19))) (let (($e23 (= #b00 $e19))) (let (($e24 ((_ extract 3 2) inst))) (let (($e25 (= #b11 $e24))) (let (($e26 (= #b10 $e24))) (let (($e27 (= #b01 $e24))) (let (($e28 (= #b00 $e24))) (let (($e29 (bvand (bvnot (bvand (bvnot $e17) (bvnot $e18))) (bvnot (bvand (bvnot w2) $e18))))) (let (($e30 (bvand (bvnot (bvand v1 (bvnot ((_ extract 1 1) s0)))) (bvnot (bvand (bvnot v1) (bvnot (ite $e13 #b1 #b0))))))) (let (($e31 (bvand (concat $e30 (bvnot v2)) (concat $e30 ((_ extract 0 0) s0))))) (let (($e32 (bvand (bvnot (bvand v1 (bvnot ((_ extract 1 1) s1)))) (bvnot (bvand (bvnot v1) (bvnot (ite $e14 #b1 #b0))))))) (let (($e33 (bvand (concat $e32 (bvnot v2)) (concat $e32 ((_ extract 0 0) s1))))) (let (($e34 (bvand (bvnot (bvand v1 (bvnot ((_ extract 1 1) s2)))) (bvnot (bvand (bvnot v1) (bvnot (ite $e15 #b1 #b0))))))) (let (($e35 (bvand (concat $e34 (bvnot v2)) (concat $e34 ((_ extract 0 0) s2))))) (let (($e36 (bvand (bvnot (bvand v1 (bvnot ((_ extract 1 1) s3)))) (bvnot (bvand (bvnot v1) (bvnot (ite (= #b11 $e12) #b1 #b0))))))) (let (($e37 (bvand (concat $e36 (bvnot v2)) (concat $e36 ((_ extract 0 0) s3))))) (ite (= #b1 (bvand (bvand inst_v (bvand (bvnot (bvand inst_v (bvnot (bvand (bvnot (bvand inst_v (ite $e11 #b1 #b0))) (bvnot (bvand (bvnot inst_v) (bvnot $e17))))))) (bvnot (bvand (bvnot inst_v) (bvnot $e29))))) (ite (and $e15 (not $e14) (not $e13)) #b1 #b0))) (bvadd (ite (= #b00 (ite $e25 $e37 (ite $e26 $e35 (ite $e27 $e33 (ite $e28 $e31 #b00))))) (ite $e25 $e8 (ite $e26 $e6 (ite $e27 $e7 (ite $e28 $e9 #b00000000)))) $e5) (ite (= #b00 (ite $e20 $e37 (ite $e21 $e35 (ite $e22 $e33 (ite $e23 $e31 #b00))))) (ite $e20 $e8 (ite $e21 $e6 (ite $e22 $e7 (ite $e23 $e9 #b00000000)))) $e5)) (ite (= #b1 (bvand (ite (and (= #b10 rd1) (not (= #b01 rd1)) (not (= #b00 rd1))) #b1 #b0) (bvand (bvnot $e18) $e29))) $e5 $e6))))))))))))))))))))))))))))))))))))))))
(define-fun FunNew ((RTL_registers[0] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[0] RTL_registers[0]))
(define-fun FunNew ((rd1 (_ BitVec 8)) (oper2 (_ BitVec 8)) (reg0 (_ BitVec 8)) (reg1 (_ BitVec 8)) (inst_v (_ BitVec 8)) (v1 (_ BitVec 8)) (w1 (_ BitVec 8)) (v2 (_ BitVec 8)) (ex_val (_ BitVec 8)) (v0 (_ BitVec 8)) (oper1 (_ BitVec 8)) (s3 (_ BitVec 8)) (reg2 (_ BitVec 8)) (w2 (_ BitVec 8)) (reg3 (_ BitVec 8)) (s0 (_ BitVec 8)) (s2 (_ BitVec 8)) (op (_ BitVec 8)) (s1 (_ BitVec 8)) (inst (_ BitVec 8)) (rd2 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 (bvand w2 v2))) (let (($e2 (= #b00 rd2))) (let (($e3 (= #b01 rd2))) (let (($e4 (= #b10 rd2))) (let (($e5 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e6 (ite (= #b1 (bvand $e1 (ite (and $e4 (not $e3) (not $e2)) #b1 #b0))) ex_val reg2))) (let (($e7 (ite (= #b1 (bvand $e1 (ite (and $e3 (not $e2)) #b1 #b0))) ex_val reg1))) (let (($e8 (ite (= #b1 (bvand $e1 (ite (and (= #b11 rd2) (not $e4) (not $e3) (not $e2)) #b1 #b0))) ex_val reg3))) (let (($e9 (ite (= #b1 (bvand $e1 (ite $e2 #b1 #b0))) ex_val reg0))) (let (($e10 ((_ extract 7 6) inst))) (let (($e11 (and (not (= #b01 $e10)) (not (= #b10 $e10)) (not (= #b11 $e10))))) (let (($e12 ((_ extract 1 0) inst))) (let (($e13 (= #b00 $e12))) (let (($e14 (bvand (bvnot v1) inst_v))) (let (($e15 (bvand (bvnot (bvand (ite $e11 #b1 #b0) $e14)) (bvnot (bvand (bvnot (bvand w1 (bvnot v0))) (bvnot $e14)))))) (let (($e16 (bvand (bvnot v1) (bvnot inst_v)))) (let (($e17 ((_ extract 5 4) inst))) (let (($e18 (= #b11 $e17))) (let (($e19 (= #b10 $e17))) (let (($e20 (= #b01 $e17))) (let (($e21 (= #b00 $e17))) (let (($e22 ((_ extract 3 2) inst))) (let (($e23 (= #b11 $e22))) (let (($e24 (= #b10 $e22))) (let (($e25 (= #b01 $e22))) (let (($e26 (= #b00 $e22))) (let (($e27 (bvand (bvnot (bvand (bvnot $e15) (bvnot $e16))) (bvnot (bvand (bvnot w2) $e16))))) (let (($e28 (bvand (bvnot (bvand v1 (bvnot ((_ extract 1 1) s0)))) (bvnot (bvand (bvnot v1) (bvnot (ite $e13 #b1 #b0))))))) (let (($e29 (bvand (concat $e28 (bvnot v2)) (concat $e28 ((_ extract 0 0) s0))))) (let (($e30 (bvand (bvnot (bvand v1 (bvnot ((_ extract 1 1) s1)))) (bvnot (bvand (bvnot v1) (bvnot (ite (= #b01 $e12) #b1 #b0))))))) (let (($e31 (bvand (concat $e30 (bvnot v2)) (concat $e30 ((_ extract 0 0) s1))))) (let (($e32 (bvand (bvnot (bvand v1 (bvnot ((_ extract 1 1) s2)))) (bvnot (bvand (bvnot v1) (bvnot (ite (= #b10 $e12) #b1 #b0))))))) (let (($e33 (bvand (concat $e32 (bvnot v2)) (concat $e32 ((_ extract 0 0) s2))))) (let (($e34 (bvand (bvnot (bvand v1 (bvnot ((_ extract 1 1) s3)))) (bvnot (bvand (bvnot v1) (bvnot (ite (= #b11 $e12) #b1 #b0))))))) (let (($e35 (bvand (concat $e34 (bvnot v2)) (concat $e34 ((_ extract 0 0) s3))))) (ite (= #b1 (bvand (ite $e13 #b1 #b0) (bvand inst_v (bvand (bvnot (bvand inst_v (bvnot (bvand (bvnot (bvand inst_v (ite $e11 #b1 #b0))) (bvnot (bvand (bvnot inst_v) (bvnot $e15))))))) (bvnot (bvand (bvnot inst_v) (bvnot $e27))))))) (bvadd (ite (= #b00 (ite $e23 $e35 (ite $e24 $e33 (ite $e25 $e31 (ite $e26 $e29 #b00))))) (ite $e23 $e8 (ite $e24 $e6 (ite $e25 $e7 (ite $e26 $e9 #b00000000)))) $e5) (ite (= #b00 (ite $e18 $e35 (ite $e19 $e33 (ite $e20 $e31 (ite $e21 $e29 #b00))))) (ite $e18 $e8 (ite $e19 $e6 (ite $e20 $e7 (ite $e21 $e9 #b00000000)))) $e5)) (ite (= #b1 (bvand (ite (= #b00 rd1) #b1 #b0) (bvand (bvnot $e16) $e27))) $e5 $e9))))))))))))))))))))))))))))))))))))))
(define-fun FunNew ((RTL_registers[3] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[3] RTL_registers[3]))
(define-fun FunNew ((rd1 (_ BitVec 8)) (oper2 (_ BitVec 8)) (reg0 (_ BitVec 8)) (reg1 (_ BitVec 8)) (inst_v (_ BitVec 8)) (v1 (_ BitVec 8)) (w1 (_ BitVec 8)) (v2 (_ BitVec 8)) (ex_val (_ BitVec 8)) (v0 (_ BitVec 8)) (oper1 (_ BitVec 8)) (s3 (_ BitVec 8)) (reg2 (_ BitVec 8)) (w2 (_ BitVec 8)) (reg3 (_ BitVec 8)) (s0 (_ BitVec 8)) (s2 (_ BitVec 8)) (op (_ BitVec 8)) (s1 (_ BitVec 8)) (inst (_ BitVec 8)) (rd2 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 (bvand w2 v2))) (let (($e2 (= #b00 rd2))) (let (($e3 (= #b01 rd2))) (let (($e4 (= #b10 rd2))) (let (($e5 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e6 (ite (= #b1 (bvand $e1 (ite (and $e4 (not $e3) (not $e2)) #b1 #b0))) ex_val reg2))) (let (($e7 (ite (= #b1 (bvand $e1 (ite (and $e3 (not $e2)) #b1 #b0))) ex_val reg1))) (let (($e8 (ite (= #b1 (bvand $e1 (ite (and (= #b11 rd2) (not $e4) (not $e3) (not $e2)) #b1 #b0))) ex_val reg3))) (let (($e9 (ite (= #b1 (bvand $e1 (ite $e2 #b1 #b0))) ex_val reg0))) (let (($e10 ((_ extract 7 6) inst))) (let (($e11 (and (not (= #b01 $e10)) (not (= #b10 $e10)) (not (= #b11 $e10))))) (let (($e12 ((_ extract 1 0) inst))) (let (($e13 (= #b00 $e12))) (let (($e14 (= #b01 $e12))) (let (($e15 (= #b10 $e12))) (let (($e16 (= #b11 $e12))) (let (($e17 (bvand (bvnot v1) inst_v))) (let (($e18 (bvand (bvnot (bvand (ite $e11 #b1 #b0) $e17)) (bvnot (bvand (bvnot (bvand w1 (bvnot v0))) (bvnot $e17)))))) (let (($e19 (bvand (bvnot v1) (bvnot inst_v)))) (let (($e20 ((_ extract 5 4) inst))) (let (($e21 (= #b11 $e20))) (let (($e22 (= #b10 $e20))) (let (($e23 (= #b01 $e20))) (let (($e24 (= #b00 $e20))) (let (($e25 ((_ extract 3 2) inst))) (let (($e26 (= #b11 $e25))) (let (($e27 (= #b10 $e25))) (let (($e28 (= #b01 $e25))) (let (($e29 (= #b00 $e25))) (let (($e30 (bvand (bvnot (bvand (bvnot $e18) (bvnot $e19))) (bvnot (bvand (bvnot w2) $e19))))) (let (($e31 (bvand (bvnot (bvand v1 (bvnot ((_ extract 1 1) s0)))) (bvnot (bvand (bvnot v1) (bvnot (ite $e13 #b1 #b0))))))) (let (($e32 (bvand (concat $e31 (bvnot v2)) (concat $e31 ((_ extract 0 0) s0))))) (let (($e33 (bvand (bvnot (bvand v1 (bvnot ((_ extract 1 1) s1)))) (bvnot (bvand (bvnot v1) (bvnot (ite $e14 #b1 #b0))))))) (let (($e34 (bvand (concat $e33 (bvnot v2)) (concat $e33 ((_ extract 0 0) s1))))) (let (($e35 (bvand (bvnot (bvand v1 (bvnot ((_ extract 1 1) s2)))) (bvnot (bvand (bvnot v1) (bvnot (ite $e15 #b1 #b0))))))) (let (($e36 (bvand (concat $e35 (bvnot v2)) (concat $e35 ((_ extract 0 0) s2))))) (let (($e37 (bvand (bvnot (bvand v1 (bvnot ((_ extract 1 1) s3)))) (bvnot (bvand (bvnot v1) (bvnot (ite $e16 #b1 #b0))))))) (let (($e38 (bvand (concat $e37 (bvnot v2)) (concat $e37 ((_ extract 0 0) s3))))) (ite (= #b1 (bvand (bvand inst_v (bvand (bvnot (bvand inst_v (bvnot (bvand (bvnot (bvand inst_v (ite $e11 #b1 #b0))) (bvnot (bvand (bvnot inst_v) (bvnot $e18))))))) (bvnot (bvand (bvnot inst_v) (bvnot $e30))))) (ite (and $e16 (not $e15) (not $e14) (not $e13)) #b1 #b0))) (bvadd (ite (= #b00 (ite $e26 $e38 (ite $e27 $e36 (ite $e28 $e34 (ite $e29 $e32 #b00))))) (ite $e26 $e8 (ite $e27 $e6 (ite $e28 $e7 (ite $e29 $e9 #b00000000)))) $e5) (ite (= #b00 (ite $e21 $e38 (ite $e22 $e36 (ite $e23 $e34 (ite $e24 $e32 #b00))))) (ite $e21 $e8 (ite $e22 $e6 (ite $e23 $e7 (ite $e24 $e9 #b00000000)))) $e5)) (ite (= #b1 (bvand (ite (and (= #b11 rd1) (not (= #b10 rd1)) (not (= #b01 rd1)) (not (= #b00 rd1))) #b1 #b0) (bvand (bvnot $e19) $e30))) $e5 $e8)))))))))))))))))))))))))))))))))))))))))
(define-fun FunNew ((RTL_registers[1] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[1] RTL_registers[1]))
(define-fun FunNew ((rd1 (_ BitVec 8)) (oper2 (_ BitVec 8)) (reg0 (_ BitVec 8)) (reg1 (_ BitVec 8)) (inst_v (_ BitVec 8)) (v1 (_ BitVec 8)) (w1 (_ BitVec 8)) (v2 (_ BitVec 8)) (ex_val (_ BitVec 8)) (v0 (_ BitVec 8)) (oper1 (_ BitVec 8)) (s3 (_ BitVec 8)) (reg2 (_ BitVec 8)) (w2 (_ BitVec 8)) (reg3 (_ BitVec 8)) (s0 (_ BitVec 8)) (s2 (_ BitVec 8)) (op (_ BitVec 8)) (s1 (_ BitVec 8)) (inst (_ BitVec 8)) (rd2 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 (bvand w2 v2))) (let (($e2 (= #b00 rd2))) (let (($e3 (= #b01 rd2))) (let (($e4 (= #b10 rd2))) (let (($e5 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e6 (ite (= #b1 (bvand $e1 (ite (and $e4 (not $e3) (not $e2)) #b1 #b0))) ex_val reg2))) (let (($e7 (ite (= #b1 (bvand $e1 (ite (and $e3 (not $e2)) #b1 #b0))) ex_val reg1))) (let (($e8 (ite (= #b1 (bvand $e1 (ite (and (= #b11 rd2) (not $e4) (not $e3) (not $e2)) #b1 #b0))) ex_val reg3))) (let (($e9 (ite (= #b1 (bvand $e1 (ite $e2 #b1 #b0))) ex_val reg0))) (let (($e10 ((_ extract 7 6) inst))) (let (($e11 (and (not (= #b01 $e10)) (not (= #b10 $e10)) (not (= #b11 $e10))))) (let (($e12 ((_ extract 1 0) inst))) (let (($e13 (= #b00 $e12))) (let (($e14 (= #b01 $e12))) (let (($e15 (bvand (bvnot v1) inst_v))) (let (($e16 (bvand (bvnot (bvand (ite $e11 #b1 #b0) $e15)) (bvnot (bvand (bvnot (bvand w1 (bvnot v0))) (bvnot $e15)))))) (let (($e17 (bvand (bvnot v1) (bvnot inst_v)))) (let (($e18 ((_ extract 5 4) inst))) (let (($e19 (= #b11 $e18))) (let (($e20 (= #b10 $e18))) (let (($e21 (= #b01 $e18))) (let (($e22 (= #b00 $e18))) (let (($e23 ((_ extract 3 2) inst))) (let (($e24 (= #b11 $e23))) (let (($e25 (= #b10 $e23))) (let (($e26 (= #b01 $e23))) (let (($e27 (= #b00 $e23))) (let (($e28 (bvand (bvnot (bvand (bvnot $e16) (bvnot $e17))) (bvnot (bvand (bvnot w2) $e17))))) (let (($e29 (bvand (bvnot (bvand v1 (bvnot ((_ extract 1 1) s0)))) (bvnot (bvand (bvnot v1) (bvnot (ite $e13 #b1 #b0))))))) (let (($e30 (bvand (concat $e29 (bvnot v2)) (concat $e29 ((_ extract 0 0) s0))))) (let (($e31 (bvand (bvnot (bvand v1 (bvnot ((_ extract 1 1) s1)))) (bvnot (bvand (bvnot v1) (bvnot (ite $e14 #b1 #b0))))))) (let (($e32 (bvand (concat $e31 (bvnot v2)) (concat $e31 ((_ extract 0 0) s1))))) (let (($e33 (bvand (bvnot (bvand v1 (bvnot ((_ extract 1 1) s2)))) (bvnot (bvand (bvnot v1) (bvnot (ite (= #b10 $e12) #b1 #b0))))))) (let (($e34 (bvand (concat $e33 (bvnot v2)) (concat $e33 ((_ extract 0 0) s2))))) (let (($e35 (bvand (bvnot (bvand v1 (bvnot ((_ extract 1 1) s3)))) (bvnot (bvand (bvnot v1) (bvnot (ite (= #b11 $e12) #b1 #b0))))))) (let (($e36 (bvand (concat $e35 (bvnot v2)) (concat $e35 ((_ extract 0 0) s3))))) (ite (= #b1 (bvand (bvand inst_v (bvand (bvnot (bvand inst_v (bvnot (bvand (bvnot (bvand inst_v (ite $e11 #b1 #b0))) (bvnot (bvand (bvnot inst_v) (bvnot $e16))))))) (bvnot (bvand (bvnot inst_v) (bvnot $e28))))) (ite (and $e14 (not $e13)) #b1 #b0))) (bvadd (ite (= #b00 (ite $e24 $e36 (ite $e25 $e34 (ite $e26 $e32 (ite $e27 $e30 #b00))))) (ite $e24 $e8 (ite $e25 $e6 (ite $e26 $e7 (ite $e27 $e9 #b00000000)))) $e5) (ite (= #b00 (ite $e19 $e36 (ite $e20 $e34 (ite $e21 $e32 (ite $e22 $e30 #b00))))) (ite $e19 $e8 (ite $e20 $e6 (ite $e21 $e7 (ite $e22 $e9 #b00000000)))) $e5)) (ite (= #b1 (bvand (ite (and (= #b01 rd1) (not (= #b00 rd1))) #b1 #b0) (bvand (bvnot $e17) $e28))) $e5 $e7)))))))))))))))))))))))))))))))))))))))
