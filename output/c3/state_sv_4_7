(define-fun FunNew ((RTL_registers[2] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[2] RTL_registers[2]))
(define-fun FunNew ((oper2 (_ BitVec 8)) (oper1 (_ BitVec 8)) (reg0 (_ BitVec 8)) (reg1 (_ BitVec 8)) (reg2 (_ BitVec 8)) (inst_v (_ BitVec 8)) (v1 (_ BitVec 8)) (s3 (_ BitVec 8)) (w1 (_ BitVec 8)) (w2 (_ BitVec 8)) (op (_ BitVec 8)) (inst (_ BitVec 8)) (s1 (_ BitVec 8)) (rd2 (_ BitVec 8)) (rd1 (_ BitVec 8)) (s2 (_ BitVec 8)) (s0 (_ BitVec 8)) (v2 (_ BitVec 8)) (ex_val (_ BitVec 8)) (reg3 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 (bvand w2 v2))) (let (($e2 (= #b00 rd2))) (let (($e3 (= #b01 rd2))) (let (($e4 (= #b10 rd2))) (let (($e5 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e6 (ite (= #b1 (bvand $e1 (ite (and $e4 (not $e3) (not $e2)) #b1 #b0))) ex_val reg2))) (let (($e7 (ite (= #b1 (bvand $e1 (ite (and $e3 (not $e2)) #b1 #b0))) ex_val reg1))) (let (($e8 (ite (= #b1 (bvand $e1 (ite (and (= #b11 rd2) (not $e4) (not $e3) (not $e2)) #b1 #b0))) ex_val reg3))) (let (($e9 (ite (= #b1 (bvand $e1 (ite $e2 #b1 #b0))) ex_val reg0))) (let (($e10 (bvand #b10 s1))) (let (($e11 (bvand #b10 s2))) (let (($e12 (bvand #b10 s3))) (let (($e13 (bvand #b10 s0))) (let (($e14 ((_ extract 7 6) inst))) (let (($e15 ((_ extract 1 0) inst))) (let (($e16 ((_ extract 5 4) inst))) (let (($e17 (= #b11 $e16))) (let (($e18 (= #b10 $e16))) (let (($e19 (= #b01 $e16))) (let (($e20 (= #b00 $e16))) (let (($e21 ((_ extract 3 2) inst))) (let (($e22 (= #b11 $e21))) (let (($e23 (= #b10 $e21))) (let (($e24 (= #b01 $e21))) (let (($e25 (= #b00 $e21))) (let (($e26 (bvand (bvnot (bvand (bvnot w1) v1)) (bvnot (bvand (bvnot w2) (bvnot v1)))))) (ite (= #b1 (bvand (bvand inst_v (bvand (bvnot (bvand inst_v (bvnot (bvand (bvnot (bvand inst_v (ite (and (not (= #b01 $e14)) (not (= #b10 $e14)) (not (= #b11 $e14))) #b1 #b0))) (bvnot (bvand (bvnot w1) (bvnot inst_v))))))) (bvnot (bvand (bvnot inst_v) (bvnot $e26))))) (ite (and (= #b10 $e15) (not (= #b01 $e15)) (not (= #b00 $e15))) #b1 #b0))) (bvadd (ite (= #b00 (ite $e17 $e12 (ite $e18 $e11 (ite $e19 $e10 (ite $e20 $e13 #b00))))) (ite $e17 $e8 (ite $e18 $e6 (ite $e19 $e7 (ite $e20 $e9 #b00000000)))) $e5) (ite (= #b00 (ite $e22 $e12 (ite $e23 $e11 (ite $e24 $e10 (ite $e25 $e13 #b00))))) (ite $e22 $e8 (ite $e23 $e6 (ite $e24 $e7 (ite $e25 $e9 #b00000000)))) $e5)) (ite (= #b1 (bvand (ite (and (= #b10 rd1) (not (= #b01 rd1)) (not (= #b00 rd1))) #b1 #b0) (bvand v1 $e26))) $e5 $e6)))))))))))))))))))))))))))))
(define-fun FunNew ((RTL_registers[0] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[0] RTL_registers[0]))
(define-fun FunNew ((oper2 (_ BitVec 8)) (oper1 (_ BitVec 8)) (reg0 (_ BitVec 8)) (reg1 (_ BitVec 8)) (reg2 (_ BitVec 8)) (inst_v (_ BitVec 8)) (v1 (_ BitVec 8)) (s3 (_ BitVec 8)) (w1 (_ BitVec 8)) (w2 (_ BitVec 8)) (op (_ BitVec 8)) (inst (_ BitVec 8)) (s1 (_ BitVec 8)) (rd2 (_ BitVec 8)) (rd1 (_ BitVec 8)) (s2 (_ BitVec 8)) (s0 (_ BitVec 8)) (v2 (_ BitVec 8)) (ex_val (_ BitVec 8)) (reg3 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 (bvand w2 v2))) (let (($e2 (= #b00 rd2))) (let (($e3 (= #b01 rd2))) (let (($e4 (= #b10 rd2))) (let (($e5 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e6 (ite (= #b1 (bvand $e1 (ite (and $e4 (not $e3) (not $e2)) #b1 #b0))) ex_val reg2))) (let (($e7 (ite (= #b1 (bvand $e1 (ite (and $e3 (not $e2)) #b1 #b0))) ex_val reg1))) (let (($e8 (ite (= #b1 (bvand $e1 (ite (and (= #b11 rd2) (not $e4) (not $e3) (not $e2)) #b1 #b0))) ex_val reg3))) (let (($e9 (ite (= #b1 (bvand $e1 (ite $e2 #b1 #b0))) ex_val reg0))) (let (($e10 (bvand #b10 s1))) (let (($e11 (bvand #b10 s2))) (let (($e12 (bvand #b10 s3))) (let (($e13 (bvand #b10 s0))) (let (($e14 ((_ extract 7 6) inst))) (let (($e15 ((_ extract 5 4) inst))) (let (($e16 (= #b11 $e15))) (let (($e17 (= #b10 $e15))) (let (($e18 (= #b01 $e15))) (let (($e19 (= #b00 $e15))) (let (($e20 ((_ extract 3 2) inst))) (let (($e21 (= #b11 $e20))) (let (($e22 (= #b10 $e20))) (let (($e23 (= #b01 $e20))) (let (($e24 (= #b00 $e20))) (let (($e25 (bvand (bvnot (bvand (bvnot w1) v1)) (bvnot (bvand (bvnot w2) (bvnot v1)))))) (ite (= #b1 (bvand (ite (= #b00 ((_ extract 1 0) inst)) #b1 #b0) (bvand inst_v (bvand (bvnot (bvand inst_v (bvnot (bvand (bvnot (bvand inst_v (ite (and (not (= #b01 $e14)) (not (= #b10 $e14)) (not (= #b11 $e14))) #b1 #b0))) (bvnot (bvand (bvnot w1) (bvnot inst_v))))))) (bvnot (bvand (bvnot inst_v) (bvnot $e25))))))) (bvadd (ite (= #b00 (ite $e16 $e12 (ite $e17 $e11 (ite $e18 $e10 (ite $e19 $e13 #b00))))) (ite $e16 $e8 (ite $e17 $e6 (ite $e18 $e7 (ite $e19 $e9 #b00000000)))) $e5) (ite (= #b00 (ite $e21 $e12 (ite $e22 $e11 (ite $e23 $e10 (ite $e24 $e13 #b00))))) (ite $e21 $e8 (ite $e22 $e6 (ite $e23 $e7 (ite $e24 $e9 #b00000000)))) $e5)) (ite (= #b1 (bvand (ite (= #b00 rd1) #b1 #b0) (bvand v1 $e25))) $e5 $e9))))))))))))))))))))))))))))
(define-fun FunNew ((RTL_registers[3] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[3] RTL_registers[3]))
(define-fun FunNew ((oper2 (_ BitVec 8)) (oper1 (_ BitVec 8)) (reg0 (_ BitVec 8)) (reg1 (_ BitVec 8)) (reg2 (_ BitVec 8)) (inst_v (_ BitVec 8)) (v1 (_ BitVec 8)) (s3 (_ BitVec 8)) (w1 (_ BitVec 8)) (w2 (_ BitVec 8)) (op (_ BitVec 8)) (inst (_ BitVec 8)) (s1 (_ BitVec 8)) (rd2 (_ BitVec 8)) (rd1 (_ BitVec 8)) (s2 (_ BitVec 8)) (s0 (_ BitVec 8)) (v2 (_ BitVec 8)) (ex_val (_ BitVec 8)) (reg3 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 (bvand w2 v2))) (let (($e2 (= #b00 rd2))) (let (($e3 (= #b01 rd2))) (let (($e4 (= #b10 rd2))) (let (($e5 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e6 (ite (= #b1 (bvand $e1 (ite (and $e4 (not $e3) (not $e2)) #b1 #b0))) ex_val reg2))) (let (($e7 (ite (= #b1 (bvand $e1 (ite (and $e3 (not $e2)) #b1 #b0))) ex_val reg1))) (let (($e8 (ite (= #b1 (bvand $e1 (ite (and (= #b11 rd2) (not $e4) (not $e3) (not $e2)) #b1 #b0))) ex_val reg3))) (let (($e9 (ite (= #b1 (bvand $e1 (ite $e2 #b1 #b0))) ex_val reg0))) (let (($e10 (bvand #b10 s1))) (let (($e11 (bvand #b10 s2))) (let (($e12 (bvand #b10 s3))) (let (($e13 (bvand #b10 s0))) (let (($e14 ((_ extract 7 6) inst))) (let (($e15 ((_ extract 1 0) inst))) (let (($e16 ((_ extract 5 4) inst))) (let (($e17 (= #b11 $e16))) (let (($e18 (= #b10 $e16))) (let (($e19 (= #b01 $e16))) (let (($e20 (= #b00 $e16))) (let (($e21 ((_ extract 3 2) inst))) (let (($e22 (= #b11 $e21))) (let (($e23 (= #b10 $e21))) (let (($e24 (= #b01 $e21))) (let (($e25 (= #b00 $e21))) (let (($e26 (bvand (bvnot (bvand (bvnot w1) v1)) (bvnot (bvand (bvnot w2) (bvnot v1)))))) (ite (= #b1 (bvand (bvand inst_v (bvand (bvnot (bvand inst_v (bvnot (bvand (bvnot (bvand inst_v (ite (and (not (= #b01 $e14)) (not (= #b10 $e14)) (not (= #b11 $e14))) #b1 #b0))) (bvnot (bvand (bvnot w1) (bvnot inst_v))))))) (bvnot (bvand (bvnot inst_v) (bvnot $e26))))) (ite (and (= #b11 $e15) (not (= #b10 $e15)) (not (= #b01 $e15)) (not (= #b00 $e15))) #b1 #b0))) (bvadd (ite (= #b00 (ite $e17 $e12 (ite $e18 $e11 (ite $e19 $e10 (ite $e20 $e13 #b00))))) (ite $e17 $e8 (ite $e18 $e6 (ite $e19 $e7 (ite $e20 $e9 #b00000000)))) $e5) (ite (= #b00 (ite $e22 $e12 (ite $e23 $e11 (ite $e24 $e10 (ite $e25 $e13 #b00))))) (ite $e22 $e8 (ite $e23 $e6 (ite $e24 $e7 (ite $e25 $e9 #b00000000)))) $e5)) (ite (= #b1 (bvand (ite (and (= #b11 rd1) (not (= #b10 rd1)) (not (= #b01 rd1)) (not (= #b00 rd1))) #b1 #b0) (bvand v1 $e26))) $e5 $e8)))))))))))))))))))))))))))))
(define-fun FunNew ((RTL_registers[1] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[1] RTL_registers[1]))
(define-fun FunNew ((oper2 (_ BitVec 8)) (oper1 (_ BitVec 8)) (reg0 (_ BitVec 8)) (reg1 (_ BitVec 8)) (reg2 (_ BitVec 8)) (inst_v (_ BitVec 8)) (v1 (_ BitVec 8)) (s3 (_ BitVec 8)) (w1 (_ BitVec 8)) (w2 (_ BitVec 8)) (op (_ BitVec 8)) (inst (_ BitVec 8)) (s1 (_ BitVec 8)) (rd2 (_ BitVec 8)) (rd1 (_ BitVec 8)) (s2 (_ BitVec 8)) (s0 (_ BitVec 8)) (v2 (_ BitVec 8)) (ex_val (_ BitVec 8)) (reg3 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 (bvand w2 v2))) (let (($e2 (= #b00 rd2))) (let (($e3 (= #b01 rd2))) (let (($e4 (= #b10 rd2))) (let (($e5 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e6 (ite (= #b1 (bvand $e1 (ite (and $e4 (not $e3) (not $e2)) #b1 #b0))) ex_val reg2))) (let (($e7 (ite (= #b1 (bvand $e1 (ite (and $e3 (not $e2)) #b1 #b0))) ex_val reg1))) (let (($e8 (ite (= #b1 (bvand $e1 (ite (and (= #b11 rd2) (not $e4) (not $e3) (not $e2)) #b1 #b0))) ex_val reg3))) (let (($e9 (ite (= #b1 (bvand $e1 (ite $e2 #b1 #b0))) ex_val reg0))) (let (($e10 (bvand #b10 s1))) (let (($e11 (bvand #b10 s2))) (let (($e12 (bvand #b10 s3))) (let (($e13 (bvand #b10 s0))) (let (($e14 ((_ extract 7 6) inst))) (let (($e15 ((_ extract 1 0) inst))) (let (($e16 ((_ extract 5 4) inst))) (let (($e17 (= #b11 $e16))) (let (($e18 (= #b10 $e16))) (let (($e19 (= #b01 $e16))) (let (($e20 (= #b00 $e16))) (let (($e21 ((_ extract 3 2) inst))) (let (($e22 (= #b11 $e21))) (let (($e23 (= #b10 $e21))) (let (($e24 (= #b01 $e21))) (let (($e25 (= #b00 $e21))) (let (($e26 (bvand (bvnot (bvand (bvnot w1) v1)) (bvnot (bvand (bvnot w2) (bvnot v1)))))) (ite (= #b1 (bvand (bvand inst_v (bvand (bvnot (bvand inst_v (bvnot (bvand (bvnot (bvand inst_v (ite (and (not (= #b01 $e14)) (not (= #b10 $e14)) (not (= #b11 $e14))) #b1 #b0))) (bvnot (bvand (bvnot w1) (bvnot inst_v))))))) (bvnot (bvand (bvnot inst_v) (bvnot $e26))))) (ite (and (= #b01 $e15) (not (= #b00 $e15))) #b1 #b0))) (bvadd (ite (= #b00 (ite $e17 $e12 (ite $e18 $e11 (ite $e19 $e10 (ite $e20 $e13 #b00))))) (ite $e17 $e8 (ite $e18 $e6 (ite $e19 $e7 (ite $e20 $e9 #b00000000)))) $e5) (ite (= #b00 (ite $e22 $e12 (ite $e23 $e11 (ite $e24 $e10 (ite $e25 $e13 #b00))))) (ite $e22 $e8 (ite $e23 $e6 (ite $e24 $e7 (ite $e25 $e9 #b00000000)))) $e5)) (ite (= #b1 (bvand (ite (and (= #b01 rd1) (not (= #b00 rd1))) #b1 #b0) (bvand v1 $e26))) $e5 $e7)))))))))))))))))))))))))))))
