(define-fun FunNew ((RTL_registers[2] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[2] RTL_registers[2]))
(define-fun FunNew ((oper1 (_ BitVec 8)) (reg0 (_ BitVec 8)) (reg1 (_ BitVec 8)) (v0 (_ BitVec 8)) (w2 (_ BitVec 8)) (oper2 (_ BitVec 8)) (inst_id (_ BitVec 8)) (v2 (_ BitVec 8)) (ex_val (_ BitVec 8)) (s3 (_ BitVec 8)) (op (_ BitVec 8)) (inst (_ BitVec 8)) (s1 (_ BitVec 8)) (rd2 (_ BitVec 8)) (s2 (_ BitVec 8)) (s0 (_ BitVec 8)) (reg3 (_ BitVec 8)) (reg2 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 (bvand w2 v2))) (let (($e2 (= #b00 rd2))) (let (($e3 (= #b01 rd2))) (let (($e4 (= #b10 rd2))) (let (($e5 ((_ extract 7 6) inst_id))) (let (($e6 (= #b10 $e5))) (let (($e7 (= #b01 $e5))) (let (($e8 (= #b11 $e5))) (let (($e9 (and (not $e7) (not $e6) (not $e8)))) (let (($e10 ((_ extract 1 0) inst_id))) (let (($e11 (= #b00 $e10))) (let (($e12 (= #b01 $e10))) (let (($e13 (= #b10 $e10))) (let (($e14 (concat #b0000 ((_ extract 5 2) inst_id)))) (let (($e15 ((_ extract 5 4) inst_id))) (let (($e16 (= #b11 $e15))) (let (($e17 (= #b10 $e15))) (let (($e18 (= #b01 $e15))) (let (($e19 (= #b00 $e15))) (let (($e20 (ite $e16 s3 (ite $e17 s2 (ite $e18 s1 (ite $e19 s0 #b00)))))) (let (($e21 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e22 (ite $e6 $e14 (ite (= #b00 $e20) (ite $e16 reg3 (ite $e17 reg2 (ite $e18 reg1 (ite $e19 reg0 #b00000000)))) (ite (= #b01 $e20) ex_val $e21))))) (let (($e23 ((_ extract 3 2) inst_id))) (let (($e24 (= #b11 $e23))) (let (($e25 (= #b10 $e23))) (let (($e26 (= #b01 $e23))) (let (($e27 (= #b00 $e23))) (let (($e28 (ite $e24 s3 (ite $e25 s2 (ite $e26 s1 (ite $e27 s0 #b00)))))) (let (($e29 (ite (= #b00 $e28) (ite $e24 reg3 (ite $e25 reg2 (ite $e26 reg1 (ite $e27 reg0 #b00000000)))) (ite (= #b01 $e28) ex_val $e21)))) (let (($e30 (ite (= #b1 (bvand $e1 (ite (and $e4 (not $e3) (not $e2)) #b1 #b0))) ex_val reg2))) (let (($e31 (ite (= #b1 (bvand $e1 (ite (and $e3 (not $e2)) #b1 #b0))) ex_val reg1))) (let (($e32 (ite (= #b1 (bvand $e1 (ite (and (= #b11 rd2) (not $e4) (not $e3) (not $e2)) #b1 #b0))) ex_val reg3))) (let (($e33 (ite (= #b1 (bvand $e1 (ite $e2 #b1 #b0))) ex_val reg0))) (let (($e34 ((_ extract 7 6) inst))) (let (($e35 ((_ extract 1 0) inst))) (let (($e36 (and $e11 (not $e9)))) (let (($e37 (and $e12 (not $e9)))) (let (($e38 (and $e13 (not $e9)))) (let (($e39 (and (= #b11 $e10) (not $e9)))) (let (($e40 ((_ extract 5 4) inst))) (let (($e41 (= #b11 $e40))) (let (($e42 (= #b10 $e40))) (let (($e43 (= #b01 $e40))) (let (($e44 (= #b00 $e40))) (let (($e45 ((_ extract 3 2) inst))) (let (($e46 (= #b11 $e45))) (let (($e47 (= #b10 $e45))) (let (($e48 (= #b01 $e45))) (let (($e49 (= #b00 $e45))) (let (($e50 (ite $e7 (bvadd $e22 $e29) (ite $e6 $e14 (ite $e8 (bvnot (bvand $e22 $e29)) #b00000000))))) (let (($e51 (bvand (bvnot (bvand v0 (ite $e9 #b1 #b0))) (bvnot (bvand (bvnot w2) (bvnot v0)))))) (let (($e52 (bvand (concat (ite $e36 #b1 #b0) (bvnot v2)) (concat (ite $e36 #b1 #b0) (ite (= #b01 s0) #b1 #b0))))) (let (($e53 (bvand (concat (ite $e37 #b1 #b0) (bvnot v2)) (concat (ite $e37 #b1 #b0) (ite (= #b01 s1) #b1 #b0))))) (let (($e54 (bvand (concat (ite $e38 #b1 #b0) (bvnot v2)) (concat (ite $e38 #b1 #b0) (ite (= #b01 s2) #b1 #b0))))) (let (($e55 (bvand (concat (ite $e39 #b1 #b0) (bvnot v2)) (concat (ite $e39 #b1 #b0) (ite (= #b01 s3) #b1 #b0))))) (ite (= #b1 (bvand (bvand v0 (bvand (bvnot (bvand v0 (bvnot (bvand (bvnot (bvand v0 (ite (and (not (= #b01 $e34)) (not (= #b10 $e34)) (not (= #b11 $e34))) #b1 #b0))) (bvnot (bvand (bvnot v0) (ite $e9 #b1 #b0))))))) (bvnot (bvand (bvnot v0) (bvnot $e51))))) (ite (and (= #b10 $e35) (not (= #b01 $e35)) (not (= #b00 $e35))) #b1 #b0))) (bvadd (ite (= #b00 (ite $e41 $e55 (ite $e42 $e54 (ite $e43 $e53 (ite $e44 $e52 #b00))))) (ite $e41 $e32 (ite $e42 $e30 (ite $e43 $e31 (ite $e44 $e33 #b00000000)))) $e50) (ite (= #b00 (ite $e46 $e55 (ite $e47 $e54 (ite $e48 $e53 (ite $e49 $e52 #b00))))) (ite $e46 $e32 (ite $e47 $e30 (ite $e48 $e31 (ite $e49 $e33 #b00000000)))) $e50)) (ite (= #b1 (bvand (ite (and $e13 (not $e12) (not $e11)) #b1 #b0) (bvand v0 $e51))) $e50 $e30))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(define-fun FunNew ((RTL_registers[0] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[0] RTL_registers[0]))
(define-fun FunNew ((oper1 (_ BitVec 8)) (reg0 (_ BitVec 8)) (reg1 (_ BitVec 8)) (v0 (_ BitVec 8)) (w2 (_ BitVec 8)) (oper2 (_ BitVec 8)) (inst_id (_ BitVec 8)) (v2 (_ BitVec 8)) (ex_val (_ BitVec 8)) (s3 (_ BitVec 8)) (op (_ BitVec 8)) (inst (_ BitVec 8)) (s1 (_ BitVec 8)) (rd2 (_ BitVec 8)) (s2 (_ BitVec 8)) (s0 (_ BitVec 8)) (reg3 (_ BitVec 8)) (reg2 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 (bvand w2 v2))) (let (($e2 (= #b00 rd2))) (let (($e3 (= #b01 rd2))) (let (($e4 (= #b10 rd2))) (let (($e5 ((_ extract 7 6) inst_id))) (let (($e6 (= #b10 $e5))) (let (($e7 (= #b01 $e5))) (let (($e8 (= #b11 $e5))) (let (($e9 (and (not $e7) (not $e6) (not $e8)))) (let (($e10 ((_ extract 1 0) inst_id))) (let (($e11 (= #b00 $e10))) (let (($e12 (concat #b0000 ((_ extract 5 2) inst_id)))) (let (($e13 ((_ extract 5 4) inst_id))) (let (($e14 (= #b11 $e13))) (let (($e15 (= #b10 $e13))) (let (($e16 (= #b01 $e13))) (let (($e17 (= #b00 $e13))) (let (($e18 (ite $e14 s3 (ite $e15 s2 (ite $e16 s1 (ite $e17 s0 #b00)))))) (let (($e19 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e20 (ite $e6 $e12 (ite (= #b00 $e18) (ite $e14 reg3 (ite $e15 reg2 (ite $e16 reg1 (ite $e17 reg0 #b00000000)))) (ite (= #b01 $e18) ex_val $e19))))) (let (($e21 ((_ extract 3 2) inst_id))) (let (($e22 (= #b11 $e21))) (let (($e23 (= #b10 $e21))) (let (($e24 (= #b01 $e21))) (let (($e25 (= #b00 $e21))) (let (($e26 (ite $e22 s3 (ite $e23 s2 (ite $e24 s1 (ite $e25 s0 #b00)))))) (let (($e27 (ite (= #b00 $e26) (ite $e22 reg3 (ite $e23 reg2 (ite $e24 reg1 (ite $e25 reg0 #b00000000)))) (ite (= #b01 $e26) ex_val $e19)))) (let (($e28 (ite (= #b1 (bvand $e1 (ite (and $e4 (not $e3) (not $e2)) #b1 #b0))) ex_val reg2))) (let (($e29 (ite (= #b1 (bvand $e1 (ite (and $e3 (not $e2)) #b1 #b0))) ex_val reg1))) (let (($e30 (ite (= #b1 (bvand $e1 (ite (and (= #b11 rd2) (not $e4) (not $e3) (not $e2)) #b1 #b0))) ex_val reg3))) (let (($e31 (ite (= #b1 (bvand $e1 (ite $e2 #b1 #b0))) ex_val reg0))) (let (($e32 ((_ extract 7 6) inst))) (let (($e33 (and $e11 (not $e9)))) (let (($e34 (and (= #b01 $e10) (not $e9)))) (let (($e35 (and (= #b10 $e10) (not $e9)))) (let (($e36 (and (= #b11 $e10) (not $e9)))) (let (($e37 ((_ extract 5 4) inst))) (let (($e38 (= #b11 $e37))) (let (($e39 (= #b10 $e37))) (let (($e40 (= #b01 $e37))) (let (($e41 (= #b00 $e37))) (let (($e42 ((_ extract 3 2) inst))) (let (($e43 (= #b11 $e42))) (let (($e44 (= #b10 $e42))) (let (($e45 (= #b01 $e42))) (let (($e46 (= #b00 $e42))) (let (($e47 (ite $e7 (bvadd $e20 $e27) (ite $e6 $e12 (ite $e8 (bvnot (bvand $e20 $e27)) #b00000000))))) (let (($e48 (bvand (bvnot (bvand v0 (ite $e9 #b1 #b0))) (bvnot (bvand (bvnot w2) (bvnot v0)))))) (let (($e49 (bvand (concat (ite $e33 #b1 #b0) (bvnot v2)) (concat (ite $e33 #b1 #b0) (ite (= #b01 s0) #b1 #b0))))) (let (($e50 (bvand (concat (ite $e34 #b1 #b0) (bvnot v2)) (concat (ite $e34 #b1 #b0) (ite (= #b01 s1) #b1 #b0))))) (let (($e51 (bvand (concat (ite $e35 #b1 #b0) (bvnot v2)) (concat (ite $e35 #b1 #b0) (ite (= #b01 s2) #b1 #b0))))) (let (($e52 (bvand (concat (ite $e36 #b1 #b0) (bvnot v2)) (concat (ite $e36 #b1 #b0) (ite (= #b01 s3) #b1 #b0))))) (ite (= #b1 (bvand (ite (= #b00 ((_ extract 1 0) inst)) #b1 #b0) (bvand v0 (bvand (bvnot (bvand v0 (bvnot (bvand (bvnot (bvand v0 (ite (and (not (= #b01 $e32)) (not (= #b10 $e32)) (not (= #b11 $e32))) #b1 #b0))) (bvnot (bvand (bvnot v0) (ite $e9 #b1 #b0))))))) (bvnot (bvand (bvnot v0) (bvnot $e48))))))) (bvadd (ite (= #b00 (ite $e38 $e52 (ite $e39 $e51 (ite $e40 $e50 (ite $e41 $e49 #b00))))) (ite $e38 $e30 (ite $e39 $e28 (ite $e40 $e29 (ite $e41 $e31 #b00000000)))) $e47) (ite (= #b00 (ite $e43 $e52 (ite $e44 $e51 (ite $e45 $e50 (ite $e46 $e49 #b00))))) (ite $e43 $e30 (ite $e44 $e28 (ite $e45 $e29 (ite $e46 $e31 #b00000000)))) $e47)) (ite (= #b1 (bvand (ite $e11 #b1 #b0) (bvand v0 $e48))) $e47 $e31)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(define-fun FunNew ((RTL_registers[3] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[3] RTL_registers[3]))
(define-fun FunNew ((oper1 (_ BitVec 8)) (reg0 (_ BitVec 8)) (reg1 (_ BitVec 8)) (v0 (_ BitVec 8)) (w2 (_ BitVec 8)) (oper2 (_ BitVec 8)) (inst_id (_ BitVec 8)) (v2 (_ BitVec 8)) (ex_val (_ BitVec 8)) (s3 (_ BitVec 8)) (op (_ BitVec 8)) (inst (_ BitVec 8)) (s1 (_ BitVec 8)) (rd2 (_ BitVec 8)) (s2 (_ BitVec 8)) (s0 (_ BitVec 8)) (reg3 (_ BitVec 8)) (reg2 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 (bvand w2 v2))) (let (($e2 (= #b00 rd2))) (let (($e3 (= #b01 rd2))) (let (($e4 (= #b10 rd2))) (let (($e5 ((_ extract 7 6) inst_id))) (let (($e6 (= #b10 $e5))) (let (($e7 (= #b01 $e5))) (let (($e8 (= #b11 $e5))) (let (($e9 (and (not $e7) (not $e6) (not $e8)))) (let (($e10 ((_ extract 1 0) inst_id))) (let (($e11 (= #b00 $e10))) (let (($e12 (= #b01 $e10))) (let (($e13 (= #b10 $e10))) (let (($e14 (= #b11 $e10))) (let (($e15 (concat #b0000 ((_ extract 5 2) inst_id)))) (let (($e16 ((_ extract 5 4) inst_id))) (let (($e17 (= #b11 $e16))) (let (($e18 (= #b10 $e16))) (let (($e19 (= #b01 $e16))) (let (($e20 (= #b00 $e16))) (let (($e21 (ite $e17 s3 (ite $e18 s2 (ite $e19 s1 (ite $e20 s0 #b00)))))) (let (($e22 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e23 (ite $e6 $e15 (ite (= #b00 $e21) (ite $e17 reg3 (ite $e18 reg2 (ite $e19 reg1 (ite $e20 reg0 #b00000000)))) (ite (= #b01 $e21) ex_val $e22))))) (let (($e24 ((_ extract 3 2) inst_id))) (let (($e25 (= #b11 $e24))) (let (($e26 (= #b10 $e24))) (let (($e27 (= #b01 $e24))) (let (($e28 (= #b00 $e24))) (let (($e29 (ite $e25 s3 (ite $e26 s2 (ite $e27 s1 (ite $e28 s0 #b00)))))) (let (($e30 (ite (= #b00 $e29) (ite $e25 reg3 (ite $e26 reg2 (ite $e27 reg1 (ite $e28 reg0 #b00000000)))) (ite (= #b01 $e29) ex_val $e22)))) (let (($e31 (ite (= #b1 (bvand $e1 (ite (and $e4 (not $e3) (not $e2)) #b1 #b0))) ex_val reg2))) (let (($e32 (ite (= #b1 (bvand $e1 (ite (and $e3 (not $e2)) #b1 #b0))) ex_val reg1))) (let (($e33 (ite (= #b1 (bvand $e1 (ite (and (= #b11 rd2) (not $e4) (not $e3) (not $e2)) #b1 #b0))) ex_val reg3))) (let (($e34 (ite (= #b1 (bvand $e1 (ite $e2 #b1 #b0))) ex_val reg0))) (let (($e35 ((_ extract 7 6) inst))) (let (($e36 ((_ extract 1 0) inst))) (let (($e37 (and $e11 (not $e9)))) (let (($e38 (and $e12 (not $e9)))) (let (($e39 (and $e13 (not $e9)))) (let (($e40 (and $e14 (not $e9)))) (let (($e41 ((_ extract 5 4) inst))) (let (($e42 (= #b11 $e41))) (let (($e43 (= #b10 $e41))) (let (($e44 (= #b01 $e41))) (let (($e45 (= #b00 $e41))) (let (($e46 ((_ extract 3 2) inst))) (let (($e47 (= #b11 $e46))) (let (($e48 (= #b10 $e46))) (let (($e49 (= #b01 $e46))) (let (($e50 (= #b00 $e46))) (let (($e51 (ite $e7 (bvadd $e23 $e30) (ite $e6 $e15 (ite $e8 (bvnot (bvand $e23 $e30)) #b00000000))))) (let (($e52 (bvand (bvnot (bvand v0 (ite $e9 #b1 #b0))) (bvnot (bvand (bvnot w2) (bvnot v0)))))) (let (($e53 (bvand (concat (ite $e37 #b1 #b0) (bvnot v2)) (concat (ite $e37 #b1 #b0) (ite (= #b01 s0) #b1 #b0))))) (let (($e54 (bvand (concat (ite $e38 #b1 #b0) (bvnot v2)) (concat (ite $e38 #b1 #b0) (ite (= #b01 s1) #b1 #b0))))) (let (($e55 (bvand (concat (ite $e39 #b1 #b0) (bvnot v2)) (concat (ite $e39 #b1 #b0) (ite (= #b01 s2) #b1 #b0))))) (let (($e56 (bvand (concat (ite $e40 #b1 #b0) (bvnot v2)) (concat (ite $e40 #b1 #b0) (ite (= #b01 s3) #b1 #b0))))) (ite (= #b1 (bvand (bvand v0 (bvand (bvnot (bvand v0 (bvnot (bvand (bvnot (bvand v0 (ite (and (not (= #b01 $e35)) (not (= #b10 $e35)) (not (= #b11 $e35))) #b1 #b0))) (bvnot (bvand (bvnot v0) (ite $e9 #b1 #b0))))))) (bvnot (bvand (bvnot v0) (bvnot $e52))))) (ite (and (= #b11 $e36) (not (= #b10 $e36)) (not (= #b01 $e36)) (not (= #b00 $e36))) #b1 #b0))) (bvadd (ite (= #b00 (ite $e42 $e56 (ite $e43 $e55 (ite $e44 $e54 (ite $e45 $e53 #b00))))) (ite $e42 $e33 (ite $e43 $e31 (ite $e44 $e32 (ite $e45 $e34 #b00000000)))) $e51) (ite (= #b00 (ite $e47 $e56 (ite $e48 $e55 (ite $e49 $e54 (ite $e50 $e53 #b00))))) (ite $e47 $e33 (ite $e48 $e31 (ite $e49 $e32 (ite $e50 $e34 #b00000000)))) $e51)) (ite (= #b1 (bvand (ite (and $e14 (not $e13) (not $e12) (not $e11)) #b1 #b0) (bvand v0 $e52))) $e51 $e33)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(define-fun FunNew ((RTL_registers[1] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[1] RTL_registers[1]))
(define-fun FunNew ((oper1 (_ BitVec 8)) (reg0 (_ BitVec 8)) (reg1 (_ BitVec 8)) (v0 (_ BitVec 8)) (w2 (_ BitVec 8)) (oper2 (_ BitVec 8)) (inst_id (_ BitVec 8)) (v2 (_ BitVec 8)) (ex_val (_ BitVec 8)) (s3 (_ BitVec 8)) (op (_ BitVec 8)) (inst (_ BitVec 8)) (s1 (_ BitVec 8)) (rd2 (_ BitVec 8)) (s2 (_ BitVec 8)) (s0 (_ BitVec 8)) (reg3 (_ BitVec 8)) (reg2 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 (bvand w2 v2))) (let (($e2 (= #b00 rd2))) (let (($e3 (= #b01 rd2))) (let (($e4 (= #b10 rd2))) (let (($e5 ((_ extract 7 6) inst_id))) (let (($e6 (= #b10 $e5))) (let (($e7 (= #b01 $e5))) (let (($e8 (= #b11 $e5))) (let (($e9 (and (not $e7) (not $e6) (not $e8)))) (let (($e10 ((_ extract 1 0) inst_id))) (let (($e11 (= #b00 $e10))) (let (($e12 (= #b01 $e10))) (let (($e13 (concat #b0000 ((_ extract 5 2) inst_id)))) (let (($e14 ((_ extract 5 4) inst_id))) (let (($e15 (= #b11 $e14))) (let (($e16 (= #b10 $e14))) (let (($e17 (= #b01 $e14))) (let (($e18 (= #b00 $e14))) (let (($e19 (ite $e15 s3 (ite $e16 s2 (ite $e17 s1 (ite $e18 s0 #b00)))))) (let (($e20 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e21 (ite $e6 $e13 (ite (= #b00 $e19) (ite $e15 reg3 (ite $e16 reg2 (ite $e17 reg1 (ite $e18 reg0 #b00000000)))) (ite (= #b01 $e19) ex_val $e20))))) (let (($e22 ((_ extract 3 2) inst_id))) (let (($e23 (= #b11 $e22))) (let (($e24 (= #b10 $e22))) (let (($e25 (= #b01 $e22))) (let (($e26 (= #b00 $e22))) (let (($e27 (ite $e23 s3 (ite $e24 s2 (ite $e25 s1 (ite $e26 s0 #b00)))))) (let (($e28 (ite (= #b00 $e27) (ite $e23 reg3 (ite $e24 reg2 (ite $e25 reg1 (ite $e26 reg0 #b00000000)))) (ite (= #b01 $e27) ex_val $e20)))) (let (($e29 (ite (= #b1 (bvand $e1 (ite (and $e4 (not $e3) (not $e2)) #b1 #b0))) ex_val reg2))) (let (($e30 (ite (= #b1 (bvand $e1 (ite (and $e3 (not $e2)) #b1 #b0))) ex_val reg1))) (let (($e31 (ite (= #b1 (bvand $e1 (ite (and (= #b11 rd2) (not $e4) (not $e3) (not $e2)) #b1 #b0))) ex_val reg3))) (let (($e32 (ite (= #b1 (bvand $e1 (ite $e2 #b1 #b0))) ex_val reg0))) (let (($e33 ((_ extract 7 6) inst))) (let (($e34 ((_ extract 1 0) inst))) (let (($e35 (and $e11 (not $e9)))) (let (($e36 (and $e12 (not $e9)))) (let (($e37 (and (= #b10 $e10) (not $e9)))) (let (($e38 (and (= #b11 $e10) (not $e9)))) (let (($e39 ((_ extract 5 4) inst))) (let (($e40 (= #b11 $e39))) (let (($e41 (= #b10 $e39))) (let (($e42 (= #b01 $e39))) (let (($e43 (= #b00 $e39))) (let (($e44 ((_ extract 3 2) inst))) (let (($e45 (= #b11 $e44))) (let (($e46 (= #b10 $e44))) (let (($e47 (= #b01 $e44))) (let (($e48 (= #b00 $e44))) (let (($e49 (ite $e7 (bvadd $e21 $e28) (ite $e6 $e13 (ite $e8 (bvnot (bvand $e21 $e28)) #b00000000))))) (let (($e50 (bvand (bvnot (bvand v0 (ite $e9 #b1 #b0))) (bvnot (bvand (bvnot w2) (bvnot v0)))))) (let (($e51 (bvand (concat (ite $e35 #b1 #b0) (bvnot v2)) (concat (ite $e35 #b1 #b0) (ite (= #b01 s0) #b1 #b0))))) (let (($e52 (bvand (concat (ite $e36 #b1 #b0) (bvnot v2)) (concat (ite $e36 #b1 #b0) (ite (= #b01 s1) #b1 #b0))))) (let (($e53 (bvand (concat (ite $e37 #b1 #b0) (bvnot v2)) (concat (ite $e37 #b1 #b0) (ite (= #b01 s2) #b1 #b0))))) (let (($e54 (bvand (concat (ite $e38 #b1 #b0) (bvnot v2)) (concat (ite $e38 #b1 #b0) (ite (= #b01 s3) #b1 #b0))))) (ite (= #b1 (bvand (bvand v0 (bvand (bvnot (bvand v0 (bvnot (bvand (bvnot (bvand v0 (ite (and (not (= #b01 $e33)) (not (= #b10 $e33)) (not (= #b11 $e33))) #b1 #b0))) (bvnot (bvand (bvnot v0) (ite $e9 #b1 #b0))))))) (bvnot (bvand (bvnot v0) (bvnot $e50))))) (ite (and (= #b01 $e34) (not (= #b00 $e34))) #b1 #b0))) (bvadd (ite (= #b00 (ite $e40 $e54 (ite $e41 $e53 (ite $e42 $e52 (ite $e43 $e51 #b00))))) (ite $e40 $e31 (ite $e41 $e29 (ite $e42 $e30 (ite $e43 $e32 #b00000000)))) $e49) (ite (= #b00 (ite $e45 $e54 (ite $e46 $e53 (ite $e47 $e52 (ite $e48 $e51 #b00))))) (ite $e45 $e31 (ite $e46 $e29 (ite $e47 $e30 (ite $e48 $e32 #b00000000)))) $e49)) (ite (= #b1 (bvand (ite (and $e12 (not $e11)) #b1 #b0) (bvand v0 $e50))) $e49 $e30)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
