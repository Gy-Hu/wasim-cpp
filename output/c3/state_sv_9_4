(define-fun FunNew ((RTL_id_ex_reg_wen (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) RTL_id_ex_reg_wen RTL_id_ex_reg_wen))
#b1
(define-fun FunNew ((RTL_id_ex_rd (_ BitVec 2))) (_ BitVec 2) (ite (= #b1 #b1) RTL_id_ex_rd RTL_id_ex_rd))
(define-fun FunNew ((inst (_ BitVec 2)) ) (_ BitVec 2) ((_ extract 1 0) inst))
(define-fun FunNew ((RTL_id_ex_op (_ BitVec 2))) (_ BitVec 2) (ite (= #b1 #b1) RTL_id_ex_op RTL_id_ex_op))
(define-fun FunNew ((inst (_ BitVec 2)) ) (_ BitVec 2) ((_ extract 7 6) inst))
(define-fun FunNew ((RTL_ex_wb_rd (_ BitVec 2))) (_ BitVec 2) (ite (= #b1 #b1) RTL_ex_wb_rd RTL_ex_wb_rd))
(define-fun FunNew ((inst_id (_ BitVec 2)) ) (_ BitVec 2) ((_ extract 1 0) inst_id))
(define-fun FunNew ((RTL_id_ex_operand1 (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_id_ex_operand1 RTL_id_ex_operand1))
(define-fun FunNew ((oper1 (_ BitVec 8)) (v0 (_ BitVec 8)) (oper2 (_ BitVec 8)) (inst_id (_ BitVec 8)) (s3 (_ BitVec 8)) (s2 (_ BitVec 8)) (s0 (_ BitVec 8)) (reg3 (_ BitVec 8)) (reg2 (_ BitVec 8)) (reg1 (_ BitVec 8)) (ex_val (_ BitVec 8)) (inst (_ BitVec 8)) (s1 (_ BitVec 8)) (op (_ BitVec 8)) (reg0 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 ((_ extract 7 6) inst_id))) (let (($e2 (= #b10 $e1))) (let (($e3 (= #b01 $e1))) (let (($e4 (= #b11 $e1))) (let (($e5 (bvand v0 (bvnot (ite (and (not $e3) (not $e2) (not $e4)) #b1 #b0))))) (let (($e6 ((_ extract 1 0) inst_id))) (let (($e7 (concat #b0000 ((_ extract 5 2) inst_id)))) (let (($e8 ((_ extract 5 4) inst_id))) (let (($e9 (= #b11 $e8))) (let (($e10 (= #b10 $e8))) (let (($e11 (= #b01 $e8))) (let (($e12 (= #b00 $e8))) (let (($e13 (ite $e9 s3 (ite $e10 s2 (ite $e11 s1 (ite $e12 s0 #b00)))))) (let (($e14 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e15 (ite $e2 $e7 (ite (= #b00 $e13) (ite $e9 reg3 (ite $e10 reg2 (ite $e11 reg1 (ite $e12 reg0 #b00000000)))) (ite (= #b01 $e13) ex_val $e14))))) (let (($e16 ((_ extract 3 2) inst_id))) (let (($e17 (= #b11 $e16))) (let (($e18 (= #b10 $e16))) (let (($e19 (= #b01 $e16))) (let (($e20 (= #b00 $e16))) (let (($e21 (ite $e17 s3 (ite $e18 s2 (ite $e19 s1 (ite $e20 s0 #b00)))))) (let (($e22 (ite (= #b00 $e21) (ite $e17 reg3 (ite $e18 reg2 (ite $e19 reg1 (ite $e20 reg0 #b00000000)))) (ite (= #b01 $e21) ex_val $e14)))) (let (($e23 ((_ extract 5 4) inst))) (let (($e24 (= #b11 $e23))) (let (($e25 (= #b10 $e23))) (let (($e26 (= #b01 $e23))) (let (($e27 (= #b00 $e23))) (let (($e28 (ite $e24 (concat (bvand $e5 (ite (= #b11 $e6) #b1 #b0)) (ite (= #b01 s3) #b1 #b0)) (ite $e25 (concat (bvand $e5 (ite (= #b10 $e6) #b1 #b0)) (ite (= #b01 s2) #b1 #b0)) (ite $e26 (concat (bvand $e5 (ite (= #b01 $e6) #b1 #b0)) (ite (= #b01 s1) #b1 #b0)) (ite $e27 (concat (bvand $e5 (ite (= #b00 $e6) #b1 #b0)) (ite (= #b01 s0) #b1 #b0)) #b00)))))) (ite (= #b00 $e28) (ite $e24 reg3 (ite $e25 reg2 (ite $e26 reg1 (ite $e27 reg0 #b00000000)))) (ite (= #b01 $e28) ex_val (ite $e3 (bvadd $e15 $e22) (ite $e2 $e7 (ite $e4 (bvnot (bvand $e15 $e22)) #b00000000))))))))))))))))))))))))))))))))))
(define-fun FunNew ((RTL_registers[3] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[3] RTL_registers[3]))
(define-fun FunNew ((reg3 (_ BitVec 8)) (rd2 (_ BitVec 8)) (ex_val (_ BitVec 8)) (v2 (_ BitVec 8)) (w2 (_ BitVec 8)) ) (_ BitVec 8) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b11 rd2) (not (= #b10 rd2)) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg3))
(define-fun FunNew ((RTL_registers[1] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[1] RTL_registers[1]))
(define-fun FunNew ((rd2 (_ BitVec 8)) (reg1 (_ BitVec 8)) (ex_val (_ BitVec 8)) (v2 (_ BitVec 8)) (w2 (_ BitVec 8)) ) (_ BitVec 8) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b01 rd2) (not (= #b00 rd2))) #b1 #b0))) ex_val reg1))
(define-fun FunNew ((RTL_id_ex_valid (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) RTL_id_ex_valid RTL_id_ex_valid))
(define-fun FunNew ((v0 (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) v0 v0))
(define-fun FunNew ((RTL_registers[2] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[2] RTL_registers[2]))
(define-fun FunNew ((reg2 (_ BitVec 8)) (rd2 (_ BitVec 8)) (ex_val (_ BitVec 8)) (v2 (_ BitVec 8)) (w2 (_ BitVec 8)) ) (_ BitVec 8) (ite (= #b1 (bvand (bvand w2 v2) (ite (and (= #b10 rd2) (not (= #b01 rd2)) (not (= #b00 rd2))) #b1 #b0))) ex_val reg2))
(define-fun FunNew ((RTL_ex_wb_reg_wen (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) RTL_ex_wb_reg_wen RTL_ex_wb_reg_wen))
(define-fun FunNew ((inst_id (_ BitVec 1)) ) (_ BitVec 1) (let (($e1 ((_ extract 7 6) inst_id))) (not (and (not (= #b01 $e1)) (not (= #b10 $e1)) (not (= #b11 $e1))))))
(define-fun FunNew ((RTL_ex_wb_valid (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) RTL_ex_wb_valid RTL_ex_wb_valid))
(define-fun FunNew ((v0 (_ BitVec 1))) (_ BitVec 1) (ite (= #b1 #b1) v0 v0))
(define-fun FunNew ((RTL_id_ex_operand2 (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_id_ex_operand2 RTL_id_ex_operand2))
(define-fun FunNew ((oper1 (_ BitVec 8)) (v0 (_ BitVec 8)) (oper2 (_ BitVec 8)) (inst_id (_ BitVec 8)) (s3 (_ BitVec 8)) (s2 (_ BitVec 8)) (s0 (_ BitVec 8)) (reg3 (_ BitVec 8)) (reg2 (_ BitVec 8)) (reg1 (_ BitVec 8)) (ex_val (_ BitVec 8)) (inst (_ BitVec 8)) (s1 (_ BitVec 8)) (op (_ BitVec 8)) (reg0 (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 ((_ extract 7 6) inst_id))) (let (($e2 (= #b10 $e1))) (let (($e3 (= #b01 $e1))) (let (($e4 (= #b11 $e1))) (let (($e5 (bvand v0 (bvnot (ite (and (not $e3) (not $e2) (not $e4)) #b1 #b0))))) (let (($e6 ((_ extract 1 0) inst_id))) (let (($e7 (concat #b0000 ((_ extract 5 2) inst_id)))) (let (($e8 ((_ extract 5 4) inst_id))) (let (($e9 (= #b11 $e8))) (let (($e10 (= #b10 $e8))) (let (($e11 (= #b01 $e8))) (let (($e12 (= #b00 $e8))) (let (($e13 (ite $e9 s3 (ite $e10 s2 (ite $e11 s1 (ite $e12 s0 #b00)))))) (let (($e14 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e15 (ite $e2 $e7 (ite (= #b00 $e13) (ite $e9 reg3 (ite $e10 reg2 (ite $e11 reg1 (ite $e12 reg0 #b00000000)))) (ite (= #b01 $e13) ex_val $e14))))) (let (($e16 ((_ extract 3 2) inst_id))) (let (($e17 (= #b11 $e16))) (let (($e18 (= #b10 $e16))) (let (($e19 (= #b01 $e16))) (let (($e20 (= #b00 $e16))) (let (($e21 (ite $e17 s3 (ite $e18 s2 (ite $e19 s1 (ite $e20 s0 #b00)))))) (let (($e22 (ite (= #b00 $e21) (ite $e17 reg3 (ite $e18 reg2 (ite $e19 reg1 (ite $e20 reg0 #b00000000)))) (ite (= #b01 $e21) ex_val $e14)))) (let (($e23 ((_ extract 3 2) inst))) (let (($e24 (= #b11 $e23))) (let (($e25 (= #b10 $e23))) (let (($e26 (= #b01 $e23))) (let (($e27 (= #b00 $e23))) (let (($e28 (ite $e24 (concat (bvand $e5 (ite (= #b11 $e6) #b1 #b0)) (ite (= #b01 s3) #b1 #b0)) (ite $e25 (concat (bvand $e5 (ite (= #b10 $e6) #b1 #b0)) (ite (= #b01 s2) #b1 #b0)) (ite $e26 (concat (bvand $e5 (ite (= #b01 $e6) #b1 #b0)) (ite (= #b01 s1) #b1 #b0)) (ite $e27 (concat (bvand $e5 (ite (= #b00 $e6) #b1 #b0)) (ite (= #b01 s0) #b1 #b0)) #b00)))))) (ite (= #b00 $e28) (ite $e24 reg3 (ite $e25 reg2 (ite $e26 reg1 (ite $e27 reg0 #b00000000)))) (ite (= #b01 $e28) ex_val (ite $e3 (bvadd $e15 $e22) (ite $e2 $e7 (ite $e4 (bvnot (bvand $e15 $e22)) #b00000000))))))))))))))))))))))))))))))))))
(define-fun FunNew ((RTL_ex_wb_val (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_ex_wb_val RTL_ex_wb_val))
(define-fun FunNew ((reg0 (_ BitVec 8)) (oper1 (_ BitVec 8)) (op (_ BitVec 8)) (ex_val (_ BitVec 8)) (reg1 (_ BitVec 8)) (reg2 (_ BitVec 8)) (reg3 (_ BitVec 8)) (oper2 (_ BitVec 8)) (s0 (_ BitVec 8)) (s1 (_ BitVec 8)) (s3 (_ BitVec 8)) (s2 (_ BitVec 8)) (inst_id (_ BitVec 8)) ) (_ BitVec 8) (let (($e1 ((_ extract 7 6) inst_id))) (let (($e2 (= #b10 $e1))) (let (($e3 (concat #b0000 ((_ extract 5 2) inst_id)))) (let (($e4 ((_ extract 5 4) inst_id))) (let (($e5 (= #b11 $e4))) (let (($e6 (= #b10 $e4))) (let (($e7 (= #b01 $e4))) (let (($e8 (= #b00 $e4))) (let (($e9 (ite $e5 s3 (ite $e6 s2 (ite $e7 s1 (ite $e8 s0 #b00)))))) (let (($e10 (ite (= #b01 op) (bvadd oper1 oper2) (ite (= #b10 op) oper1 (ite (= #b11 op) (bvnot (bvand oper1 oper2)) #b00000000))))) (let (($e11 (ite $e2 $e3 (ite (= #b00 $e9) (ite $e5 reg3 (ite $e6 reg2 (ite $e7 reg1 (ite $e8 reg0 #b00000000)))) (ite (= #b01 $e9) ex_val $e10))))) (let (($e12 ((_ extract 3 2) inst_id))) (let (($e13 (= #b11 $e12))) (let (($e14 (= #b10 $e12))) (let (($e15 (= #b01 $e12))) (let (($e16 (= #b00 $e12))) (let (($e17 (ite $e13 s3 (ite $e14 s2 (ite $e15 s1 (ite $e16 s0 #b00)))))) (let (($e18 (ite (= #b00 $e17) (ite $e13 reg3 (ite $e14 reg2 (ite $e15 reg1 (ite $e16 reg0 #b00000000)))) (ite (= #b01 $e17) ex_val $e10)))) (ite (= #b01 $e1) (bvadd $e11 $e18) (ite $e2 $e3 (ite (= #b11 $e1) (bvnot (bvand $e11 $e18)) #b00000000))))))))))))))))))))))
(define-fun FunNew ((RTL_registers[0] (_ BitVec 8))) (_ BitVec 8) (ite (= #b1 #b1) RTL_registers[0] RTL_registers[0]))
(define-fun FunNew ((reg0 (_ BitVec 8)) (rd2 (_ BitVec 8)) (ex_val (_ BitVec 8)) (v2 (_ BitVec 8)) (w2 (_ BitVec 8)) ) (_ BitVec 8) (ite (= #b1 (bvand (bvand w2 v2) (ite (= #b00 rd2) #b1 #b0))) ex_val reg0))
