; SMT 2
(set-info :source "Generated by CBMC 5.95.1 (cbmc-5.95.1)")
(set-option :produce-models true)
(set-logic QF_AUFBV)

; find_symbols
(declare-fun |goto_symex::&92;guard#1| () Bool)
; convert
; Converting var_no 0 with expr ID of symbol
(define-fun B0 () Bool |goto_symex::&92;guard#1|)

; convert
; Converting var_no 1 with expr ID of symbol
(define-fun B1 () Bool |goto_symex::&92;guard#1|)

; convert
; Converting var_no 2 with expr ID of not
(define-fun B2 () Bool (not |goto_symex::&92;guard#1|))

; convert
; Converting var_no 3 with expr ID of not
(define-fun B3 () Bool (not |goto_symex::&92;guard#1|))

; convert
; Converting var_no 4 with expr ID of not
(define-fun B4 () Bool (not |goto_symex::&92;guard#1|))

; convert
; Converting var_no 5 with expr ID of not
(define-fun B5 () Bool (not |goto_symex::&92;guard#1|))

; convert
; Converting var_no 6 with expr ID of not
(define-fun B6 () Bool (not |goto_symex::&92;guard#1|))

; convert
; Converting var_no 7 with expr ID of not
(define-fun B7 () Bool (not |goto_symex::&92;guard#1|))

; convert
; Converting var_no 8 with expr ID of not
(define-fun B8 () Bool (not |goto_symex::&92;guard#1|))

; convert
; Converting var_no 9 with expr ID of not
(define-fun B9 () Bool (not |goto_symex::&92;guard#1|))

; convert
; Converting var_no 10 with expr ID of not
(define-fun B10 () Bool (not |goto_symex::&92;guard#1|))

; convert
; Converting var_no 11 with expr ID of not
(define-fun B11 () Bool (not |goto_symex::&92;guard#1|))

; convert
; Converting var_no 12 with expr ID of not
(define-fun B12 () Bool (not |goto_symex::&92;guard#1|))

; convert
; Converting var_no 13 with expr ID of not
(define-fun B13 () Bool (not |goto_symex::&92;guard#1|))

; convert
; Converting var_no 14 with expr ID of not
(define-fun B14 () Bool (not |goto_symex::&92;guard#1|))

; convert
; Converting var_no 15 with expr ID of not
(define-fun B15 () Bool (not |goto_symex::&92;guard#1|))

; convert
; Converting var_no 16 with expr ID of not
(define-fun B16 () Bool (not |goto_symex::&92;guard#1|))

; convert
; Converting var_no 17 with expr ID of not
(define-fun B17 () Bool (not |goto_symex::&92;guard#1|))

; convert
; Converting var_no 18 with expr ID of not
(define-fun B18 () Bool (not |goto_symex::&92;guard#1|))

; convert
; Converting var_no 19 with expr ID of not
(define-fun B19 () Bool (not |goto_symex::&92;guard#1|))

; convert
; Converting var_no 20 with expr ID of not
(define-fun B20 () Bool (not |goto_symex::&92;guard#1|))

; convert
; Converting var_no 21 with expr ID of not
(define-fun B21 () Bool (not |goto_symex::&92;guard#1|))

; convert
; Converting var_no 22 with expr ID of not
(define-fun B22 () Bool (not |goto_symex::&92;guard#1|))

; convert
; Converting var_no 23 with expr ID of not
(define-fun B23 () Bool (not |goto_symex::&92;guard#1|))

; convert
; Converting var_no 24 with expr ID of not
(define-fun B24 () Bool (not |goto_symex::&92;guard#1|))

; convert
; Converting var_no 25 with expr ID of not
(define-fun B25 () Bool (not |goto_symex::&92;guard#1|))

; convert
; Converting var_no 26 with expr ID of not
(define-fun B26 () Bool (not |goto_symex::&92;guard#1|))

; convert
; Converting var_no 27 with expr ID of not
(define-fun B27 () Bool (not |goto_symex::&92;guard#1|))

; convert
; Converting var_no 28 with expr ID of not
(define-fun B28 () Bool (not |goto_symex::&92;guard#1|))

; find_symbols
(declare-fun |goto_symex::&92;guard#2| () Bool)
; convert
; Converting var_no 29 with expr ID of and
(define-fun B29 () Bool (and (not |goto_symex::&92;guard#1|) |goto_symex::&92;guard#2|))

; convert
; Converting var_no 30 with expr ID of not
(define-fun B30 () Bool (not |goto_symex::&92;guard#1|))

; convert
; Converting var_no 31 with expr ID of not
(define-fun B31 () Bool (not |goto_symex::&92;guard#1|))

; convert
; Converting var_no 32 with expr ID of not
(define-fun B32 () Bool (not |goto_symex::&92;guard#1|))

; convert
; Converting var_no 33 with expr ID of not
(define-fun B33 () Bool (not |goto_symex::&92;guard#1|))

; convert
; Converting var_no 34 with expr ID of not
(define-fun B34 () Bool (not |goto_symex::&92;guard#1|))

; set_to true (equal)
(define-fun |__CPROVER_dead_object#1| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |__CPROVER_deallocated#1| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |__CPROVER_max_malloc_size#1| () (_ BitVec 64) (_ bv36028797018963968 64))

; set_to true (equal)
(define-fun |__CPROVER_memory_leak#1| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |__CPROVER_rounding_mode!0#1| () (_ BitVec 32) (_ bv0 32))

; set_to true (equal)
(define-fun |fp_precision#1| () (_ BitVec 32) (_ bv23 32))

; the following is a substitute for an array constructor
(declare-fun array.3 () (Array (_ BitVec 64) (_ BitVec 64)))
(assert (= (select array.3 (_ bv0 64)) (_ bv0 64)))
(assert (= (select array.3 (_ bv1 64)) (_ bv0 64)))
(assert (= (select array.3 (_ bv2 64)) (_ bv0 64)))
(assert (= (select array.3 (_ bv3 64)) (_ bv0 64)))
(assert (= (select array.3 (_ bv4 64)) (_ bv0 64)))
(assert (= (select array.3 (_ bv5 64)) (_ bv0 64)))
(assert (= (select array.3 (_ bv6 64)) (_ bv0 64)))
(assert (= (select array.3 (_ bv7 64)) (_ bv0 64)))
(assert (= (select array.3 (_ bv8 64)) (_ bv0 64)))
(assert (= (select array.3 (_ bv9 64)) (_ bv0 64)))
(assert (= (select array.3 (_ bv10 64)) (_ bv0 64)))
(assert (= (select array.3 (_ bv11 64)) (_ bv0 64)))
(assert (= (select array.3 (_ bv12 64)) (_ bv0 64)))
(assert (= (select array.3 (_ bv13 64)) (_ bv0 64)))
(assert (= (select array.3 (_ bv14 64)) (_ bv0 64)))
(assert (= (select array.3 (_ bv15 64)) (_ bv0 64)))
(assert (= (select array.3 (_ bv16 64)) (_ bv0 64)))
(assert (= (select array.3 (_ bv17 64)) (_ bv0 64)))
(assert (= (select array.3 (_ bv18 64)) (_ bv0 64)))
(assert (= (select array.3 (_ bv19 64)) (_ bv0 64)))
(assert (= (select array.3 (_ bv20 64)) (_ bv0 64)))
(assert (= (select array.3 (_ bv21 64)) (_ bv0 64)))
(assert (= (select array.3 (_ bv22 64)) (_ bv0 64)))
(assert (= (select array.3 (_ bv23 64)) (_ bv0 64)))
; set_to true (equal)
(define-fun |fpadd_count#1| () (Array (_ BitVec 64) (_ BitVec 64)) array.3)

; set_to true (equal)
(define-fun |fpadd_count#1[[0]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpadd_count#1[[1]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpadd_count#1[[2]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpadd_count#1[[3]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpadd_count#1[[4]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpadd_count#1[[5]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpadd_count#1[[6]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpadd_count#1[[7]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpadd_count#1[[8]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpadd_count#1[[9]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpadd_count#1[[A]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpadd_count#1[[B]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpadd_count#1[[C]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpadd_count#1[[D]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpadd_count#1[[E]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpadd_count#1[[F]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpadd_count#1[[10]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpadd_count#1[[11]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpadd_count#1[[12]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpadd_count#1[[13]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpadd_count#1[[14]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpadd_count#1[[15]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpadd_count#1[[16]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpadd_count#1[[17]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpmul_count#1| () (Array (_ BitVec 64) (_ BitVec 64)) array.3)

; set_to true (equal)
(define-fun |fpmul_count#1[[0]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpmul_count#1[[1]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpmul_count#1[[2]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpmul_count#1[[3]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpmul_count#1[[4]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpmul_count#1[[5]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpmul_count#1[[6]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpmul_count#1[[7]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpmul_count#1[[8]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpmul_count#1[[9]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpmul_count#1[[A]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpmul_count#1[[B]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpmul_count#1[[C]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpmul_count#1[[D]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpmul_count#1[[E]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpmul_count#1[[F]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpmul_count#1[[10]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpmul_count#1[[11]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpmul_count#1[[12]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpmul_count#1[[13]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpmul_count#1[[14]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpmul_count#1[[15]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpmul_count#1[[16]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpmul_count#1[[17]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpsub_count#1| () (Array (_ BitVec 64) (_ BitVec 64)) array.3)

; set_to true (equal)
(define-fun |fpsub_count#1[[0]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpsub_count#1[[1]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpsub_count#1[[2]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpsub_count#1[[3]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpsub_count#1[[4]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpsub_count#1[[5]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpsub_count#1[[6]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpsub_count#1[[7]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpsub_count#1[[8]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpsub_count#1[[9]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpsub_count#1[[A]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpsub_count#1[[B]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpsub_count#1[[C]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpsub_count#1[[D]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpsub_count#1[[E]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpsub_count#1[[F]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpsub_count#1[[10]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpsub_count#1[[11]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpsub_count#1[[12]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpsub_count#1[[13]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpsub_count#1[[14]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpsub_count#1[[15]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpsub_count#1[[16]]| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |fpsub_count#1[[17]]| () (_ BitVec 64) (_ bv0 64))

; find_symbols
(declare-fun |nondet_symex::nondet0| () (_ BitVec 32))
; set_to true (equal)
(define-fun |__CPROVER__start::a!0@1#2| () (_ BitVec 32) |nondet_symex::nondet0|)

; find_symbols
(declare-fun |nondet_symex::nondet1| () (_ BitVec 32))
; set_to true (equal)
(define-fun |__CPROVER__start::b!0@1#2| () (_ BitVec 32) |nondet_symex::nondet1|)

; set_to true (equal)
(define-fun |__mulsf3::a!0@1#1| () (_ BitVec 32) |__CPROVER__start::a!0@1#2|)

; set_to true (equal)
(define-fun |__mulsf3::b!0@1#1| () (_ BitVec 32) |__CPROVER__start::b!0@1#2|)

; this is a model for typecast : f32_23 -> B32
(define-fun float_bv.typecast_f32_23->B32 ((op0 (_ BitVec 32))) (_ BitVec 32) ((_ extract 31 0) op0))
; set_to true (equal)
(define-fun |__mulsf3::1::af!0@1#2| () (_ BitVec 32) ((_ extract 31 0) |__mulsf3::a!0@1#1|))

; set_to true (equal)
(define-fun |__mulsf3::1::af!0@1#2..f| () (_ BitVec 32) |__mulsf3::a!0@1#1|)

; set_to true (equal)
(define-fun |__mulsf3::1::af!0@1#2..i| () (_ BitVec 32) ((_ extract 31 0) |__mulsf3::a!0@1#1|))

; set_to true (equal)
(define-fun |__mulsf3::1::bf!0@1#2| () (_ BitVec 32) ((_ extract 31 0) |__mulsf3::b!0@1#1|))

; set_to true (equal)
(define-fun |__mulsf3::1::bf!0@1#2..f| () (_ BitVec 32) |__mulsf3::b!0@1#1|)

; set_to true (equal)
(define-fun |__mulsf3::1::bf!0@1#2..i| () (_ BitVec 32) ((_ extract 31 0) |__mulsf3::b!0@1#1|))

; set_to true (equal)
(define-fun |mulsf3_classical::a1!0@1#1| () (_ BitVec 64) ((_ sign_extend 32) |__mulsf3::1::af!0@1#2..i|))

; set_to true (equal)
(define-fun |mulsf3_classical::a2!0@1#1| () (_ BitVec 64) ((_ sign_extend 32) |__mulsf3::1::bf!0@1#2..i|))

; set_to true (equal)
(define-fun |fpmul_count#2[[17]]| () (_ BitVec 64) (_ bv1 64))

; set_to true (equal)
(define-fun |mulsf3_classical::1::sign!0@1#2| () (_ BitVec 32) (bvand (bvxor ((_ extract 31 0) (bvlshr |mulsf3_classical::a1!0@1#1| ((_ zero_extend 32) (_ bv16 32)))) ((_ extract 31 0) (bvlshr |mulsf3_classical::a2!0@1#1| ((_ zero_extend 32) (_ bv16 32))))) (_ bv32768 32)))

; set_to true (equal)
(define-fun |mulsf3_classical::1::exp!0@1#2| () (_ BitVec 32) (bvand (_ bv32640 32) ((_ extract 31 0) (bvlshr |mulsf3_classical::a1!0@1#1| ((_ zero_extend 32) (_ bv16 32))))))

; set_to true (equal)
(define-fun |mulsf3_classical::1::tmp!0@1#2| () (_ BitVec 32) (bvand (_ bv32640 32) ((_ extract 31 0) (bvlshr |mulsf3_classical::a2!0@1#1| ((_ zero_extend 32) (_ bv16 32))))))

; set_to true
(assert (= |goto_symex::&92;guard#1| (not (and (not (= |mulsf3_classical::a1!0@1#1| (_ bv0 64))) (not (= |mulsf3_classical::a2!0@1#1| (_ bv0 64)))))))

; set_to true (equal)
(define-fun |goto_symex::return_value::mulsf3_classical!0#1| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |mulsf3_classical::a1!0@1#2| () (_ BitVec 64) (bvor (bvand |mulsf3_classical::a1!0@1#1| (_ bv8388607 64)) (_ bv8388608 64)))

; set_to true (equal)
(define-fun |mulsf3_classical::a2!0@1#2| () (_ BitVec 64) (bvor (bvand |mulsf3_classical::a2!0@1#1| (_ bv8388607 64)) (_ bv8388608 64)))

; set_to true (equal)
(define-fun |mulsf3_classical::1::exp!0@1#3| () (_ BitVec 32) (bvadd |mulsf3_classical::1::exp!0@1#2| (_ bv4294951168 32)))

; set_to true (equal)
(define-fun |mulsf3_classical::1::exp!0@1#4| () (_ BitVec 32) (bvadd |mulsf3_classical::1::exp!0@1#3| |mulsf3_classical::1::tmp!0@1#2|))

; set_to true (equal)
(define-fun |fpmulparts::a1!0@1#1| () (_ BitVec 64) |mulsf3_classical::a1!0@1#2|)

; set_to true (equal)
(define-fun |fpmulparts::a2!0@1#1| () (_ BitVec 64) |mulsf3_classical::a2!0@1#2|)

; set_to true (equal)
(define-fun |fpmulparts::1::mult!0@1#2| () (_ BitVec 64) |fpmulparts::a2!0@1#1|)

; set_to true (equal)
(define-fun |fpmulparts::1::total!0@1#2| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |goto_symex::return_value::fpGetPrecision!0#1| () (_ BitVec 32) (_ bv23 32))

; set_to true (equal)
(define-fun |fpmulparts::1::precision!0@1#2| () (_ BitVec 32) (_ bv23 32))

; set_to true (equal)
(define-fun |fpmulparts::1::diff!0@1#2| () (_ BitVec 32) (_ bv1 32))

; set_to true (equal)
(define-fun |fpmulparts::1::mult!0@1#3| () (_ BitVec 64) (bvshl |fpmulparts::1::mult!0@1#2| ((_ zero_extend 32) (_ bv1 32))))

; set_to true (equal)
(define-fun |fpmulparts::a1!0@1#2| () (_ BitVec 64) (bvlshr |fpmulparts::a1!0@1#1| ((_ zero_extend 32) (_ bv1 32))))

; set_to true (equal)
(define-fun |fpmulparts::1::bit!0@1#2| () (_ BitVec 32) (_ bv1 32))

; set_to true
(assert (= |goto_symex::&92;guard#2| (not (= (bvand |fpmulparts::a1!0@1#2| (_ bv1 64)) (_ bv0 64)))))

; set_to true (equal)
(define-fun |fpmulparts::1::total!0@1#3| () (_ BitVec 64) |fpmulparts::1::mult!0@1#3|)

; set_to true (equal)
(define-fun |fpmulparts::1::total!0@1#4| () (_ BitVec 64) (ite (and (not |goto_symex::&92;guard#1|) (not |goto_symex::&92;guard#2|)) (_ bv0 64) |fpmulparts::1::total!0@1#3|))

; set_to true (equal)
(define-fun |fpmulparts::1::mult!0@1#4| () (_ BitVec 64) (bvshl |fpmulparts::1::mult!0@1#3| ((_ zero_extend 32) (_ bv1 32))))

; set_to true (equal)
(define-fun |fpmulparts::a1!0@1#3| () (_ BitVec 64) (bvlshr |fpmulparts::a1!0@1#2| ((_ zero_extend 32) (_ bv1 32))))

; set_to true (equal)
(define-fun |fpmulparts::1::bit!0@1#3| () (_ BitVec 32) (_ bv2 32))

; find_symbols
(declare-fun |__CPROVER__start::a!0@1#1| () (_ BitVec 32))
; convert
; Converting var_no 35 with expr ID of =
(define-fun B35 () Bool (= |__CPROVER__start::a!0@1#1| |__CPROVER__start::a!0@1#1|))

; convert
; Converting var_no 36 with expr ID of =
(define-fun B36 () Bool (= |__CPROVER__start::a!0@1#1| |__CPROVER__start::a!0@1#1|))

; find_symbols
(declare-fun |__CPROVER__start::b!0@1#1| () (_ BitVec 32))
; convert
; Converting var_no 37 with expr ID of =
(define-fun B37 () Bool (= |__CPROVER__start::b!0@1#1| |__CPROVER__start::b!0@1#1|))

; convert
; Converting var_no 38 with expr ID of =
(define-fun B38 () Bool (= |__CPROVER__start::b!0@1#1| |__CPROVER__start::b!0@1#1|))

; find_symbols
(declare-fun |__mulsf3::1::af!0@1#1| () (_ BitVec 32))
; convert
; Converting var_no 39 with expr ID of =
(define-fun B39 () Bool (= |__mulsf3::1::af!0@1#1| |__mulsf3::1::af!0@1#1|))

; convert
; Converting var_no 40 with expr ID of =
(define-fun B40 () Bool (= |__mulsf3::1::af!0@1#1| |__mulsf3::1::af!0@1#1|))

; find_symbols
(declare-fun |__mulsf3::1::bf!0@1#1| () (_ BitVec 32))
; convert
; Converting var_no 41 with expr ID of =
(define-fun B41 () Bool (= |__mulsf3::1::bf!0@1#1| |__mulsf3::1::bf!0@1#1|))

; convert
; Converting var_no 42 with expr ID of =
(define-fun B42 () Bool (= |__mulsf3::1::bf!0@1#1| |__mulsf3::1::bf!0@1#1|))

; find_symbols
(declare-fun |__mulsf3::1::cf!0@1#1| () (_ BitVec 32))
; convert
; Converting var_no 43 with expr ID of =
(define-fun B43 () Bool (= |__mulsf3::1::cf!0@1#1| |__mulsf3::1::cf!0@1#1|))

; convert
; Converting var_no 44 with expr ID of =
(define-fun B44 () Bool (= |__mulsf3::1::cf!0@1#1| |__mulsf3::1::cf!0@1#1|))

; find_symbols
(declare-fun |__mulsf3::$tmp::return_value_mulsf3_classical!0@1#1| () (_ BitVec 64))
; convert
; Converting var_no 45 with expr ID of =
(define-fun B45 () Bool (= |__mulsf3::$tmp::return_value_mulsf3_classical!0@1#1| |__mulsf3::$tmp::return_value_mulsf3_classical!0@1#1|))

; convert
; Converting var_no 46 with expr ID of =
(define-fun B46 () Bool (= |__mulsf3::$tmp::return_value_mulsf3_classical!0@1#1| |__mulsf3::$tmp::return_value_mulsf3_classical!0@1#1|))

; find_symbols
(declare-fun |mulsf3_classical::1::result!0@1#1| () (_ BitVec 64))
; convert
; Converting var_no 47 with expr ID of =
(define-fun B47 () Bool (= |mulsf3_classical::1::result!0@1#1| |mulsf3_classical::1::result!0@1#1|))

; convert
; Converting var_no 48 with expr ID of =
(define-fun B48 () Bool (= |mulsf3_classical::1::result!0@1#1| |mulsf3_classical::1::result!0@1#1|))

; find_symbols
(declare-fun |mulsf3_classical::1::sign!0@1#1| () (_ BitVec 32))
; convert
; Converting var_no 49 with expr ID of =
(define-fun B49 () Bool (= |mulsf3_classical::1::sign!0@1#1| |mulsf3_classical::1::sign!0@1#1|))

; convert
; Converting var_no 50 with expr ID of =
(define-fun B50 () Bool (= |mulsf3_classical::1::sign!0@1#1| |mulsf3_classical::1::sign!0@1#1|))

; find_symbols
(declare-fun |mulsf3_classical::1::exp!0@1#1| () (_ BitVec 32))
; convert
; Converting var_no 51 with expr ID of =
(define-fun B51 () Bool (= |mulsf3_classical::1::exp!0@1#1| |mulsf3_classical::1::exp!0@1#1|))

; convert
; Converting var_no 52 with expr ID of =
(define-fun B52 () Bool (= |mulsf3_classical::1::exp!0@1#1| |mulsf3_classical::1::exp!0@1#1|))

; find_symbols
(declare-fun |mulsf3_classical::1::tmp!0@1#1| () (_ BitVec 32))
; convert
; Converting var_no 53 with expr ID of =
(define-fun B53 () Bool (= |mulsf3_classical::1::tmp!0@1#1| |mulsf3_classical::1::tmp!0@1#1|))

; convert
; Converting var_no 54 with expr ID of =
(define-fun B54 () Bool (= |mulsf3_classical::1::tmp!0@1#1| |mulsf3_classical::1::tmp!0@1#1|))

; find_symbols
(declare-fun |fpmulparts::1::mult!0@1#1| () (_ BitVec 64))
; convert
; Converting var_no 55 with expr ID of =
(define-fun B55 () Bool (= |fpmulparts::1::mult!0@1#1| |fpmulparts::1::mult!0@1#1|))

; convert
; Converting var_no 56 with expr ID of =
(define-fun B56 () Bool (= |fpmulparts::1::mult!0@1#1| |fpmulparts::1::mult!0@1#1|))

; find_symbols
(declare-fun |fpmulparts::1::total!0@1#1| () (_ BitVec 64))
; convert
; Converting var_no 57 with expr ID of =
(define-fun B57 () Bool (= |fpmulparts::1::total!0@1#1| |fpmulparts::1::total!0@1#1|))

; convert
; Converting var_no 58 with expr ID of =
(define-fun B58 () Bool (= |fpmulparts::1::total!0@1#1| |fpmulparts::1::total!0@1#1|))

; find_symbols
(declare-fun |fpmulparts::1::ret!0@1#1| () (_ BitVec 64))
; convert
; Converting var_no 59 with expr ID of =
(define-fun B59 () Bool (= |fpmulparts::1::ret!0@1#1| |fpmulparts::1::ret!0@1#1|))

; convert
; Converting var_no 60 with expr ID of =
(define-fun B60 () Bool (= |fpmulparts::1::ret!0@1#1| |fpmulparts::1::ret!0@1#1|))

; find_symbols
(declare-fun |fpmulparts::1::bit!0@1#1| () (_ BitVec 32))
; convert
; Converting var_no 61 with expr ID of =
(define-fun B61 () Bool (= |fpmulparts::1::bit!0@1#1| |fpmulparts::1::bit!0@1#1|))

; convert
; Converting var_no 62 with expr ID of =
(define-fun B62 () Bool (= |fpmulparts::1::bit!0@1#1| |fpmulparts::1::bit!0@1#1|))

; find_symbols
(declare-fun |fpmulparts::1::diff!0@1#1| () (_ BitVec 32))
; convert
; Converting var_no 63 with expr ID of =
(define-fun B63 () Bool (= |fpmulparts::1::diff!0@1#1| |fpmulparts::1::diff!0@1#1|))

; convert
; Converting var_no 64 with expr ID of =
(define-fun B64 () Bool (= |fpmulparts::1::diff!0@1#1| |fpmulparts::1::diff!0@1#1|))

; find_symbols
(declare-fun |fpmulparts::1::precision!0@1#1| () (_ BitVec 32))
; convert
; Converting var_no 65 with expr ID of =
(define-fun B65 () Bool (= |fpmulparts::1::precision!0@1#1| |fpmulparts::1::precision!0@1#1|))

; convert
; Converting var_no 66 with expr ID of =
(define-fun B66 () Bool (= |fpmulparts::1::precision!0@1#1| |fpmulparts::1::precision!0@1#1|))

; convert
; Converting var_no 67 with expr ID of and
(define-fun B67 () Bool (and (not (= |mulsf3_classical::a1!0@1#1| (_ bv0 64))) (not (= |mulsf3_classical::a2!0@1#1| (_ bv0 64)))))

; convert
; Converting var_no 68 with expr ID of =
(define-fun B68 () Bool (= (bvand |fpmulparts::a1!0@1#2| (_ bv1 64)) (_ bv0 64)))

; find_symbols
(declare-fun |symex::args::0| () (_ BitVec 32))
; set_to true
(assert (= |__CPROVER__start::a!0@1#2| |symex::args::0|))

; find_symbols
(declare-fun |symex::args::1| () (_ BitVec 32))
; set_to true
(assert (= |__CPROVER__start::b!0@1#2| |symex::args::1|))

; find_symbols
(declare-fun |symex::args::2| () (_ BitVec 64))
; set_to true
(assert (= ((_ sign_extend 32) |__mulsf3::1::af!0@1#2..i|) |symex::args::2|))

; find_symbols
(declare-fun |symex::args::3| () (_ BitVec 64))
; set_to true
(assert (= ((_ sign_extend 32) |__mulsf3::1::bf!0@1#2..i|) |symex::args::3|))

; find_symbols
(declare-fun |symex::args::4| () (_ BitVec 64))
; set_to true
(assert (= |mulsf3_classical::a1!0@1#2| |symex::args::4|))

; find_symbols
(declare-fun |symex::args::5| () (_ BitVec 64))
; set_to true
(assert (= |mulsf3_classical::a2!0@1#2| |symex::args::5|))

; find_symbols
(declare-fun |symex::io::0| () (_ BitVec 32))
; set_to true
(assert (= |__CPROVER__start::a!0@1#2| |symex::io::0|))

; find_symbols
(declare-fun |symex::io::1| () (_ BitVec 32))
; set_to true
(assert (= |__CPROVER__start::b!0@1#2| |symex::io::1|))

; set_to false
(assert (not B1))

; convert
; Converting var_no 69 with expr ID of not
(define-fun B69 () Bool (not false))

; set_to true
(assert B69)

(exit)
; end of SMT2 file
