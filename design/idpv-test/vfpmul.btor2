; BTOR description generated by Yosys 0.37+34 (git sha1 80511ced7, clang 14.0.0-1ubuntu1.1 -fPIC -Os) for module pipe_float_mul.
1 sort bitvec 32
2 input 1 flout_b ; floatmul.v:17.17-17.24
3 input 1 flout_a ; floatmul.v:16.17-16.24
4 sort bitvec 1
5 input 4 round_cfg ; floatmul.v:15.17-15.26
6 input 4 rst_n ; floatmul.v:14.17-14.22
7 input 4 en ; floatmul.v:13.17-13.19
8 input 4 clk ; floatmul.v:12.17-12.20
9 sort bitvec 2
10 state 9 abcd:88:sample_data$\two_f_reg#sampled$142
11 const 9 00
12 state 9 abcd:88:sample_data$$procmux$34_Y#sampled$144
13 init 9 12 11
14 const 4 1
15 state 4 abcd:74:sample_control_edge$\clk#sampled$146
16 init 4 15 14
17 concat 9 15 8
18 const 9 01
19 eq 4 17 18 abcd:80:sample_control_edge$148
20 ite 9 19 12 10 abcd:110:mux$150
21 const 4 0
22 state 4 abcd:62:sample_control$$auto$rtlil.cc:2461:Not$153#sampled$154
23 init 4 22 21
24 ite 9 22 11 20 abcd:110:mux$156
25 not 4 6 abcd:58:sample_control$152
26 ite 9 25 11 24 abcd:110:mux$158
27 output 26 overflow ; floatmul.v:19.21-19.29
28 sort bitvec 23
29 state 28 abcd:88:sample_data$\two_m_reg#sampled$208
30 const 28 00000000000000000000000
31 state 28 abcd:88:sample_data$$procmux$37_Y#sampled$210
32 init 28 31 30
33 state 4 abcd:74:sample_control_edge$\clk#sampled$212
34 init 4 33 14
35 concat 9 33 8
36 eq 4 35 18 abcd:80:sample_control_edge$214
37 ite 28 36 31 29 abcd:110:mux$216
38 state 4 abcd:62:sample_control$$auto$rtlil.cc:2461:Not$219#sampled$220
39 init 4 38 21
40 ite 28 38 30 37 abcd:110:mux$222
41 not 4 6 abcd:58:sample_control$218
42 ite 28 41 30 40 abcd:110:mux$224
43 sort bitvec 8
44 state 43 abcd:88:sample_data$\two_e_reg#sampled$190
45 const 43 00000000
46 state 43 abcd:88:sample_data$$procmux$40_Y#sampled$192
47 init 43 46 45
48 state 4 abcd:74:sample_control_edge$\clk#sampled$194
49 init 4 48 14
50 concat 9 48 8
51 eq 4 50 18 abcd:80:sample_control_edge$196
52 ite 43 51 46 44 abcd:110:mux$198
53 state 4 abcd:62:sample_control$$auto$rtlil.cc:2461:Not$201#sampled$202
54 init 4 53 21
55 ite 43 53 45 52 abcd:110:mux$204
56 not 4 6 abcd:58:sample_control$200
57 ite 43 56 45 55 abcd:110:mux$206
58 state 4 abcd:88:sample_data$\two_s_reg#sampled$160
59 state 4 abcd:88:sample_data$$procmux$43_Y#sampled$162
60 init 4 59 21
61 state 4 abcd:74:sample_control_edge$\clk#sampled$164
62 init 4 61 14
63 concat 9 61 8
64 eq 4 63 18 abcd:80:sample_control_edge$166
65 ite 4 64 59 58 abcd:110:mux$168
66 state 4 abcd:62:sample_control$$auto$rtlil.cc:2461:Not$171#sampled$172
67 init 4 66 21
68 ite 4 66 21 65 abcd:110:mux$174
69 not 4 6 abcd:58:sample_control$170
70 ite 4 69 21 68 abcd:110:mux$176
71 sort bitvec 31
72 concat 71 57 42
73 concat 1 70 72
74 output 73 flout_c ; floatmul.v:18.21-18.28
75 uext 28 42 0 two_m_reg ; floatmul.v:49.13-49.22
76 uext 43 57 0 two_e_reg ; floatmul.v:48.13-48.22
77 uext 9 26 0 two_f_reg ; floatmul.v:47.13-47.22
78 uext 4 70 0 two_s_reg ; floatmul.v:46.13-46.22
79 sort bitvec 48
80 state 79 abcd:88:sample_data$\one_m_reg#sampled$280
81 const 79 000000000000000000000000000000000000000000000000
82 state 79 abcd:88:sample_data$$procmux$106_Y#sampled$282
83 init 79 82 81
84 state 4 abcd:74:sample_control_edge$\clk#sampled$284
85 init 4 84 14
86 concat 9 84 8
87 eq 4 86 18 abcd:80:sample_control_edge$286
88 ite 79 87 82 80 abcd:110:mux$288
89 state 4 abcd:62:sample_control$$auto$rtlil.cc:2461:Not$291#sampled$292
90 init 4 89 21
91 ite 79 89 81 88 abcd:110:mux$294
92 not 4 6 abcd:58:sample_control$290
93 ite 79 92 81 91 abcd:110:mux$296
94 sort bitvec 47
95 slice 94 93 47 1
96 concat 79 21 95
97 slice 4 93 47 47
98 ite 79 97 96 93 $procmux$73 ; floatmul.v:131.7-131.25|floatmul.v:131.3-138.8
99 slice 28 98 45 23
100 input 28
101 uext 28 14 22
102 add 28 99 101 $add$floatmul.v:141$22 ; floatmul.v:141.26-141.49
103 slice 4 98 22 22
104 ite 28 103 102 99 $procmux$59 ; floatmul.v:140.10-140.28|floatmul.v:140.6-143.43
105 ite 28 5 104 100 $procmux$61 ; floatmul.v:139.9-139.23|floatmul.v:139.5-146.45
106 input 28
107 redor 4 93
108 not 4 107 $eq$floatmul.v:126$17 ; floatmul.v:126.8-126.26
109 ite 28 108 106 105 $procmux$64 ; floatmul.v:126.8-126.26|floatmul.v:126.4-147.7
110 ite 28 5 109 99 $procmux$67 ; floatmul.v:139.9-139.23|floatmul.v:139.5-146.45
111 input 28
112 ite 28 108 111 110 $procmux$70 ; floatmul.v:126.8-126.26|floatmul.v:126.4-147.7
113 ite 28 108 30 112 $procmux$88 ; floatmul.v:126.8-126.26|floatmul.v:126.4-147.7
114 uext 28 113 0 two_m_out ; floatmul.v:43.13-43.22
115 input 43
116 sort bitvec 10
117 state 116 abcd:88:sample_data$\one_e_reg#sampled$244
118 const 116 0000000000
119 state 116 abcd:88:sample_data$$add$floatmul.v:107$13_Y#sampled$246
120 init 116 119 118
121 state 4 abcd:74:sample_control_edge$\clk#sampled$248
122 init 4 121 14
123 concat 9 121 8
124 eq 4 123 18 abcd:80:sample_control_edge$250
125 ite 116 124 119 117 abcd:110:mux$252
126 state 4 abcd:62:sample_control$$auto$rtlil.cc:2461:Not$255#sampled$256
127 init 4 126 21
128 ite 116 126 118 125 abcd:110:mux$258
129 not 4 6 abcd:58:sample_control$254
130 ite 116 129 118 128 abcd:110:mux$260
131 ite 4 97 14 21 $procmux$79 ; floatmul.v:131.7-131.25|floatmul.v:131.3-138.8
132 input 4
133 ite 4 108 132 131 $procmux$82 ; floatmul.v:126.8-126.26|floatmul.v:126.4-147.7
134 ite 4 108 21 133 $procmux$85 ; floatmul.v:126.8-126.26|floatmul.v:126.4-147.7
135 uext 116 134 9
136 add 116 130 135 $add$floatmul.v:149$23 ; floatmul.v:149.12-149.30
137 uext 116 14 9
138 add 116 136 137 $add$floatmul.v:149$24 ; floatmul.v:149.12-149.37
139 sort bitvec 7
140 slice 139 138 6 0
141 concat 43 14 140
142 slice 4 138 7 7
143 not 4 142 $procmux$46_CMP0 ; floatmul.v:0.0-0.0|floatmul.v:157.4-160.11
144 ite 43 143 141 115
145 slice 139 138 6 0
146 concat 43 21 145
147 ite 43 142 146 144 $procmux$45 ; floatmul.v:0.0-0.0|floatmul.v:157.4-160.11
148 uext 43 147 0 two_e_out ; floatmul.v:42.13-42.22
149 const 9 10
150 slice 9 138 9 8
151 eq 4 150 149 $eq$floatmul.v:152$26 ; floatmul.v:152.13-152.32
152 ite 9 151 149 11 $procmux$49 ; floatmul.v:152.13-152.32|floatmul.v:152.9-155.24
153 input 9
154 eq 4 150 18 $eq$floatmul.v:150$25 ; floatmul.v:150.6-150.25
155 ite 9 154 153 152 $procmux$52 ; floatmul.v:150.6-150.25|floatmul.v:150.2-155.24
156 ite 9 154 18 155 $procmux$55 ; floatmul.v:150.6-150.25|floatmul.v:150.2-155.24
157 uext 9 156 0 two_f_out ; floatmul.v:41.13-41.22
158 uext 79 93 0 one_m_reg ; floatmul.v:37.13-37.22
159 uext 116 130 0 one_e_reg ; floatmul.v:36.13-36.22
160 state 4 abcd:88:sample_data$\one_s_reg#sampled$226
161 state 4 abcd:88:sample_data$$xor$floatmul.v:81$5_Y#sampled$228
162 init 4 161 21
163 state 4 abcd:74:sample_control_edge$\clk#sampled$230
164 init 4 163 14
165 concat 9 163 8
166 eq 4 165 18 abcd:80:sample_control_edge$232
167 ite 4 166 161 160 abcd:110:mux$234
168 state 4 abcd:62:sample_control$$auto$rtlil.cc:2461:Not$237#sampled$238
169 init 4 168 21
170 ite 4 168 21 167 abcd:110:mux$240
171 not 4 6 abcd:58:sample_control$236
172 ite 4 171 21 170 abcd:110:mux$242
173 uext 4 172 0 one_s_reg ; floatmul.v:35.13-35.22
174 sort bitvec 24
175 state 174 abcd:88:sample_data$\man1#sampled$370
176 const 174 000000000000000000000000
177 state 174 abcd:88:sample_data$$procmux$114_Y#sampled$372
178 init 174 177 176
179 state 4 abcd:74:sample_control_edge$\clk#sampled$374
180 init 4 179 14
181 concat 9 179 8
182 eq 4 181 18 abcd:80:sample_control_edge$376
183 ite 174 182 177 175 abcd:110:mux$378
184 const 174 100000000000000000000000
185 state 4 abcd:62:sample_control$$auto$rtlil.cc:2461:Not$381#sampled$382
186 init 4 185 21
187 ite 174 185 184 183 abcd:110:mux$384
188 not 4 6 abcd:58:sample_control$380
189 ite 174 188 184 187 abcd:110:mux$386
190 uext 79 189 24
191 state 174 abcd:88:sample_data$\man2#sampled$316
192 state 174 abcd:88:sample_data$$procmux$108_Y#sampled$318
193 init 174 192 176
194 state 4 abcd:74:sample_control_edge$\clk#sampled$320
195 init 4 194 14
196 concat 9 194 8
197 eq 4 196 18 abcd:80:sample_control_edge$322
198 ite 174 197 192 191 abcd:110:mux$324
199 state 4 abcd:62:sample_control$$auto$rtlil.cc:2461:Not$327#sampled$328
200 init 4 199 21
201 ite 174 199 184 198 abcd:110:mux$330
202 not 4 6 abcd:58:sample_control$326
203 ite 174 202 184 201 abcd:110:mux$332
204 uext 79 203 24
205 mul 79 190 204 $mul$floatmul.v:90$9 ; floatmul.v:90.17-90.28
206 eq 4 203 184 $eq$floatmul.v:87$8 ; floatmul.v:87.11-87.48
207 ite 79 206 81 205 $procmux$100 ; floatmul.v:87.11-87.48|floatmul.v:87.7-90.29
208 input 79
209 eq 4 189 184 $eq$floatmul.v:85$7 ; floatmul.v:85.8-85.45
210 ite 79 209 208 207 $procmux$103 ; floatmul.v:85.8-85.45|floatmul.v:85.4-90.29
211 ite 79 209 81 210 $procmux$106 ; floatmul.v:85.8-85.45|floatmul.v:85.4-90.29
212 uext 79 211 0 one_m_out ; floatmul.v:32.15-32.24
213 state 43 abcd:88:sample_data$\exp1#sampled$352
214 state 43 abcd:88:sample_data$$procmux$116_Y#sampled$354
215 init 43 214 45
216 state 4 abcd:74:sample_control_edge$\clk#sampled$356
217 init 4 216 14
218 concat 9 216 8
219 eq 4 218 18 abcd:80:sample_control_edge$358
220 ite 43 219 214 213 abcd:110:mux$360
221 state 4 abcd:62:sample_control$$auto$rtlil.cc:2461:Not$363#sampled$364
222 init 4 221 21
223 ite 43 221 45 220 abcd:110:mux$366
224 not 4 6 abcd:58:sample_control$362
225 ite 43 224 45 223 abcd:110:mux$368
226 sort bitvec 3
227 const 226 111
228 slice 139 225 6 0
229 concat 116 227 228
230 const 226 000
231 slice 139 225 6 0
232 concat 116 230 231
233 slice 4 225 7 7
234 ite 116 233 232 229 $procmux$97 ; floatmul.v:96.8-96.20|floatmul.v:96.4-99.38
235 state 43 abcd:88:sample_data$\exp2#sampled$298
236 state 43 abcd:88:sample_data$$procmux$110_Y#sampled$300
237 init 43 236 45
238 state 4 abcd:74:sample_control_edge$\clk#sampled$302
239 init 4 238 14
240 concat 9 238 8
241 eq 4 240 18 abcd:80:sample_control_edge$304
242 ite 43 241 236 235 abcd:110:mux$306
243 state 4 abcd:62:sample_control$$auto$rtlil.cc:2461:Not$309#sampled$310
244 init 4 243 21
245 ite 43 243 45 242 abcd:110:mux$312
246 not 4 6 abcd:58:sample_control$308
247 ite 43 246 45 245 abcd:110:mux$314
248 slice 139 247 6 0
249 concat 116 227 248
250 slice 139 247 6 0
251 concat 116 230 250
252 slice 4 247 7 7
253 ite 116 252 251 249 $procmux$94 ; floatmul.v:100.8-100.20|floatmul.v:100.4-103.38
254 add 116 234 253 $add$floatmul.v:107$13 ; floatmul.v:107.25-107.48
255 uext 116 254 0 one_e_out ; floatmul.v:31.15-31.24
256 state 4 abcd:88:sample_data$\s1#sampled$334
257 state 4 abcd:88:sample_data$$procmux$118_Y#sampled$336
258 init 4 257 21
259 state 4 abcd:74:sample_control_edge$\clk#sampled$338
260 init 4 259 14
261 concat 9 259 8
262 eq 4 261 18 abcd:80:sample_control_edge$340
263 ite 4 262 257 256 abcd:110:mux$342
264 state 4 abcd:62:sample_control$$auto$rtlil.cc:2461:Not$345#sampled$346
265 init 4 264 21
266 ite 4 264 21 263 abcd:110:mux$348
267 not 4 6 abcd:58:sample_control$344
268 ite 4 267 21 266 abcd:110:mux$350
269 state 4 abcd:88:sample_data$\s2#sampled$262
270 state 4 abcd:88:sample_data$$procmux$112_Y#sampled$264
271 init 4 270 21
272 state 4 abcd:74:sample_control_edge$\clk#sampled$266
273 init 4 272 14
274 concat 9 272 8
275 eq 4 274 18 abcd:80:sample_control_edge$268
276 ite 4 275 270 269 abcd:110:mux$270
277 state 4 abcd:62:sample_control$$auto$rtlil.cc:2461:Not$273#sampled$274
278 init 4 277 21
279 ite 4 277 21 276 abcd:110:mux$276
280 not 4 6 abcd:58:sample_control$272
281 ite 4 280 21 279 abcd:110:mux$278
282 xor 4 268 281 $xor$floatmul.v:81$5 ; floatmul.v:81.20-81.27
283 uext 4 282 0 one_s_out ; floatmul.v:30.15-30.24
284 state 79 abcd:88:sample_data$\mul_out_p#sampled$178
285 state 79 abcd:88:sample_data$$procmux$91_Y#sampled$184
286 init 79 285 81
287 state 4 abcd:62:sample_control$$auto$rtlil.cc:2461:Not$181#sampled$182
288 init 4 287 21
289 ite 79 287 285 284 abcd:110:mux$186
290 not 4 108 abcd:58:sample_control$180
291 ite 79 290 98 289 abcd:110:mux$188
292 uext 79 291 0 mul_out_p ; floatmul.v:26.17-26.26
293 uext 116 138 0 temp3 ; floatmul.v:25.31-25.36
294 uext 116 253 0 temp2 ; floatmul.v:25.24-25.29
295 uext 116 234 0 temp1 ; floatmul.v:25.17-25.22
296 uext 4 134 0 n ; floatmul.v:24.17-24.18
297 uext 174 203 0 man2 ; floatmul.v:23.23-23.27
298 uext 174 189 0 man1 ; floatmul.v:23.17-23.21
299 uext 43 247 0 exp2 ; floatmul.v:22.23-22.27
300 uext 43 225 0 exp1 ; floatmul.v:22.17-22.21
301 uext 4 281 0 s2 ; floatmul.v:21.21-21.23
302 uext 4 268 0 s1 ; floatmul.v:21.17-21.19
303 next 9 10 26 abcd:95:sample_data$143
304 redor 4 113
305 not 4 304 $eq$floatmul.v:171$29 ; floatmul.v:171.14-171.28
306 redor 4 147
307 not 4 306 $eq$floatmul.v:171$30 ; floatmul.v:171.34-171.48
308 and 4 305 307 $logic_and$floatmul.v:171$31 ; floatmul.v:171.13-171.49
309 ite 9 308 11 156 $procmux$34 ; floatmul.v:171.13-171.49|floatmul.v:171.9-182.5
310 next 9 12 309 abcd:95:sample_data$145
311 next 4 15 8 abcd:79:sample_control_edge$147
312 next 4 22 25 abcd:67:sample_control$155
313 next 28 29 42 abcd:95:sample_data$209
314 ite 28 308 30 113 $procmux$37 ; floatmul.v:171.13-171.49|floatmul.v:171.9-182.5
315 next 28 31 314 abcd:95:sample_data$211
316 next 4 33 8 abcd:79:sample_control_edge$213
317 next 4 38 41 abcd:67:sample_control$221
318 next 43 44 57 abcd:95:sample_data$191
319 ite 43 308 45 147 $procmux$40 ; floatmul.v:171.13-171.49|floatmul.v:171.9-182.5
320 next 43 46 319 abcd:95:sample_data$193
321 next 4 48 8 abcd:79:sample_control_edge$195
322 next 4 53 56 abcd:67:sample_control$203
323 next 4 58 70 abcd:95:sample_data$161
324 ite 4 308 21 172 $procmux$43 ; floatmul.v:171.13-171.49|floatmul.v:171.9-182.5
325 next 4 59 324 abcd:95:sample_data$163
326 next 4 61 8 abcd:79:sample_control_edge$165
327 next 4 66 69 abcd:67:sample_control$173
328 next 79 80 93 abcd:95:sample_data$281
329 next 79 82 211 abcd:95:sample_data$283
330 next 4 84 8 abcd:79:sample_control_edge$285
331 next 4 89 92 abcd:67:sample_control$293
332 next 116 117 130 abcd:95:sample_data$245
333 next 116 119 254 abcd:95:sample_data$247
334 next 4 121 8 abcd:79:sample_control_edge$249
335 next 4 126 129 abcd:67:sample_control$257
336 next 4 160 172 abcd:95:sample_data$227
337 next 4 161 282 abcd:95:sample_data$229
338 next 4 163 8 abcd:79:sample_control_edge$231
339 next 4 168 171 abcd:67:sample_control$239
340 next 174 175 189 abcd:95:sample_data$371
341 slice 28 3 22 0
342 concat 174 14 341
343 ite 174 7 342 189 $procmux$114 ; floatmul.v:58.13-58.15|floatmul.v:58.9-62.7
344 next 174 177 343 abcd:95:sample_data$373
345 next 4 179 8 abcd:79:sample_control_edge$375
346 next 4 185 188 abcd:67:sample_control$383
347 next 174 191 203 abcd:95:sample_data$317
348 slice 28 2 22 0
349 concat 174 14 348
350 ite 174 7 349 203 $procmux$108 ; floatmul.v:72.13-72.15|floatmul.v:72.9-76.7
351 next 174 192 350 abcd:95:sample_data$319
352 next 4 194 8 abcd:79:sample_control_edge$321
353 next 4 199 202 abcd:67:sample_control$329
354 next 43 213 225 abcd:95:sample_data$353
355 slice 43 3 30 23
356 ite 43 7 355 225 $procmux$116 ; floatmul.v:58.13-58.15|floatmul.v:58.9-62.7
357 next 43 214 356 abcd:95:sample_data$355
358 next 4 216 8 abcd:79:sample_control_edge$357
359 next 4 221 224 abcd:67:sample_control$365
360 next 43 235 247 abcd:95:sample_data$299
361 slice 43 2 30 23
362 ite 43 7 361 247 $procmux$110 ; floatmul.v:72.13-72.15|floatmul.v:72.9-76.7
363 next 43 236 362 abcd:95:sample_data$301
364 next 4 238 8 abcd:79:sample_control_edge$303
365 next 4 243 246 abcd:67:sample_control$311
366 next 4 256 268 abcd:95:sample_data$335
367 slice 4 3 31 31
368 ite 4 7 367 268 $procmux$118 ; floatmul.v:58.13-58.15|floatmul.v:58.9-62.7
369 next 4 257 368 abcd:95:sample_data$337
370 next 4 259 8 abcd:79:sample_control_edge$339
371 next 4 264 267 abcd:67:sample_control$347
372 next 4 269 281 abcd:95:sample_data$263
373 slice 4 2 31 31
374 ite 4 7 373 281 $procmux$112 ; floatmul.v:72.13-72.15|floatmul.v:72.9-76.7
375 next 4 270 374 abcd:95:sample_data$265
376 next 4 272 8 abcd:79:sample_control_edge$267
377 next 4 277 280 abcd:67:sample_control$275
378 next 79 284 291 abcd:95:sample_data$179
379 next 79 285 98 abcd:95:sample_data$185
380 next 4 287 290 abcd:67:sample_control$183
; end of yosys output
