; SMT 2
(set-info :source "Generated by CBMC 5.95.1 (cbmc-5.95.1)")
(set-option :produce-models true)
(set-logic QF_AUFBV)

; set_to true (equal)
(define-fun |__CPROVER_dead_object#1| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |__CPROVER_deallocated#1| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |__CPROVER_max_malloc_size#1| () (_ BitVec 64) (_ bv36028797018963968 64))

; set_to true (equal)
(define-fun |__CPROVER_memory_leak#1| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |__CPROVER_rounding_mode!0#1| () (_ BitVec 32) (_ bv0 32))

; find_symbols
(declare-fun |nondet_symex::nondet0| () (_ BitVec 32))
; set_to true (equal)
(define-fun |main::$tmp::return_value_unknown!0@1#2| () (_ BitVec 32) |nondet_symex::nondet0|)

; set_to true (equal)
(define-fun |main::1::A!0@1#2| () (_ BitVec 16) ((_ extract 15 0) |main::$tmp::return_value_unknown!0@1#2|))

; find_symbols
(declare-fun |nondet_symex::nondet1| () (_ BitVec 32))
; set_to true (equal)
(define-fun |main::$tmp::return_value_unknown$0!0@1#2| () (_ BitVec 32) |nondet_symex::nondet1|)

; set_to true (equal)
(define-fun |main::1::B!0@1#2| () (_ BitVec 16) ((_ extract 15 0) |main::$tmp::return_value_unknown$0!0@1#2|))

; find_symbols
(declare-fun |nondet_symex::nondet2| () (_ BitVec 32))
; set_to true (equal)
(define-fun |main::$tmp::return_value_unknown$1!0@1#2| () (_ BitVec 32) |nondet_symex::nondet2|)

; set_to true (equal)
(define-fun |main::1::M!0@1#2| () (_ BitVec 8) ((_ extract 7 0) |main::$tmp::return_value_unknown$1!0@1#2|))

; find_symbols
(declare-fun |nondet_symex::nondet3| () (_ BitVec 32))
; set_to true (equal)
(define-fun |main::$tmp::return_value_unknown$2!0@1#2| () (_ BitVec 32) |nondet_symex::nondet3|)

; set_to true (equal)
(define-fun |main::1::N!0@1#2| () (_ BitVec 8) ((_ extract 7 0) |main::$tmp::return_value_unknown$2!0@1#2|))

; find_symbols
(declare-fun |nondet_symex::nondet4| () (_ BitVec 32))
; set_to true (equal)
(define-fun |main::$tmp::return_value_unknown$3!0@1#2| () (_ BitVec 32) |nondet_symex::nondet4|)

; set_to true (equal)
(define-fun |main::1::O!0@1#2| () (_ BitVec 64) ((_ sign_extend 32) |main::$tmp::return_value_unknown$3!0@1#2|))

; set_to true (equal)
(define-fun |spec::A!0@1#1| () (_ BitVec 16) |main::1::A!0@1#2|)

; set_to true (equal)
(define-fun |spec::B!0@1#1| () (_ BitVec 16) |main::1::B!0@1#2|)

; set_to true (equal)
(define-fun |spec::M!0@1#1| () (_ BitVec 8) |main::1::M!0@1#2|)

; set_to true (equal)
(define-fun |spec::N!0@1#1| () (_ BitVec 8) |main::1::N!0@1#2|)

; find_symbols
(declare-fun |main::1::O!0@1| () (_ BitVec 64))
; set_to true (equal)
(define-fun |spec::O!0@1#1| () (_ BitVec 64) (concat (_ bv2 8) (_ bv0 56)))

; set_to true (equal)
(define-fun |spec::M!0@1#2| () (_ BitVec 8) (bvand ((_ extract 7 0) ((_ zero_extend 24) |spec::M!0@1#1|)) (_ bv15 8)))

; set_to true (equal)
(define-fun |spec::N!0@1#2| () (_ BitVec 8) (bvand ((_ extract 7 0) ((_ zero_extend 24) |spec::N!0@1#1|)) (_ bv15 8)))

; set_to true (equal)
(define-fun |spec::1::D!0@1#2| () (_ BitVec 32) (bvshl ((_ zero_extend 16) |spec::A!0@1#1|) ((_ zero_extend 24) |spec::M!0@1#2|)))

; set_to true (equal)
(define-fun |spec::1::E!0@1#2| () (_ BitVec 32) (bvshl ((_ zero_extend 16) |spec::B!0@1#1|) ((_ zero_extend 24) |spec::N!0@1#2|)))

; set_to true (equal)
(define-fun |main::1::O!0@1#3| () (_ BitVec 64) (bvmul ((_ zero_extend 32) |spec::1::D!0@1#2|) ((_ zero_extend 32) |spec::1::E!0@1#2|)))

; find_symbols
(declare-fun |main::1::A!0@1#1| () (_ BitVec 16))
; convert
; Converting var_no 0 with expr ID of =
(define-fun B0 () Bool (= |main::1::A!0@1#1| |main::1::A!0@1#1|))

; convert
; Converting var_no 1 with expr ID of =
(define-fun B1 () Bool (= |main::1::A!0@1#1| |main::1::A!0@1#1|))

; find_symbols
(declare-fun |main::$tmp::return_value_unknown!0@1#1| () (_ BitVec 32))
; convert
; Converting var_no 2 with expr ID of =
(define-fun B2 () Bool (= |main::$tmp::return_value_unknown!0@1#1| |main::$tmp::return_value_unknown!0@1#1|))

; convert
; Converting var_no 3 with expr ID of =
(define-fun B3 () Bool (= |main::$tmp::return_value_unknown!0@1#1| |main::$tmp::return_value_unknown!0@1#1|))

; find_symbols
(declare-fun |main::1::B!0@1#1| () (_ BitVec 16))
; convert
; Converting var_no 4 with expr ID of =
(define-fun B4 () Bool (= |main::1::B!0@1#1| |main::1::B!0@1#1|))

; convert
; Converting var_no 5 with expr ID of =
(define-fun B5 () Bool (= |main::1::B!0@1#1| |main::1::B!0@1#1|))

; find_symbols
(declare-fun |main::$tmp::return_value_unknown$0!0@1#1| () (_ BitVec 32))
; convert
; Converting var_no 6 with expr ID of =
(define-fun B6 () Bool (= |main::$tmp::return_value_unknown$0!0@1#1| |main::$tmp::return_value_unknown$0!0@1#1|))

; convert
; Converting var_no 7 with expr ID of =
(define-fun B7 () Bool (= |main::$tmp::return_value_unknown$0!0@1#1| |main::$tmp::return_value_unknown$0!0@1#1|))

; find_symbols
(declare-fun |main::1::M!0@1#1| () (_ BitVec 8))
; convert
; Converting var_no 8 with expr ID of =
(define-fun B8 () Bool (= |main::1::M!0@1#1| |main::1::M!0@1#1|))

; convert
; Converting var_no 9 with expr ID of =
(define-fun B9 () Bool (= |main::1::M!0@1#1| |main::1::M!0@1#1|))

; find_symbols
(declare-fun |main::$tmp::return_value_unknown$1!0@1#1| () (_ BitVec 32))
; convert
; Converting var_no 10 with expr ID of =
(define-fun B10 () Bool (= |main::$tmp::return_value_unknown$1!0@1#1| |main::$tmp::return_value_unknown$1!0@1#1|))

; convert
; Converting var_no 11 with expr ID of =
(define-fun B11 () Bool (= |main::$tmp::return_value_unknown$1!0@1#1| |main::$tmp::return_value_unknown$1!0@1#1|))

; find_symbols
(declare-fun |main::1::N!0@1#1| () (_ BitVec 8))
; convert
; Converting var_no 12 with expr ID of =
(define-fun B12 () Bool (= |main::1::N!0@1#1| |main::1::N!0@1#1|))

; convert
; Converting var_no 13 with expr ID of =
(define-fun B13 () Bool (= |main::1::N!0@1#1| |main::1::N!0@1#1|))

; find_symbols
(declare-fun |main::$tmp::return_value_unknown$2!0@1#1| () (_ BitVec 32))
; convert
; Converting var_no 14 with expr ID of =
(define-fun B14 () Bool (= |main::$tmp::return_value_unknown$2!0@1#1| |main::$tmp::return_value_unknown$2!0@1#1|))

; convert
; Converting var_no 15 with expr ID of =
(define-fun B15 () Bool (= |main::$tmp::return_value_unknown$2!0@1#1| |main::$tmp::return_value_unknown$2!0@1#1|))

; find_symbols
(declare-fun |main::1::O!0@1#1| () (_ BitVec 64))
; convert
; Converting var_no 16 with expr ID of =
(define-fun B16 () Bool (= |main::1::O!0@1#1| |main::1::O!0@1#1|))

; convert
; Converting var_no 17 with expr ID of =
(define-fun B17 () Bool (= |main::1::O!0@1#1| |main::1::O!0@1#1|))

; find_symbols
(declare-fun |main::$tmp::return_value_unknown$3!0@1#1| () (_ BitVec 32))
; convert
; Converting var_no 18 with expr ID of =
(define-fun B18 () Bool (= |main::$tmp::return_value_unknown$3!0@1#1| |main::$tmp::return_value_unknown$3!0@1#1|))

; convert
; Converting var_no 19 with expr ID of =
(define-fun B19 () Bool (= |main::$tmp::return_value_unknown$3!0@1#1| |main::$tmp::return_value_unknown$3!0@1#1|))

; find_symbols
(declare-fun |spec::1::D!0@1#1| () (_ BitVec 32))
; convert
; Converting var_no 20 with expr ID of =
(define-fun B20 () Bool (= |spec::1::D!0@1#1| |spec::1::D!0@1#1|))

; convert
; Converting var_no 21 with expr ID of =
(define-fun B21 () Bool (= |spec::1::D!0@1#1| |spec::1::D!0@1#1|))

; find_symbols
(declare-fun |spec::1::E!0@1#1| () (_ BitVec 32))
; convert
; Converting var_no 22 with expr ID of =
(define-fun B22 () Bool (= |spec::1::E!0@1#1| |spec::1::E!0@1#1|))

; convert
; Converting var_no 23 with expr ID of =
(define-fun B23 () Bool (= |spec::1::E!0@1#1| |spec::1::E!0@1#1|))

; find_symbols
(declare-fun |symex::args::0| () (_ BitVec 16))
; set_to true
(assert (= |main::1::A!0@1#2| |symex::args::0|))

; find_symbols
(declare-fun |symex::args::1| () (_ BitVec 16))
; set_to true
(assert (= |main::1::B!0@1#2| |symex::args::1|))

; find_symbols
(declare-fun |symex::args::2| () (_ BitVec 8))
; set_to true
(assert (= |main::1::M!0@1#2| |symex::args::2|))

; find_symbols
(declare-fun |symex::args::3| () (_ BitVec 8))
; set_to true
(assert (= |main::1::N!0@1#2| |symex::args::3|))

; find_symbols
(declare-fun |symex::args::4| () (_ BitVec 64))
; set_to true
(assert (= (concat (_ bv2 8) (_ bv0 56)) |symex::args::4|))

; set_to false
(assert (not (= |main::1::O!0@1#3| (_ bv1 64))))

; convert
; Converting var_no 24 with expr ID of not
(define-fun B24 () Bool (not false))

; set_to true
(assert B24)


(exit)
; end of SMT2 file
