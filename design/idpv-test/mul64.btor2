; BTOR description generated by Yosys 0.37+34 (git sha1 80511ced7, clang 14.0.0-1ubuntu1.1 -fPIC -Os) for module Mul.
1 sort bitvec 1
2 input 1 io_out_ready ; mul64.v:9.17-9.29
3 sort bitvec 64
4 input 3 io_multiplier ; mul64.v:7.17-7.30
5 input 3 io_multiplicand ; mul64.v:6.17-6.32
6 input 1 io_mulw ; mul64.v:5.17-5.24
7 input 1 io_mul_valid ; mul64.v:4.17-4.29
8 input 1 reset ; mul64.v:3.17-3.22
9 input 1 clock ; mul64.v:2.17-2.22
10 sort bitvec 32
11 const 10 00000000000000000000000000000000
12 state 3 res
13 slice 10 12 31 0
14 sort bitvec 65
15 state 14 src2
16 redor 1 15 $ne$mul64.v:39$8 ; mul64.v:39.16-39.29
17 ite 10 16 11 13 $ternary$mul64.v:51$20 ; mul64.v:51.25-51.49
18 sort bitvec 2
19 state 18 state
20 const 18 01
21 eq 1 19 20 $eq$mul64.v:54$25 ; mul64.v:54.25-54.38
22 ite 10 21 17 11 $ternary$mul64.v:54$26 ; mul64.v:54.25-54.56
23 redor 1 19
24 not 1 23 $eq$mul64.v:64$32 ; mul64.v:64.25-64.38
25 ite 10 24 11 22 $ternary$mul64.v:64$33 ; mul64.v:64.25-64.56
26 output 25 io_result_lo ; mul64.v:11.17-11.29
27 slice 1 5 63 63
28 slice 1 4 63 63
29 xor 1 27 28 $xor$mul64.v:23$1 ; mul64.v:23.16-23.55
30 sort bitvec 31
31 slice 30 12 62 32
32 concat 10 29 31
33 ite 10 16 11 32 $ternary$mul64.v:50$19 ; mul64.v:50.25-50.57
34 eq 1 19 20 $eq$mul64.v:53$23 ; mul64.v:53.25-53.38
35 ite 10 34 33 11 $ternary$mul64.v:53$24 ; mul64.v:53.25-53.56
36 redor 1 19
37 not 1 36 $eq$mul64.v:63$30 ; mul64.v:63.25-63.38
38 ite 10 37 11 35 $ternary$mul64.v:63$31 ; mul64.v:63.25-63.56
39 output 38 io_result_hi ; mul64.v:10.17-10.29
40 eq 1 19 20 $eq$mul64.v:52$21 ; mul64.v:52.19-52.32
41 const 1 1
42 const 1 0
43 ite 1 16 42 41 $ternary$mul64.v:49$18 ; mul64.v:49.19-49.37
44 and 1 40 43 $and$mul64.v:52$22 ; mul64.v:52.19-52.42
45 redor 1 19
46 not 1 45 $eq$mul64.v:62$28 ; mul64.v:62.25-62.38
47 ite 1 46 42 44 $ternary$mul64.v:62$29 ; mul64.v:62.25-62.55
48 output 47 io_out_valid ; mul64.v:8.17-8.29
49 sort bitvec 130
50 sort bitvec 128
51 state 50 src1
52 const 18 00
53 concat 49 52 51
54 concat 49 51 52
55 redor 1 15 $ne$mul64.v:45$12 ; mul64.v:45.25-45.38
56 ite 49 55 54 53 $ternary$mul64.v:45$13 ; mul64.v:45.25-45.65
57 eq 1 20 19 $eq$mul64.v:46$14 ; mul64.v:46.26-46.39
58 ite 49 57 56 53 $ternary$mul64.v:46$15 ; mul64.v:46.26-46.65
59 const 10 11111111111111111111111111111111
60 slice 1 5 31 31
61 ite 10 60 59 11 $ternary$mul64.v:28$2 ; mul64.v:28.30-28.72
62 slice 10 5 31 0
63 concat 3 61 62
64 ite 3 6 63 5 $ternary$mul64.v:30$3 ; mul64.v:30.25-30.65
65 const 3 0000000000000000000000000000000000000000000000000000000000000000
66 const 3 1111111111111111111111111111111111111111111111111111111111111111
67 slice 1 64 63 63
68 ite 3 67 66 65 $ternary$mul64.v:34$6 ; mul64.v:34.32-34.74
69 concat 50 68 64
70 ite 50 7 69 51 $ternary$mul64.v:37$7 ; mul64.v:37.25-37.56
71 concat 49 52 70
72 redor 1 19
73 not 1 72 $eq$mul64.v:47$16 ; mul64.v:47.26-47.39
74 ite 49 73 71 58 $ternary$mul64.v:47$17 ; mul64.v:47.26-47.68
75 const 49 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
76 ite 49 8 75 74 $ternary$mul64.v:55$27 ; mul64.v:55.26-55.50
77 uext 49 76 0 _GEN_25 ; mul64.v:55.16-55.23
78 uext 10 22 0 _GEN_28 ; mul64.v:54.15-54.22
79 uext 10 35 0 _GEN_27 ; mul64.v:53.15-53.22
80 uext 1 44 0 _GEN_26 ; mul64.v:52.9-52.16
81 uext 10 17 0 _GEN_24 ; mul64.v:51.15-51.22
82 uext 10 33 0 _GEN_23 ; mul64.v:50.15-50.22
83 uext 1 43 0 _GEN_22 ; mul64.v:49.9-49.16
84 uext 10 32 0 _io_result_hi_T_1 ; mul64.v:48.15-48.32
85 uext 49 74 0 _GEN_18 ; mul64.v:47.16-47.23
86 uext 49 58 0 _GEN_16 ; mul64.v:46.16-46.23
87 uext 49 56 0 _GEN_7 ; mul64.v:45.16-45.22
88 ite 18 2 52 19 $ternary$mul64.v:44$11 ; mul64.v:44.23-44.50
89 uext 18 88 0 _GEN_4 ; mul64.v:44.14-44.20
90 uext 49 54 0 _src1_T ; mul64.v:43.16-43.23
91 input 3
92 add 3 12 91 $add$mul64.v:40$9 ; mul64.v:40.26-40.50
93 input 1
94 sort bitvec 63
95 const 94 000000000000000000000000000000000000000000000000000000000000000
96 concat 3 95 93
97 add 3 92 96 $add$mul64.v:42$10 ; mul64.v:42.26-42.44
98 uext 3 97 0 _res_T_3 ; mul64.v:42.15-42.23
99 uext 3 96 0 _GEN_21 ; mul64.v:41.15-41.22
100 uext 3 92 0 _res_T_1 ; mul64.v:40.15-40.23
101 uext 1 16 0 _T_4 ; mul64.v:39.9-39.13
102 slice 1 4 31 31
103 ite 10 102 59 11 $ternary$mul64.v:31$4 ; mul64.v:31.30-31.70
104 slice 10 4 31 0
105 concat 3 103 104
106 ite 3 6 105 4 $ternary$mul64.v:33$5 ; mul64.v:33.25-33.63
107 slice 94 106 62 0
108 concat 3 107 42
109 uext 3 108 0 real_er ; mul64.v:38.15-38.22
110 uext 50 70 0 _GEN_1 ; mul64.v:37.16-37.22
111 concat 14 106 42
112 uext 14 111 0 _real_er_T ; mul64.v:36.15-36.25
113 uext 50 69 0 real_cand ; mul64.v:35.16-35.25
114 uext 3 68 0 _real_cand_T_5 ; mul64.v:34.15-34.29
115 uext 3 106 0 src2_32 ; mul64.v:33.15-33.22
116 uext 3 105 0 _src2_32_T_4 ; mul64.v:32.15-32.27
117 uext 10 103 0 _src2_32_T_2 ; mul64.v:31.15-31.27
118 uext 3 64 0 src1_32 ; mul64.v:30.15-30.22
119 uext 3 63 0 _src1_32_T_4 ; mul64.v:29.15-29.27
120 uext 10 61 0 _src1_32_T_2 ; mul64.v:28.15-28.27
121 uext 1 29 0 sign ; mul64.v:23.9-23.13
122 uext 3 91 0 booth_partial_io_p ; mul64.v:22.15-22.33
123 input 1
124 uext 1 123 0 booth_partial_io_c ; mul64.v:21.9-21.27
125 slice 3 51 63 0
126 uext 3 125 0 booth_partial_io_x ; mul64.v:20.15-20.33
127 sort bitvec 3
128 slice 127 15 2 0
129 uext 127 128 0 booth_partial_io_y ; mul64.v:19.14-19.32
130 redor 1 15 $ne$mul64.v:75$37 ; mul64.v:75.11-75.24
131 ite 3 130 97 12 $procmux$69 ; mul64.v:75.11-75.24|mul64.v:75.7-77.10
132 eq 1 20 19 $eq$mul64.v:74$36 ; mul64.v:74.18-74.31
133 ite 3 132 131 12 $procmux$71 ; mul64.v:74.18-74.31|mul64.v:74.14-78.8
134 ite 3 7 65 12 $procmux$74 ; mul64.v:71.11-71.23|mul64.v:71.7-73.10
135 redor 1 19
136 not 1 135 $eq$mul64.v:70$35 ; mul64.v:70.18-70.31
137 ite 3 136 134 133 $procmux$76 ; mul64.v:70.18-70.31|mul64.v:70.14-78.8
138 ite 3 8 65 137 $procmux$79 ; mul64.v:68.9-68.14|mul64.v:68.5-78.8
139 next 3 12 138 $procdff$81 ; mul64.v:67.3-102.6
140 slice 94 15 64 2
141 concat 14 52 140
142 redor 1 15 $ne$mul64.v:98$44 ; mul64.v:98.11-98.24
143 ite 14 142 141 15 $procmux$45 ; mul64.v:98.11-98.24|mul64.v:98.7-100.10
144 eq 1 20 19 $eq$mul64.v:97$43 ; mul64.v:97.18-97.31
145 ite 14 144 143 15 $procmux$47 ; mul64.v:97.18-97.31|mul64.v:97.14-101.8
146 slice 94 106 62 0
147 concat 3 146 42
148 concat 14 42 147
149 ite 14 7 148 15 $procmux$50 ; mul64.v:94.11-94.23|mul64.v:94.7-96.10
150 redor 1 19
151 not 1 150 $eq$mul64.v:93$42 ; mul64.v:93.18-93.31
152 ite 14 151 149 145 $procmux$52 ; mul64.v:93.18-93.31|mul64.v:93.14-101.8
153 const 14 00000000000000000000000000000000000000000000000000000000000000000
154 ite 14 8 153 152 $procmux$55 ; mul64.v:91.9-91.14|mul64.v:91.5-101.8
155 next 14 15 154 $procdff$84 ; mul64.v:67.3-102.6
156 redor 1 15 $ne$mul64.v:86$40 ; mul64.v:86.13-86.26
157 ite 18 156 19 88 $procmux$57 ; mul64.v:86.11-86.27|mul64.v:86.7-88.10
158 eq 1 20 19 $eq$mul64.v:85$39 ; mul64.v:85.18-85.31
159 ite 18 158 157 19 $procmux$59 ; mul64.v:85.18-85.31|mul64.v:85.14-89.8
160 ite 18 7 20 19 $procmux$62 ; mul64.v:82.11-82.23|mul64.v:82.7-84.10
161 redor 1 19
162 not 1 161 $eq$mul64.v:81$38 ; mul64.v:81.18-81.31
163 ite 18 162 160 159 $procmux$64 ; mul64.v:81.18-81.31|mul64.v:81.14-89.8
164 ite 18 8 52 163 $procmux$67 ; mul64.v:79.9-79.14|mul64.v:79.5-89.8
165 next 18 19 164 $procdff$82 ; mul64.v:67.3-102.6
166 slice 50 76 127 0
167 next 50 51 166 $procdff$83 ; mul64.v:67.3-102.6
; end of yosys output
